{"/home/travis/build/npmtest/node-npmtest-deployd/test.js":"/* istanbul instrument in package npmtest_deployd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-deployd/lib.npmtest_deployd.js":"/* istanbul instrument in package npmtest_deployd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_deployd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_deployd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-deployd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-deployd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_deployd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_deployd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_deployd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_deployd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_deployd.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_deployd.__dirname + '/lib.npmtest_deployd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/index.js":"var Server = require('./lib/server')\n  , upgrade = require('doh').upgrade;\n\n/**\n * export a simple function that constructs a dpd server based on a config\n */\n\nmodule.exports = function (config) {\n  var server = new Server(config);\n  upgrade(server);\n  return server;\n};\n\n\n\nmodule.exports.attach = require('./lib/attach');\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/server.js":"var http = require('http')\n  , Router = require('./router')\n  , db = require('./db')\n  , util = require('util')\n  , Keys = require('./keys')\n  , SessionStore = require('./session').SessionStore\n  , fs = require('fs')\n  , io = require('socket.io')\n  , setupReqRes = require('./util/http').setup\n  , debug = require('debug')('server')\n  , config = require('./config-loader')\n  , _ = require('underscore');\n\nfunction extend(origin, add) {\n  // don't do anything if add isn't an object\n  if (!add || typeof add !== 'object') return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    if(add[keys[i]]) origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n\n/**\n * Create an http server with the given options and create a `Router` to handle its requests.\n *\n * Options:\n *\n *   - `db`           the database connection info\n *   - `host`         the server's hostname\n *   - `port`         the server's port\n *\n * Properties:\n *\n *  - `sessions`      the servers `SessionStore`\n *  - `sockets`       raw socket.io sockets\n *  - `db`            the servers `Db` instance\n *\n * Example:\n *\n *     var server = new Server({port: 3000, db: {host: 'localhost', port: 27015, name: 'my-db'}});\n *\n *     server.listen();\n *\n * @param {Object} options\n * @return {HttpServer}\n */\n\nfunction Server(options) {\n  var server = process.server = this;\n  http.Server.call(this);\n\n  // defaults\n  this.options = options = extend({\n    port: 2403,\n    db: {port: 27017, host: '127.0.0.1', name: 'deployd'}\n  }, options);\n\n  debug('started with options %j', options);\n\n  // an object to map a server to its stores\n  this.stores = {};\n\n  // back all memory stores with a db\n  this.db = db.create(options.db);\n\n  var socketServer = io.listen(this, _.extend({\n    'log level': 0\n  }, (this.options.socketIo && this.options.socketIo.options) || {}));\n\n  // use socket io for a session based realtime channel\n  this.sockets = socketServer.sockets;\n\n  if (this.options.socketIo && this.options.socketIo.adapter) {\n    socketServer.adapter(this.options.socketIo.adapter);\n  }\n\n  // persist sessions in a store\n  this.sessions = new SessionStore('sessions', this.db, this.sockets, options.sessions);\n\n  // persist keys in a store\n  this.keys = new Keys();\n\n  this.on('request', server.handleRequest);\n\n  server.on('request:error', function (err, req, res) {\n    console.error();\n    console.error(req.method, req.url, err.stack || err);\n    process.exit(1);\n  });\n}\nutil.inherits(Server, http.Server);\n\nServer.prototype.handleRequest = function handleRequest (req, res) {\n  var server = this;\n  // dont handle socket.io requests\n  if(req.url.indexOf('/socket.io/') === 0) return;\n\n  debug('%s %s', req.method, req.url);\n\n  // add utilites to req and res\n  setupReqRes(server.options, req, res, function(err, next) {\n    if(err) return res.end(err.message);\n\n    var authToken, usesBearerAuth = false;\n    if (req.headers && req.headers.authorization) {\n      var parts = req.headers.authorization.split(' ');\n      var scheme = parts[0]\n      , credentials = parts[1];\n\n      if (/^Bearer$/i.test(scheme)) {\n        authToken = credentials;\n        usesBearerAuth = true;\n      }\n    }\n\n    server.sessions.createSession(authToken || req.cookies.get('sid'), function(err, session) {\n      if(err) {\n        debug('session error', err, session);\n        throw err;\n      } else {\n        if (!usesBearerAuth) {\n          // (re)set the session id cookie if we're not using Authorization Bearer\n          if (session.sid) req.cookies.set('sid', session.sid);\n        }\n        req.session = session;\n\n        var root = req.headers['dpd-ssh-key'] || req.cookies.get('DpdSshKey');\n\n        if (server.options.env === 'development') {\n          if (root) { req.isRoot = true; }\n          server.route(req, res);\n        } else if (root) {\n          // all root requests\n          // must be authenticated\n          debug('authenticating', root);\n          server.keys.get(root, function(err, key) {\n            if(err) throw err;\n            if(key) req.isRoot = true;\n            debug('is root?', session.isRoot);\n            server.route(req, res);\n          });\n        } else {\n          // normal route\n          server.route(req, res);\n        }\n      }\n    });\n  });\n};\n\n/**\n * Start listening for incoming connections.\n *\n * @return {Server} for chaining\n */\n\nServer.prototype.listen = function(port, host) {\n  var server = this;\n  var serverpath = server.options.server_dir || fs.realpathSync('./');\n\n  config.loadConfig(serverpath, server, function(err, resourcesInstances) {\n    if (err) {\n      console.error();\n      console.error(\"Error loading resources: \");\n      console.error(err.stack || err);\n      process.exit(1);\n    } else {\n      server.resources = resourcesInstances;\n      var router = new Router(resourcesInstances, server);\n      server.router = router;\n      http.Server.prototype.listen.call(server, port || server.options.port, host || server.options.host);\n    }\n  });\n  return this;\n};\n\nServer.prototype.route = function route (req, res) {\n  var server = this;\n  var serverpath = server.options.server_dir || './';\n\n  config.loadConfig(serverpath, server, function(err, resourcesInstances) {\n    if (err) throw err;\n    var router = new Router(resourcesInstances, server);\n    server.router = router;\n\n    server.resources = resourcesInstances;\n    router.route(req, res);\n  });\n};\n\n/**\n * Create a new `Store` for persisting data using the database info that was passed to the server when it was created.\n *\n * Example:\n *\n *     // Create a new server\n *     var server = new Server({port: 3000, db: {host: 'localhost', port: 27015, name: 'my-db'}});\n *\n *     // Attach a store to the server\n *     var todos = server.createStore('todos');\n *\n *     // Use the store to CRUD data\n *     todos.insert({name: 'go to the store', done: true}, ...); // see `Store` for more info\n *\n * @param {String} namespace\n * @return {Store}\n */\n\nServer.prototype.createStore = function(namespace) {\n\treturn (this.stores[namespace] = this.db.createStore(namespace));\n};\n\nmodule.exports = Server;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/router.js":"var Context = require('./context')\n  , escapeRegExp  = /[\\-\\[\\]{}()+?.,\\\\\\^$|#\\s]/g\n  , debug = require('debug')('router')\n  , doh = require('doh')\n  , error404 = doh.createResponder()\n  , async = require('async');\n\n/**\n * A `Router` routes incoming requests to the correct resource. It also initializes and\n * executes the correct methods on a resource.\n *\n * @param {Resource Array} resources\n * @api private\n */\n\nfunction Router(resources, server) {\n  this.resources = resources || [];\n  this.server = server;\n}\n\n/**\n * Route requests to resources with matching root paths.\n * Generate a `ctx` object and hand it to the resource, along with the `res` by calling its `resource.handle(ctx, next)` method.\n * If a resource calls `next()`, move on to the next resource.\n *\n * If all matching resources call next(), or if the router does not find a resource, respond with `404`.\n *\n * @param {ServerRequest} req\n * @param {ServerResponse} res\n * @api public\n */\n\nRouter.prototype.route = function (req, res) {\n  var router = this\n    , server = this.server\n    , url = req.url\n    , resources = this.matchResources(url)\n    , i = 0;\n\n  if (req._routed) {\n    return;\n  }\n\n  req._routed = true;\n\n  async.series([function(fn) {\n    async.forEach(router.resources, function(resource, fn) {\n      if(resource.handleSession) {\n        var ctx = new Context(resource, req, res, server);\n        resource.handleSession(ctx, fn);\n      } else {\n        fn();\n      }\n    }, fn);\n  }], function(err) {\n    if (err) throw err;\n    nextResource();\n  });\n\n  //TODO: Handle edge case where ctx.next() is called more than once\n  function nextResource() {\n    var resource = resources[i++]\n      , ctx;\n\n    var handler = doh.createHandler({req: req, res: res, server: server});\n    handler.run(function () {\n      process.nextTick(function () {\n        if (resource) {\n          debug('routing %s to %s', req.url, resource.path);\n          ctx = new Context(resource, req, res, server);\n          ctx.router = router;\n\n          // default root to false\n          if(ctx.session) ctx.session.isRoot = req.isRoot || false;\n\n          // external functions\n          var furl = ctx.url.replace('/', '');\n          if(resource.external && resource.external[furl]) {\n            resource.external[furl](ctx.body, ctx, ctx.done);\n          } else {\n            resource.handle(ctx, nextResource);\n          }\n        } else {\n          debug('404 %s', req.url);\n          res.statusCode = 404;\n          error404({message: 'resource not found'}, req, res);\n        }\n      });\n    });\n  }\n\n};\n\n\n/**\n * Get resources whose base path matches the incoming URL, and order by specificness.\n * (So that /foo/bar will handle a request before /foo)\n *\n * @param {String} url\n * @param {Resource Array} matching resources\n * @api private\n */\n\nRouter.prototype.matchResources = function(url) {\n  var router = this\n    , result;\n\n  debug('resources %j', this.resources.map(function(r) { return r.path; }));\n\n  if (!this.resources || !this.resources.length) return [];\n\n  result = this.resources.filter(function(d) {\n    return url.match(router.generateRegex(d.path));\n  }).sort(function(a, b) {\n    return specificness(b) - specificness(a);\n  });\n  return result;\n};\n\n/**\n * Generates a regular expression from a base path.\n *\n * @param {String} path\n * @return {RegExp} regular expression\n * @api private\n */\n\nRouter.prototype.generateRegex = function(path) {\n  if (!path || path === '/') path = '';\n  path = path.replace(escapeRegExp, '\\\\$&');\n  return new RegExp('^' + path + '(?:[/?].*)?$');\n};\n\nfunction specificness(resource) {\n  var path = resource.path;\n  if (!path || path === '/') path = '';\n  return path.split('/').length;\n}\n\nmodule.exports = Router;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/context.js":"var internalClient = require('./internal-client')\n  , debug = require('debug')('context')\n  , respond = require('doh').createResponder();\n\n/**\n * A `Context` gives access to a `req` and `res` object when passed to `resource.handle()`,\n * as well as several utility functions and properties.\n *\n * Properties:\n * - **req** `ServerRequest` req\n * - **res** `ServerResponse` res\n * - **url** `String` The url of the request, stripped of the resource's base path\n * - **body** `Object` The body of the request, if the body is JSON or url encoded\n * - **query** `Object` The query of the request\n *\n * @param {Resource} resource\n * @param {HttpRequest} req\n * @param {HttpResponse} res\n * @param {Server} server\n */\n\nfunction Context(resource, req, res, server) {\n  var ctx = this;\n  this.url = req.url.slice(resource.path.length).split('?')[0];\n  if (this.url.indexOf('/') !== 0) this.url = '/' + this.url;\n\n  this.req = req;\n  this.res = res;\n  this.body = req.body;\n  this.query = req.query || {};\n  this.server = server;\n  this.session = req.session;\n  this.method = req && req.method;\n\n  // always bind done to this\n  var done = this.done;\n  this.done = function() {\n    done.apply(ctx, arguments);\n  };\n\n  if ((this.query && typeof this.query.$limitRecursion !== 'undefined') || (this.body && typeof this.body.$limitRecursion !== 'undefined')) {\n    var recursionLimit = this.query.$limitRecursion || this.body.$limitRecursion || 0;\n    req.stack = req.stack || [];\n    req.stack.recursionLimit = recursionLimit;\n  }\n\n  this.dpd = internalClient.build(server, req.session, req.stack, ctx);\n}\n\n/**\n * Alias for `ctx.res.end()`\n */\nContext.prototype.end = function() {\n  return this.res.end.apply(this.res, arguments);\n};\n\n/**\n * Continuous callback sugar for easily calling res.end().\n *\n * Example:\n *\n *     // instead of\n *     store.find({foo: 'bar'}, function(err, res) {\n *       if(err) return res.end(JSON.stringify(err));\n *       res.end(JSON.stringify(res));\n *     })\n *\n *     // you can just do\n *     store.find({foo: 'bar'}, ctx.done);\n *\n * @param {Error} err\n * @param {Object} response\n */\n\nContext.prototype.done = function(err, res) {\n  var body = res\n    , type = 'application/json';\n\n  // default response\n  var status = this.res.statusCode = this.res.statusCode || 200;\n\n  if(err) {\n    debug('%j', err);\n    if(status < 400) this.res.statusCode = 400;\n    if(err.statusCode) this.res.statusCode = err.statusCode;\n    respond(err, this.req, this.res);\n  } else {\n    if(typeof body == 'object') {\n      body = JSON.stringify(body);\n    } else {\n      type = 'text/html; charset=utf-8';\n    }\n\n    try {\n      this.res.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n      this.res.setHeader(\"Pragma\", \"no-cache\");\n      this.res.setHeader(\"Expires\", \"0\");\n      if(status != 204 && status != 304) {\n        if(body) {\n          this.res.setHeader('Content-Length', Buffer.isBuffer(body)\n               ? body.length\n               : Buffer.byteLength(body));\n        }\n        this.res.setHeader('Content-Type', type);\n        this.res.end(body);\n      } else {\n        this.res.end();\n      }\n    } catch(e) {\n      console.error(e);\n    }\n  }\n};\n\nmodule.exports = Context;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/internal-client.js":"var debug = require('debug')('internal-client')\n  , Promise = require('bluebird');\n\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last == '.') {\n    parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\nvar normalizePath = function(path) {\n  var isAbsolute = path.charAt(0) === '/',\n      trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(path.split('/').filter(function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n\nfunction joinPath() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalizePath(paths.filter(function(p, index) {\n    return p && typeof p === 'string';\n  }).join('/'));\n}\n\n\n\nexports.build = function(server, session, stack, ctx) {\n  var baseMethods\n    , dpd = {};\n\n  baseMethods = {\n    request: function(method, options, fn) {\n      var promise = new Promise(function(resolve, reject) {\n        var req\n          , res\n          , urlKey\n          , recursions\n          , recursionLimit;\n\n        req = {\n            url: joinPath('/', options.path)\n          , method: method\n          , query: options.query\n          , body: options.body\n          , session: session\n          , isRoot: session && session.isRoot\n          , internal: true\n          , headers: (ctx && ctx.req) ? (ctx.req.headers || {}) : {}\n          , connection: (ctx && ctx.req) ? (ctx.req.connection || {}) : {}\n          , on: function() {}\n        };\n\n        var callback = function(data, error) {\n          // resolve or reject promise\n          if (error) {\n            reject(error);\n          } else {\n            resolve(data);\n          }\n        };\n\n        urlKey = req.method + ' ' + req.url;\n\n        req.stack = stack || [];\n        debug(\"Stack: %j\", stack);\n\n        recursions = req.stack.filter(function(s) { return s === urlKey; }).length;\n\n        recursionLimit = (stack && stack.recursionLimit) || 2;\n\n        if (recursions < recursionLimit) {\n          req.stack.push(urlKey);\n          debug(\"Putting %s on stack\", urlKey);\n\n          res = {\n            setHeader: function() {},\n            end: function(data) {\n              if (res.statusCode === 200 || res.statusCode === 204) {\n                try {\n                  callback(JSON.parse(data), null);\n                } catch (ex) {\n                  callback(data, null);\n                }\n              } else {\n                try {\n                  callback(null, JSON.parse(data));\n                } catch (ex) {\n                  callback(null, data);\n                }\n              }\n            },\n            internal: true,\n            headers: {},\n            on: function() {}\n          };\n\n          server.router.route(req, res);\n        } else {\n          debug(\"Recursive call detected - aborting\");\n          callback(null, \"Recursive call to \" + urlKey + \" detected\");\n        }\n\n      }).bind(this);\n\n      if (typeof fn === 'function') {\n        // call our old-style callback for backwards compatibility\n        promise\n          .then(function (data) {\n            fn(data);\n          }, function (error) {\n            fn(null, error);\n          });\n      }\n\n      return promise;\n    }\n  };\n\n  baseMethods.get = function(options, fn) {\n    return baseMethods.request.call(this, \"GET\", options, fn);\n  };\n\n  baseMethods.post = function(options, fn) {\n    return baseMethods.request.call(this, \"POST\", options, fn);\n  };\n\n  baseMethods.put = function(options, fn) {\n    return baseMethods.request.call(this, \"PUT\", options, fn);\n  };\n\n  baseMethods.del = function(options, fn) {\n    return baseMethods.request.call(this, \"DELETE\", options, fn);\n  };\n\n  if (server.resources) {\n    server.resources.forEach(function(r) {\n      if (r.clientGeneration) {\n        var jsName = r.path.replace(/[^A-Za-z0-9]/g, '');\n        dpd[jsName] = createResourceClient(r, baseMethods);\n      }\n    });\n  }\n\n  return dpd;\n};\n\nfunction createResourceClient(resource, baseMethods) {\n\n  var r = {\n    get: function(func, p, query, fn) {\n\n      var settings = parseGetSignature(arguments);\n\n      settings.path = joinPath(resource.path, settings.path);\n\n      return baseMethods.get.call(this, settings, settings.fn);\n    }\n    , post: function(p, query, body, fn) {\n      var settings = parsePostSignature(arguments);\n      settings.path = joinPath(resource.path, settings.path);\n\n      return baseMethods.post.call(this, settings, settings.fn);\n    }\n    , put: function(p, query, body, fn) {\n      var settings = parsePostSignature(arguments);\n      settings.path = joinPath(resource.path, settings.path);\n\n      return baseMethods.put.call(this, settings, settings.fn);\n    }\n    , del: function(p, query, fn) {\n      var settings = parseGetSignature(arguments);\n      settings.path = joinPath(resource.path, settings.path);\n\n      return baseMethods.del.call(this, settings, settings.fn);\n    }\n  };\n\n  r.exec = function(func, path, body, fn) {\n    var settings = {}\n      , i = 0;\n\n    settings.func = arguments[i];\n    i++;\n\n    // path\n    if (typeof arguments[i] === 'string') {\n      settings.path = arguments[i];\n      i++;\n    }\n\n    // body\n    if (typeof arguments[i] === 'object') {\n      settings.body = arguments[i];\n      i++;\n    }\n\n    fn = arguments[i];\n\n    settings.path = joinPath(resource.path, settings.func, settings.path);\n    return baseMethods.post(settings, fn);\n  };\n\n  resource.clientGenerationGet.forEach(function(func) {\n    r[func] = function(path, query, fn) {\n      r.get(func, path, query, fn);\n    };\n  });\n\n  resource.clientGenerationExec.forEach(function(func) {\n    r[func] = function(path, query, fn) {\n      r.exec(func, path, query, fn);\n    };\n  });\n\n  r.getResource = function() { return resource; };\n\n  return r;\n}\n\n\nfunction isString(arg) {\n  return typeof arg === 'string' || typeof arg === 'number';\n}\n\nfunction toString(arg) {\n  return arg ? arg.toString() : null;\n}\n\nfunction parseGetSignature(args) {\n  var settings = {}\n    , i = 0;\n\n  // path/func\n  if (isString(args[i]) || !args[i]) {\n    settings.path = toString(args[i]);\n    i++;\n  }\n\n  // join path to func\n  if (isString(args[i])  || !args[i]) {\n    settings.path = joinPath(settings.path, toString(args[i]));\n    i++;\n  }\n\n  // query\n  if (typeof args[i] === 'object' || !args[i]) {\n    settings.query = args[i];\n    i++;\n  }\n\n  if (typeof args[i] === 'function') {\n    settings.fn = args[i];\n  }\n\n  return settings;\n}\n\nfunction parsePostSignature(args) {\n  var settings = {}\n    , i = 0;\n\n  //path\n  if (isString(args[i]) || !args[i]) {\n    settings.path = toString(args[i]);\n    i++;\n  }\n\n  // body\n  if (typeof args[i] === 'object' || !args[i]) {\n    settings.body = args[i];\n    i++;\n  }\n\n  // query - if this exists the LAST obj was query and the new one is body\n  if (typeof args[i] === 'object') {\n    settings.query = settings.body;\n    settings.body = args[i];\n    i++;\n  }\n\n  if (typeof args[i] === 'function') {\n    settings.fn = args[i];\n  }\n\n  return settings;\n}\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/db.js":"var db = module.exports = {}\n  , util = require('util')\n  , EventEmitter = require('events').EventEmitter\n  , mongodb = require('mongodb')\n  , uuid = require('./util/uuid')\n  , scrub = require('scrubber').scrub\n  , debug = require('debug')('db')\n  , url = require('url')\n  , Promise = require('bluebird')\n  , _ = require('underscore');\n\nrequire(\"debug\").enable(\"db:error\");\nvar error = require('debug')('db:error');\n\n/**\n * Create a new database with the given options. You can start making\n * database calls right away. They are internally buffered and executed once the\n * connection is resolved.\n *\n * Options:\n *\n *   - `name`         the database name\n *   - `host`         the database host\n *   - `port`         the database port\n *\n * Example:\n *\n *     db\n *       .create({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .insert({foo: 'bar'}, fn)\n *\n * @param {Object} options\n * @return {Db}\n */\n\ndb.create = function (options) {\n  var db = new Db(options);\n  return db;\n};\n\n/**\n * A `Db` abstracts a driver implementation of the database. This allows for\n * a single interface to be used against any database implementation.\n *\n * Example:\n *\n *     var redis = require('redis');\n *\n *     function Redis(options) {\n *       this.options = options;\n *       this._redis = redis.createClient()\n *     }\n *     util.inherits(Redis, Db);\n *\n *     Redis.prototype.open = function (fn) {\n *       this._redis.once('ready', fn);\n *     }\n *\n * @param {Object} options\n * @api private\n */\n\nfunction Db(options) {\n  this.options = options;\n  this.connectionString = this.options.connectionString;\n  this.connectionOptions = this.options.connectionOptions || null;\n  if (!this.connectionString && this.options.host) {\n    this.connectionString = url.format({\n      protocol: \"mongodb\",\n      slashes: true,\n      hostname: this.options.host,\n      port: this.options.port,\n      auth: this.options.credentials ? this.options.credentials.username + \":\" + this.options.credentials.password : null,\n      pathname: this.options.name\n    });\n  }\n}\nutil.inherits(Db, EventEmitter);\ndb.Db = Db;\n\n/**\n * Drop the underlying database.\n *\n * @param {Function} callback\n * @api private\n */\n\nDb.prototype.drop = function (fn) {\n  getConnection(this).then(function (mdb) {\n    mdb.open(function () {\n      mdb.dropDatabase(fn);\n    });\n  });\n};\n\n/**\n * Create a new database store (eg. a collection).\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .insert({foo: 'bar'}, fn)\n *\n * @param {String} namespace\n * @return {Store}\n */\n\nDb.prototype.createStore = function (namespace) {\n  return new Store(namespace, this);\n};\n\n/**\n * Initialize a space in the database (eg. a collection).\n *\n * @param {String} namespace\n * @param {Db} db\n * @api private\n */\n\nfunction Store(namespace, db) {\n  this.namespace = namespace;\n  this._db = db;\n}\nmodule.exports.Store = Store;\n\nfunction getConnection(db) {\n  if (db.Db) return Promise.resolve(db.Db); // reuse connection\n  if (typeof db.connectionString !== \"string\" || db.connectionString.length === 0) {\n    error(new Error(\"Cannot initialize store. A proper connection string was not specified.\"));\n    process.exit(1);\n  }\n  return new Promise(function(resolve, reject) {\n    try {\n      mongodb.MongoClient.connect(db.connectionString, db.connectionOptions, function (err, database) {\n        if (!err) {\n          db.Db = database;\n          resolve(database);\n        }\n        else {\n          // log error\n          error(new Error(\"Cannot open store: \" + err));\n          // hide sensitive database connection error details\n          reject(\"Database connection error\");\n        }\n      });\n    } catch(e){\n      error(e);\n      reject(\"Database connection error\");\n    }\n  });\n}\n\nfunction collection(store, fn) {\n  var db = store._db;\n\n  return getConnection(db).then(function (mdb) {\n    return new Promise(function(resolve, reject) {\n      mdb.collection(store.namespace, function (err, collection) {\n        if(err || !collection) {\n          error(err || new Error('Unable to get ' + store.namespace + ' collection'));\n          process.exit(1);\n        }\n\n        if (fn) fn(null, collection);\n        resolve(collection);\n      });\n    });\n  }).catch(function (err) {\n    if (fn) fn(err);\n    throw err;\n  });\n}\n\n/**\n * Returns a promise, or calls fn with the mongo collection served by this store\n * @param  {Function} fn   a callback that will receive the mongo collection as the second parameter\n * @return {Promise}       returns a promise with the mongo collection\n */\nStore.prototype.getCollection = function(fn){\n  return collection(this, fn);\n};\n\n/**\n * Change public IDs to private IDs.\n *\n * IDs are generated with a psuedo random number generator.\n * 24 hexidecimal chars, ~2 trillion combinations.\n *\n * @param {Object} object\n * @return {Object}\n * @api private\n */\n\nStore.prototype.identify = function (object) {\n  if(!object) return;\n  if(typeof object != 'object') throw new Error('identify requires an object');\n  var store = this;\n  function set(object) {\n    if(object._id) {\n      object.id = object._id;\n      delete object._id;\n    } else {\n      var u = object.id || store.createUniqueIdentifier();\n      object._id = u;\n      delete object.id;\n    }\n  }\n  if(Array.isArray(object)) {\n    object.forEach(set);\n  } else {\n    set(object);\n  }\n  return object;\n};\n\n\n/**\n * Change query IDs to private IDs.\n *\n * @param {Object} object\n * @return {Object}\n * @api private\n */\n\nStore.prototype.scrubQuery = function (query) {\n  // private mongo ids can be anywhere in a query object\n  // walk the object recursively replacing id with _id\n  // NOTE: if you are implementing your own Store,\n  // you probably wont need to do this if you want to store ids\n  // as 'id'\n\n  if(query.id && typeof query.id === 'object') {\n    query._id = query.id;\n    delete query.id;\n  }\n\n  try {\n    scrub(query, function (obj, key, parent, type) {\n      // find any value using _id\n      if(key === 'id' && parent.id) {\n        parent._id = parent.id;\n        delete parent.id;\n      }\n    });\n  } catch(ex) {\n    debug(ex);\n  }\n\n};\n\n/**\n * Create a unique identifier. Override this in derrived stores\n * to change the way IDs are generated.\n *\n * @return {String}\n */\n\nStore.prototype.createUniqueIdentifier = function() {\n  return uuid.create();\n};\n\n/**\n * Insert an object into the store.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .insert({foo: 'bar'}, fn)\n *\n * @param {Object|Array} object\n * @param {Function} callback(err, obj)\n */\n\nStore.prototype.insert = function (object, fn) {\n  if (Array.isArray(object) && object.length === 0) {\n    // mongodb client combatibility, empty arrays not allowed any more\n    fn(null, null);\n    return;\n  }\n\n  var store = this;\n  this.identify(object);\n  collection(this, function (err, col) {\n    if (err) {\n      fn(err);\n      return;\n    }\n    col.insert(object, function (err, result) {\n      if (err) {\n        fn(err);\n        return;\n      }\n      result = result.ops;\n      if(Array.isArray(result) && !Array.isArray(object)) {\n        result = result[0];\n      }\n      fn(err, store.identify(result));\n    });\n  });\n};\n\n\n/**\n * Find the number of objects in the store that match the given query.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .count({foo: 'bar'}, fn)\n *\n * @param {Object} query\n * @param {Function} callback(err, num)\n */\n\nStore.prototype.count = function(query, fn) {\n  \n  if (typeof query == 'function') {\n    fn = query;\n    query = {};\n  } else {\n    query && this.scrubQuery(query);\n  }\n\n  var fields = stripFields(query)\n    , options = stripOptions(query);\n\n  collection(this, function (err, col) {\n    if (err) return fn(err);\n    col.find(query, fields, options).count(function(err, count) {\n      if (err) return fn(err);\n      fn(null, count);\n    });\n  });\n};\n\n/**\n * Find all objects in the store that match the given query.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .find({foo: 'bar'}, fn)\n *\n * @param {Object} query\n * @param {Function} callback(err, obj)\n */\n\nStore.prototype.find = function (query, fn) {\n  var store = this;\n  if(typeof query == 'function') {\n    fn = query;\n    query = {};\n  } else {\n    query && this.scrubQuery(query);\n  }\n\n  // fields\n  var fields = stripFields(query)\n    , options = stripOptions(query);\n\n  if (!_.isObject(fields)) fields = undefined;\n\n  collection(this, function (err, col) {\n    if (err) {\n      fn(err);\n      return;\n    }\n    if(typeof query._id === 'string') {\n      if(fields) {\n        col.findOne(query, fields, options, function (err, obj) {\n          if (err) {\n            fn(err);\n            return;\n          }\n          store.identify(query);\n          fn(err, store.identify(obj));\n        });\n      } else {\n        col.findOne(query, options, function (err, obj) {\n          if (err) {\n            fn(err);\n            return;\n          }\n          store.identify(query);\n          fn(err, store.identify(obj));\n        });\n      }\n    } else {\n      if(fields) {\n        col.find(query,  fields, options).toArray(function (err, arr) {\n          if (err) {\n            fn(err);\n            return;\n          }\n          fn(err, store.identify(arr));\n        });\n      } else {\n        col.find(query, options).toArray(function (err, arr) {\n          if (err) {\n            fn(err);\n            return;\n          }\n          fn(err, store.identify(arr));\n        });\n      }\n\n    }\n\n  });\n};\n\n/**\n * Find the first object in the store that match the given query.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .first({foo: 'bar'}, fn)\n *\n * @param {Object} query\n * @param {Function} callback(err, obj)\n */\n\nStore.prototype.first = function (query, fn) {\n  query && this.scrubQuery(query);\n\n  var store = this\n    , fields = stripFields(query);\n\n  collection(this, function (err, col) {\n    if (err) {\n      fn(err);\n      return;\n    }\n    if(fields) {\n      col.findOne(query, fields, function (err, result) {\n        if (err) {\n          fn(err);\n          return;\n        }\n        fn(err, store.identify(result));\n      });\n    } else {\n      col.findOne(query, function (err, result) {\n        if (err) {\n          fn(err);\n          return;\n        }\n        fn(err, store.identify(result));\n      });\n    }\n  });\n};\n\n/**\n * Update an object or objects in the store that match the given query.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .update({id: '<an object id>'}, fn)\n *\n * @param {Object} query\n * @param {Object} object\n * @param {Function} callback(err, obj)\n */\n\nStore.prototype.update = function (query, object, fn) {\n  var store = this\n    , multi = false\n    , command = {};\n\n  if(typeof query == 'string') query = {id: query};\n  if(typeof query != 'object') throw new Error('update requires a query object or string id');\n  if(query.id) {\n    store.identify(query);\n  }  else {\n    multi = true;\n  }\n\n  stripFields(query);\n\n  //Move $ queries outside of the $set command\n  Object.keys(object).forEach(function(k) {\n    if (k.indexOf('$') === 0) {\n      command[k] = object[k];\n      delete object[k];\n    }\n  });\n\n  if(Object.keys(object).length) {\n    command.$set = object;\n  }\n\n  multi = query._id ? false : true;\n\n  debug('update - query', query);\n  debug('update - object', object);\n  debug('update - command', command);\n\n  collection(this, function (err, col) {\n    if (err) {\n      fn(err);\n      return;\n    }\n    col.update(query, command, { multi: multi }, function (err, r) {\n      if (err) {\n        fn(err);\n        return;\n      }\n      store.identify(query);\n      fn(err, r ? { count: r.result.n } : null);\n    }, multi);\n  });\n};\n\n/**\n * Remove an object or objects in the store that match the given query.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .remove({id: '<an object id>'}, fn)\n *\n * @param {Object} query\n * @param {Function} callback(err, obj)\n */\n\nStore.prototype.remove = function (query, fn) {\n  var store = this;\n  if(typeof query === 'string') query = {id: query};\n  if(typeof query == 'function') {\n    fn = query;\n    query = {};\n  }\n  if(query.id) {\n    store.identify(query);\n  }\n  collection(this, function (err, col) {\n    if (err) {\n      fn(err);\n      return;\n    }\n    col.remove(query, function (error, r) { fn(error, r ? { count: r.result.n } : null); });\n  });\n};\n\n/**\n * Rename the store.\n *\n * Example:\n *\n *     db\n *       .connect({host: 'localhost', port: 27015, name: 'test'})\n *       .createStore('testing-store')\n *       .rename('renamed-store', fn)\n *\n * @param {String} namespace\n * @param {Function} callback(err, obj)\n */\n\nStore.prototype.rename = function (namespace, fn) {\n  var store = this;\n  collection(this, function (err, col) {\n    if (err) {\n      fn(err);\n      return;\n    }\n    store.namespace = namespace;\n    col.rename(namespace, fn);\n  });\n};\n\nfunction stripFields(query) {\n  if(!query) return;\n  var fields = query.$fields;\n  if(fields) delete query.$fields;\n  return fields;\n}\n\nfunction stripOptions(query) {\n  var options = {};\n  if(!query) return options;\n  // performance\n  if(query.$limit) options.limit = parseInt(query.$limit);\n  if(query.$skip) options.skip = parseInt(query.$skip);\n  if(query.$sort || query.$orderby) options.sort = query.$sort || query.$orderby;\n  delete query.$limit;\n  delete query.$skip;\n  delete query.$sort;\n  return options;\n}\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/util/uuid.js":"var crypto = require('crypto');\n\n// Modified RFC 4122 v4 UUID\nexports.create = function (length) {\n  length = length || 16;\n  var hexDigits = \"0123456789abcdef\";\n  var s = crypto.randomBytes(length).toString('hex').split(''); // convert string to array\n  s.length = length; // trim to length if bigger\n    \n  s[length - 3] = hexDigits.substr((s[length - 3] & 0x3) | 0x8, 1);\n\n  // return the uuid\n  return s.join('');\n};","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/keys.js":"var fs = require('fs')\n  , crypto = require('crypto');\n\n/*!\n * A collection of keys backed by a file.\n */\n\nfunction Keys(path) {\n  this.path = path || '.dpd/keys.json';\n}\nmodule.exports = Keys;\n\n/*!\n * Get a key from the given keys file.\n */\n\nKeys.prototype.get = function(key, fn) {\n  this.readFile(function(err, data) {\n    fn(err, data[key]);\n  });\n};\n\n/*!\n * Generate a key using cryptographically strong pseudo-random data.\n */\n\nKeys.prototype.generate = function() {\n  return crypto.randomBytes(256).toString('hex');\n};\n\n/*!\n * Create a new key and save it in the keys file.\n */\n\nKeys.prototype.create = function(fn) {\n  var key = this.generate()\n    , keys = this;\n\n  this.readFile(function(err, data) {\n    if(err) return fn(err);\n\n    data[key] = true;\n    keys.writeFile(data, function(err) {\n      fn(err, key);\n    });\n  });\n};\n\n/*!\n * Read the contents of the key file as JSON\n */\n\nKeys.prototype.readFile = function(fn) {\n  fs.readFile(this.path, 'utf-8', function(err, data) {\n    var jsonData\n      , error;\n\n    try {\n      jsonData = (data && JSON.parse(data)) || {};\n    } catch (ex) {\n      error = ex;\n    }\n\n    fn(error, jsonData);\n  });\n};\n\n\n/*!\n * Write the contents of the key file as JSON\n */\n\nKeys.prototype.writeFile = function(data, fn) {\n  var str;\n\n  try {\n    str = JSON.stringify(data);\n  } catch(e) {\n    return fn(e);\n  }\n\n  fs.writeFile(this.path, str, fn);\n};\n\n/*\n * Get the first local key\n */\n\n\nKeys.prototype.getLocal = function(fn) {\n  this.readFile(function(err, data) {\n    if(err) return fn(err);\n    if(data && typeof data == 'object') {\n      fn(null, Object.keys(data)[0]);\n    } else {\n      fn();\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/session.js":"var Store = require('./db').Store\n, util = require('util')\n, Cookies = require('cookies')\n, EventEmitter = require('events').EventEmitter\n, crypto = require('crypto')\n, debug = require('debug')('session')\n, _ = require(\"underscore\")\n, async = require(\"async\");\n\nrequire(\"debug\").enable(\"session:error\");\nvar error = require('debug')('session:error');\n\n/*!\n* A simple index for storing sesssions in memory.\n*/\n\nvar sessionIndex = {}\n  , userSessionIndex = {};\n\n/**\n* A store for persisting sessions inbetween connection / disconnection.\n* Automatically creates session IDs on inserted objects.\n*/\n\nfunction SessionStore(namespace, db, sockets, options) {\n  var self = this;\n\n  // unique id for this store in order to identify in a cluster\n  this.id = this.createUniqueIdentifier();\n\n  this.sockets = sockets;\n  this.options = options || {};\n  // sessions inactive for longer than this will be cleaned up:\n  this.options.maxAge = this.options.maxAge || 30 * 24 * 60 * 60 * 1000;\n\n  if (this.options.pubClient && this.options.subClient) {\n    debug('using pub/sub mode');\n    this.pubClient = this.options.pubClient;\n    this.subClient = this.options.subClient;\n  }\n\n  // socket queue\n  var socketQueue = this.socketQueue = new EventEmitter()\n    , socketIndex = this.socketIndex = {};\n\n  if (sockets) {\n    if (this.subClient) {\n      // subscribe to messages regarding sessions joining/leaving rooms\n      // need to resync\n      this.subClient.subscribe('dpd#session#refreshrooms');\n      this.subClient.subscribe('dpd#session#remove');\n      this.subClient.on('message', function(channel, message) {\n        var data;\n        switch (channel) {\n          case 'dpd#session#refreshrooms': // another node changed rooms for a session\n            data = JSON.parse(message);\n            if (data.id !== self.id && data.sid && socketIndex[data.sid]) {\n              // if we know about this session, refresh the rooms\n              self.refreshSessionRooms(data.sid);\n            }\n\n            break;\n          case 'dpd#session#remove': // another node removed a session\n            data = JSON.parse(message);\n            if (data.id !== self.id && data.sid && sessionIndex[data.sid]) {\n              // if we know about this session, remove it from memory\n              sessionIndex[data.sid]._leaveAllRooms();\n              self.removeSessionFromMemory(data.sid);\n            }\n\n            break;\n        }\n      });\n    }\n\n    sockets.on('connection', function(client) {\n      // NOTE: do not use set here ever, the `Cookies` api is meant to get a req, res\n      // but we are just using it for a cookie parser\n      var cookies = new Cookies(client.handshake)\n        , sid = cookies.get('sid');\n\n      var getSession = function(sid, fn) {\n        // check if we already know about the session\n        var session = sessionIndex[sid];\n        if (session) { return fn(null, session); }\n        // get the session from the store otherwise\n        self.createSession(sid, function(err, session) {\n          if (session.data.id === sid) return fn(null, session);\n          return fn();\n        });\n      };\n\n      var indexSocket = function(sid, client, session) {\n        // index sockets against their session id\n        socketIndex[sid] = socketIndex[sid] || {};\n        socketIndex[sid][client.id] = client;\n        socketQueue.emit('socket', client, session);\n\n        // make sure the list of rooms to join is fresh\n        self.refreshSessionRooms(sid);\n      };\n\n      if (sid) {\n        getSession(sid, function(err, session) {\n          if (session) {\n            indexSocket(sid, client, session);\n          }\n        });\n      }\n\n      // Alternative way of binding session to socket connection\n      // for when the sid cookie is not yet available.\n      // This expects that the client emits an event with the sid.\n      function setSession(data) {\n        if (!data || !data.sid || typeof data.sid !== 'string') { return; }\n        var sid = data.sid;\n\n        getSession(sid, function(err, session) {\n          if (session) {\n            // unassign socket from previous sessions\n            _.each(socketIndex, function(val) {\n              delete val[client.id];\n            });\n\n            indexSocket(sid, client, session);\n          }\n        });\n      }\n\n      client.on('server:setSession', setSession);\n      client.on('server:setsession', setSession); // allow lowercase\n\n      client.on('disconnect', function() {\n        // unassign socket from previous sessions\n        _.each(socketIndex, function(val, sid) {\n          delete val[client.id];\n        });\n      });\n    });\n\n    var drainQueue = function drainQueue(method, rawSocket, session) {\n      var key = '_' + method;\n      if (session.socket._bindQueue && session.socket._bindQueue[key] && session.socket._bindQueue[key].length) {\n        session.socket._bindQueue[key].forEach(function(args) {\n          rawSocket[method].apply(rawSocket, args);\n        });\n      }\n    };\n\n    // resolve queue once a socket is ready\n    socketQueue.on('socket', function(socket, session) {\n      drainQueue('on', socket, session);\n      drainQueue('emit', socket, session);\n      drainQueue('join', socket, session);\n      drainQueue('leave', socket, session);\n    });\n  }\n\n  Store.apply(this, arguments);\n\n  if (db) {\n    // Cleanup inactive sessions from the db\n    var store = this;\n    process.nextTick(function() {\n      store.cleanupInactiveSessions();\n    });\n  }\n}\nutil.inherits(SessionStore, Store);\nexports.SessionStore = SessionStore;\n\nSessionStore.prototype.cleanupInactiveSessions = function() {\n  var store = this;\n  var inactiveSessions = [];\n\n  _.each(sessionIndex, function(session, sid) {\n    var timeago = Date.now() - 60 * 1000; // 1 minute\n    if (session.data.lastActive < timeago && _.isEmpty(store.socketIndex[sid])) {\n      inactiveSessions.push(sid);\n    }\n  });\n\n  _.each(inactiveSessions, function(sid) {\n    store.socketIndex[sid] = null;\n    sessionIndex[sid] = null;\n    delete sessionIndex[sid];\n    delete store.socketIndex[sid];\n\n    var inactiveUsers = [];\n    _.each(userSessionIndex, function(sessions, uid) {\n      delete sessions[sid];\n      if (_.isEmpty(sessions)) {\n        inactiveUsers.push(uid);\n      }\n    });\n\n    _.each(inactiveUsers, function(uid) {\n      delete userSessionIndex[uid];\n    });\n  });\n\n  this.remove({\n    $or: [\n      { lastActive: { $lt: Date.now() - this.options.maxAge } },\n      { lastActive: { $exists: false } }\n    ]\n  }, function(err, updated) {\n    if (err) {\n      error(\"Error removing old sessions: \" + err);\n    }\n  });\n  this.cleanupInactiveSessions.lastRun = Date.now();\n};\n\nSessionStore.prototype.createUniqueIdentifier = function() {\n  return crypto.randomBytes(64).toString('hex');\n};\n\nSessionStore.prototype.publish = function(channel, data) {\n  var store = this;\n  if (store.pubClient) {\n    store.pubClient.publish(channel, JSON.stringify(data));\n  }\n};\n\n\n/**\n* Create a new `Session` based on an optional `sid` (session id).\n*\n* @param {String} sid\n* @param {Function} callback(err, session)\n*/\n\nSessionStore.prototype.createSession = function(sid, fn) {\n  var socketIndex = this.socketIndex\n    , store = this;\n\n  if (typeof sid == 'function') {\n    fn = sid;\n    sid = undefined;\n  }\n\n  if (sid) {\n    this.find({ id: sid }, function(err, s) {\n      if (err) return fn(err);\n      if (!s || s.lastActive < Date.now() - store.options.maxAge) {\n        s = { anonymous: true };\n        sid = null;\n      }\n      var sess = sessionIndex[sid] || new Session(s, store, socketIndex, store.sockets);\n      if (sid) sessionIndex[sid] = sess;\n      // index sessions by user\n      if (s && s.uid) {\n        userSessionIndex[s.uid] = userSessionIndex[s.uid] || {};\n        userSessionIndex[s.uid][sess.data.id] = sess;\n      }\n      if (!sess.data.anonymous && (!sess.data.lastActive || sess.data.lastActive < Date.now() - 10 * 1000)) {\n        // update last active date at max once every 10 seconds\n        sess.data.lastActive = Date.now();\n        sess.save(function() {\n          fn(null, sess);\n        });\n      } else {\n        fn(null, sess);\n      }\n    });\n  } else {\n    fn(null, new Session({ anonymous: true }, this, socketIndex, store.sockets));\n  }\n\n  // clean up inactive sessions once per minute\n  if (store.cleanupInactiveSessions.lastRun < Date.now() - 60 * 1000) {\n    process.nextTick(function() {\n      store.cleanupInactiveSessions();\n    });\n  }\n};\n\n\nSessionStore.prototype.refreshSessionRooms = function(sid, fn) {\n  var self = this;\n  fn = fn || function() {};\n  if (!self.socketIndex[sid]) return fn(null, false);\n\n  // reload session\n  self.createSession(sid, function(err, session) {\n    if (err) return fn(err);\n    if (!err && session.data && session.data.id === sid && session.data._rooms) {\n      // make sure each room is joined\n      session._leaveAllRooms(session.data._rooms, function() {\n        _.each(self.socketIndex[sid], function(socket) {\n          session.data._rooms.forEach(function(room) {\n            socket.join(room);\n          });\n        });\n      });\n\n      fn(null, true);\n    } else {\n      fn(null, false);\n    }\n  });\n};\n\n/**\n* Get the already created session\n*/\nSessionStore.prototype.getSession = function(uid, sid) {\n  return userSessionIndex[uid][sid] || null;\n};\n\nSessionStore.prototype.removeSessionFromMemory = function(sid) {\n  delete sessionIndex[sid];\n  _.each(userSessionIndex, function(sessions) {\n    delete sessions[sid];\n  });\n\n  delete this.socketIndex[sid];\n};\n\n/**\n* An in memory representation of a client or user connection that can be saved to disk.\n* Data will be passed around via a `Context` to resources.\n*\n* Example:\n*\n*    var session = new Session({id: 'my-sid', new SessionStore('sessions', db)});\n*\n*    session.set({uid: 'my-uid'}).save();\n*\n* @param {Object} data\n* @param {Store} store\n* @param {Socket} socket\n*/\n\nfunction Session(data, store, sockets, rawSockets) {\n  var sid;\n  this.data = _.clone(data);\n  if (!this.data.createdOn) this.data.createdOn = Date.now();\n  if (!this.data.lastActive) this.data.lastActive = Date.now();\n  if (data && data.id) this.sid = sid = data.id;\n  this.store = store;\n  var self = this;\n\n  function bindFauxSocket(method, queue) {\n    return function() {\n      var myArgs = arguments;\n      if (sockets[self.sid]) {\n        // clear all queue arrays once socket is available, since they will no longer be needed\n        _.each(queue, function(val) {\n          val.length = 0;\n        });\n\n        _.each(sockets[self.sid], function(s) {\n          s[method].apply(s, myArgs);\n        });\n      } else {\n        // otherwise add to bind queue\n        var key = '_' + method;\n        queue[key] = queue[key] || [];\n        queue[key].push(myArgs);\n      }\n    };\n  }\n\n  // create faux socket, to queue any events until\n  // a real socket is available\n\n  this.socket = {\n    _bindQueue: []\n  };\n\n  this.socket.on = bindFauxSocket('on', this.socket._bindQueue);\n  this.socket.emit = bindFauxSocket('emit', this.socket._bindQueue);\n  this.socket.join = bindFauxSocket('join', this.socket._bindQueue);\n  this.socket.leave = bindFauxSocket('leave', this.socket._bindQueue);\n\n  if (data && data.uid) this.setUid(data.uid);\n\n  this.emitToUsers = function(collection, query, event, data) {\n    collection.get(query, function(users) {\n      if (users && users.id) {\n        users = [users]; // convert single item to array\n      }\n\n      users.forEach(function(u) {\n        rawSockets.to(self.getUserChannel(u.id)).emit(event, data);\n      });\n    });\n  };\n\n  this.emitToAll = function() {\n    rawSockets.emit.apply(rawSockets, arguments);\n  };\n\n  this.emitToRoom = function(room, event, data) {\n    rawSockets.to(room).emit(event, data);\n  };\n\n  function saveRooms() {\n    self.save(function(err, data) {\n      if (!err) {\n        // publish to other nodes that we need to refresh rooms for this session\n        store.publish('dpd#session#refreshrooms', { id: self.id, sid: self.sid });\n      }\n    });\n  }\n\n  // join a room and store it in the session so when\n  // this session reconnects, the room is automatically rejoined\n  this.joinRoom = this.joinRooms = function(rooms) {\n    var currentRooms = (self.data._rooms = self.data._rooms || []);\n    if (typeof rooms === 'string') rooms = [rooms];\n    _.each(rooms, function(room) {\n      if (currentRooms.indexOf(room) === -1) currentRooms.push(room);\n      self.socket.join(room);\n    });\n\n    saveRooms();\n  };\n\n  this.leaveRoom = this.leaveRooms = function(rooms) {\n    var currentRooms = (self.data._rooms = self.data._rooms || []);\n    if (typeof rooms === 'string') rooms = [rooms];\n    _.each(rooms, function(room) {\n      var index = currentRooms.indexOf(room);\n      if (index !== -1) currentRooms.splice(index, 1);\n      self.socket.leave(room);\n    });\n\n    saveRooms();\n  };\n\n  this._leaveAllRooms = function(except, fn) {\n    if (typeof except === 'function') {\n      fn = except;\n      except = [];\n    }\n\n    var userChannel = self.getUserChannel();\n\n    async.forEachOf(self.store.socketIndex[self.sid], function(socket, id, outer) {\n      async.each(_.difference(_.without(socket.rooms, socket.id, userChannel), except), function(room, inner) {\n        socket.leave(room, inner);\n      }, outer);\n    }, fn);\n  };\n\n  this.leaveAllRooms = function() {\n    self._leaveAllRooms();\n    self.data._rooms = [];\n    saveRooms();\n  };\n}\n\n\n/**\n* Set properties on the in memory representation of a session.\n*\n* @param {Object} changes\n* @return {Session} this for chaining\n*/\n\nSession.prototype.set = function(object) {\n  var session = this\n    , data = session.data || (session.data = {});\n\n  Object.keys(object).forEach(function(key) {\n    data[key] = object[key];\n  });\n\n  if (object && object.uid) {\n    session.setUid(object.uid);\n  }\n\n  return this;\n};\n\nSession.prototype.getUserChannel = function(uid) {\n  if (uid || this.data.uid) {\n    return 'dpd_uid:' + (uid || this.data.uid);\n  }\n};\n\n/**\n* Set the user id for this session.\n*\n* @param {String} uid\n* @return {Session} this for chaining\n*/\n\nSession.prototype.setUid = function(uid) {\n  var session = this;\n  if (session.data.uid != uid) {\n    // remove from previous room\n    session.socket.leave(session.getUserChannel(session.data.uid));\n  }\n\n  if (uid) {\n    session.data.uid = uid;\n    session.socket.join(session.getUserChannel(uid));\n  }\n\n  return this;\n};\n\n/**\n* Save the in memory representation of a session to its store.\n*\n* @param {Function} callback(err, data)\n* @return {Session} this for chaining\n*/\n\nSession.prototype.save = function(fn) {\n  var session = this\n    , data = _.clone(this.data)\n    , anonymous = false\n    , sid = null;\n\n  fn = fn || function() { };\n\n  if (data.anonymous) {\n    delete data.anonymous;\n    sid = data.id = this.store.createUniqueIdentifier();\n    anonymous = true;\n  } else {\n    sid = data.id;\n  }\n\n  if (typeof data.id !== \"string\"){\n    return fn('Invalid id');\n  }\n\n  // If anonymous, create a new session.\n  if (anonymous) {\n    session.store.insert(data, function(err, res) {\n      if (!err) {\n        session.data = res;\n        sessionIndex[sid] = session;\n\n        if (res.uid) {\n          userSessionIndex[res.uid] = userSessionIndex[res.uid] || {};\n          userSessionIndex[res.uid][session.data.id] = session;\n        }\n        session.sid = res.id;\n      }\n      fn(err, res);\n    });\n  }\n  // If already authenticated and we have sid, update session.\n  else if (sid) {\n    delete data.id;\n    session.store.update({id: sid}, data, function(err) {\n      if (!err) {\n        data.id = sid;\n        session.data = data;\n        sessionIndex[sid] = session;\n\n        if (data.uid) {\n          userSessionIndex[data.uid] = userSessionIndex[data.uid] || {};\n          userSessionIndex[data.uid][session.data.id] = session;\n        }\n        session.sid = data.id;\n      }\n      fn(err, data);\n    });\n  }\n\n  return this;\n};\n\n/**\n* Reset the session using the data in its store.\n*\n* @param {Function} callback(err, data)\n* @return {Session} this for chaining\n*/\n\nSession.prototype.fetch = function(fn) {\n  var session = this;\n  this.store.first({id: this.data.id}, function(err, data) {\n    session.set(data);\n    fn(err, data);\n  });\n  return this;\n};\n\n/**\n* Returns true if this is an anonymous (non-authenticated) session.\n*/\n\nSession.prototype.isAnonymous = function() {\n  return this.data.anonymous;\n};\n\n/**\n* Remove the session.\n*\n* @param {Function} callback(err, data)\n* @return {Session} this for chaining\n*/\n\nSession.prototype.remove = function(data, fn) {\n  if (typeof data === \"function\") {\n    fn = data;\n    data = this.data;\n  }\n  if (!data.id || typeof data.id !== \"string\") {\n    return fn(); // nothing to remove\n  }\n  var session = this;\n  debug('Removing %s', data.id);\n\n  delete sessionIndex[data.id];\n  if (userSessionIndex && userSessionIndex[data.uid] && userSessionIndex[data.uid][data.id]) {\n    delete userSessionIndex[data.uid][data.id];\n  }\n  session.leaveAllRooms();\n  if (session.store.socketIndex[data.id]) {\n    delete session.store.socketIndex[data.id];\n  }\n\n  this.store.remove({id: data.id}, fn);\n\n  if (session.sid) {\n    session.store.publish('dpd#session#remove', { id: session.store.id, sid: data.id });\n  }\n\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/util/http.js":"var Cookies = require('cookies')\n  , qs = require('qs')\n  , parseUrl = require('url').parse\n  , corser = require('corser')\n  , ALLOWED_METHODS = ['GET', 'POST', 'PUT', 'DELETE'];\n\n/*!\n * A utility for setting up a request and response.\n */\n\nexports.setup = function(options, req, res, next) {\n  var remoteHost = req.headers.origin\n    , corsOpts = {supportsCredentials: true, methods: ALLOWED_METHODS, maxAge: 300};\n\n  if(remoteHost) {\n    corsOpts.origins = options.origins;\n  } else {\n    corsOpts.supportsCredentials = false;\n  }\n  corsOpts.responseHeaders = corser.simpleResponseHeaders.concat([\"X-Session-Token\", \"X-Session-Invalidated\"]).concat(options.allowedResponseHeaders || []);\n  corsOpts.requestHeaders = corser.simpleRequestHeaders.concat([\"X-Requested-With\", \"Authorization\"]).concat(options.allowedRequestHeaders || []);\n  if (options.allowCorsRootRequests) {\n    corsOpts.requestHeaders.push(\"dpd-ssh-key\");\n  }\n\n  var handler = corser.create(corsOpts);\n\n  handler(req, res, function () {\n    req.cookies = res.cookies = new Cookies(req, res);\n\n    if(~req.url.indexOf('?')) {\n      try {\n        req.query = parseQuery(req.url);\n        var m = req.query._method;\n        if ( m ) {\n            req.originalMethod = req.method;\n            req.method = m.toUpperCase();\n            delete req.query._method;\n        }\n      } catch (ex) {\n        res.setHeader('Content-Type', 'text/plain');\n        res.statusCode = 400;\n        res.end('Failed to parse querystring: ' + ex);\n        return;\n      }\n    }\n\n    switch(req.method) {\n      case 'OPTIONS':\n        // End CORS preflight request.\n        res.writeHead(204);\n        res.end();\n      break;\n      case 'POST':\n      case 'PUT':\n      case 'DELETE':\n        var mime = req.headers['content-type'] || 'application/json';\n        mime = mime.split(';')[0]; //Just in case there's multiple mime types, pick the first\n\n        if(autoParse[mime]) {\n          autoParse[mime](req, res, mime, next);\n        } else if(typeof options.mimeParser === 'function') {\n          options.mimeParser(req, res, mime, next);\n        } else {\n          if(req.headers['content-length']) req.pause();\n          next();\n        }\n      break;\n      default:\n        next();\n      break;\n    }\n  });\n};\n\n\n/*!\n * Gets the body the request by either reading a stream or by loading req.rawBody\n * For compatibility with middlewares that read the stream, create compatibility\n * middleware that writes to req.rawBody or override this method\n * @param {ServerRequest} req\n * @param {Function} callback (body)\n */\nexports.getBody = function(req, callback){\n  if(req.rawBody) {\n    return callback(req.rawBody);\n  }\n\n  var buf = '';\n\n  req.on('data', function(chunk){ buf += chunk; });\n\n  req.on('end', function(){\n    return callback(buf);\n  });\n};\n\n/*!\n * Attempts to parse the request. Currently supports the following formats:\n *\n * - application/json\n * - application/x-www-form-urlencoded (all values are strings)\n *\n * @param {ServerRequest} req\n * @param {String} mime\n * @param {Function} callback (err)\n */\n\nvar parseBody = exports.parseBody = function(req, res, mime, callback) {\n  exports.getBody(req, function(buf){\n\n    var parser = JSON;\n\n    if (mime === 'application/x-www-form-urlencoded') {\n      parser = qs;\n    }\n\n    try {\n      if(buf.length) {\n        if(mime === 'application/json' && '{' != buf[0] && '[' != buf[0]) {\n          res.setHeader('Content-Type', 'text/plain');\n          res.statusCode = 400;\n          res.end('Could not parse invalid JSON');\n          return;\n        }\n\n        req.body = parser.parse(buf);\n        var m = req.body._method;\n        if ( m ) {\n          req.originalMethod = req.method;\n          req.method = m.toUpperCase();\n          delete req.body._method;\n        }\n      } else {\n        req.body = {};\n      }\n      callback();\n    } catch (ex) {\n      res.setHeader('Content-Type', 'text/plain');\n      res.statusCode = 400;\n      res.end('Failed to parse body as ' + mime);\n    }\n  });\n};\n\n\nvar parseQuery = exports.parseQuery = function(url) {\n  var q = url.substr(url.indexOf('?') + 1);\n\n  if(q) q = decodeURIComponent(q);\n\n  if(q[0] === '{' && q[q.length - 1] === '}') {\n    return JSON.parse(q);\n  } else {\n    var parsedQuery = qs.parse(parseUrl(url).query);\n    if (parsedQuery._jsonquery) {\n      return JSON.parse(parsedQuery._jsonquery);\n    }\n\n    return parseNumbersInObject(parsedQuery);\n  }\n};\n\n\n/*!\n * Redirects to the given url.\n */\n\nexports.redirect = function(res, url, statusCode) {\n  res.statusCode = statusCode || 301;\n  res.setHeader(\"Location\", url);\n  res.end();\n};\n\n\nvar autoParse = {\n  'application/x-www-form-urlencoded': parseBody,\n  'application/json': parseBody\n};\n\n/*\n * Number parsing that fails in qs\n */\n\nvar isInt = /^[0-9]+$/;\nvar isFloat = /^[-+]?[0-9]*\\.?[0-9]+$/;\nvar parseNumbersInObject = function( obj ){\n  var ret = {}, key;\n  for(key in obj){\n    var val = obj[key];\n    if(isInt.test(val)){\n      ret[key] = parseInt(val);\n    } else if(isFloat.test(val)){\n      ret[key] = parseFloat(val);\n    } else if (typeof val === 'object'){\n      ret[key] = parseNumbersInObject(val);\n    } else {\n      ret[key] = val;\n    }\n  }\n  return ret;\n};\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/config-loader.js":"var fs = require('fs')\n  , path = require('path')\n  , _loadTypes = require('./type-loader')\n  , InternalResources = require('./resources/internal-resources')\n  , Files = require('./resources/files')\n  , ClientLib = require('./resources/client-lib')\n  , Dashboard = require('./resources/dashboard')\n  , debug = require('debug')('config-loader')\n  , async = require('async')\n  , Promise = require('bluebird');\n\n/*!\n * Loads resources from a project folder\n * Callback receives two arguments `(err, resources)`.\n *\n * @param {String} basepath\n * @param {Function} callback\n */\nmodule.exports.loadConfig = function(basepath, server, fn) {\n  var resources = server.__resourceCache || [];\n\n  if (resources.length) {\n    debug(\"Loading from cache\");\n    fn(null, resources);\n    return;\n  }\n\n  var getTypes = async.memoize(loadTypes);\n\n  async.waterfall([\n      async.apply(loadResourceDir, basepath)\n    , async.apply(loadResources, getTypes, basepath, server)\n    , async.apply(addInternalResources, server, basepath)\n  ], function(err, result) {\n    if (server.options && server.options.env !== 'development') {\n      server.__resourceCache = result;\n    }\n    fn(err, result);\n  });\n};\n\nfunction loadTypes(fn) {\n  _loadTypes(function(defaults, types) {\n    Object.keys(types).forEach(function(key) {\n      defaults[key] = types[key];\n    });\n    types = defaults;\n    fn(null, types);\n  });\n}\n\nfunction loadResourceDir(basepath, fn) {\n  var dir = path.join(basepath, 'resources');\n  async.waterfall([\n    function(fn) {\n      fs.readdir(dir, fn);\n    },\n    function(results, fn) {\n      async.filter(results, function(file, fn) {\n        fs.stat(path.join(dir, file), function(err, stat) {\n          fn(null, stat && stat.isDirectory());\n        });\n      }, function(err, results) {\n        fn(err, results);\n      });\n    }\n  ], fn);\n}\n\nfunction loadResources(getTypes, basepath, server, files, fn) {\n  async.map(files, function(resourceName, fn) {\n    var resourcePath = path.join(basepath, 'resources', resourceName);\n    var configPath = path.join(resourcePath, 'config.json');\n    async.auto({\n      types: function(fn) {\n        getTypes(fn);\n      },\n\n      configJsonFile: function(fn) {\n        debug(\"reading %s\", configPath);\n        fs.readFile(configPath, 'utf-8', fn);\n      },\n\n      configJson: ['configJsonFile', function(results, fn) {\n        try {\n          var settings = JSON.parse(results.configJsonFile);\n          fn(null, settings);\n        } catch (ex) {\n          fn(ex);\n        }\n      }],\n\n      instance: ['configJson', 'types', function(results, fn) {\n        debug(\"Loading resource: %s\", resourceName);\n        var config = results.configJson\n          , types = results.types\n\n          , type = config.type\n          , resource\n          , o;\n\n        o = {\n            config: config\n          , server: server\n          , db: server.db\n          , configPath: resourcePath\n        };\n\n        if (!types[type]) return fn(new Error(\"Cannot find type \\\"\" + type + \"\\\" for resource \" + resourceName));\n\n        process.nextTick(function() {\n          resource = new types[type](resourceName, o);\n          loadResourceExtras(resource, fn);\n        });\n      }]\n    }, function(err, results) {\n      if (err && err.code === 'ENOENT') {\n        err = new Error(\"Expected file: \" + path.relative(basepath, err.path));\n      } else if (err) {\n        err.message += ' - when initializing: ' + resourceName;\n        console.error(err.stack || err);\n        process.exit(1);\n      }\n\n      fn(err, results && results.instance);\n    });\n  }, fn);\n}\n\nfunction loadResourceExtras(resource, fn) {\n  async.series([\n    function(fn) {\n      if (resource.load) {\n        resource.load(fn);\n      } else {\n        fn();\n      }\n    }\n  ], function(err) {\n    fn(err, resource);\n  });\n}\n\nfunction addInternalResources(server, basepath, resources, fn) {\n  var publicFolderPromise = new Promise(function(resolve, reject) {\n    var defaultFolder = './public';\n    if (server.options) {\n      defaultFolder = server.options.public_dir || defaultFolder;\n      var altPublic = defaultFolder + '-' + server.options.env;\n\n      fs.exists(altPublic, function(exists) {\n        if (exists) {\n          resolve(altPublic);\n        } else {\n          resolve(defaultFolder);\n        }\n      });\n    } else {\n      resolve(defaultFolder);\n    }\n  });\n\n  publicFolderPromise.then(function(publicFolder) {\n    var internals = [\n      new Files('', { config: { 'public': publicFolder }, server: server }),\n      new InternalResources('__resources', {config: {configPath: basepath}, server: server})\n    ];\n    if( typeof server.options === 'undefined'){\n      debug('server.options is undefined. Will add (show) dpd.js and dashboard in internals array');\n      internals.push( new ClientLib('dpd.js', { config: { resources: resources }, server: server}) );\n      internals.push( new Dashboard('dashboard', {server: server}) );\n    }else{\n      if ( typeof server.options.hide_dpdjs !== 'undefined' && server.options.hide_dpdjs === true ) {\n        //hide dpd.js and dashboard\n        debug('Will not add (show) dpd.js and dashboard in internals array');\n      }else if ( typeof server.options.hide_dashboard !== 'undefined' && server.options.hide_dashboard === true ){\n        //hide dashboard\n        debug('Will not add (show) dashboard in internals array');\n        internals.push( new ClientLib('dpd.js', { config: { resources: resources }, server: server}) );\n      }else{\n        //show everything\n        debug('Will add (show) dpd.js and dashboard in internals array');\n        internals.push( new ClientLib('dpd.js', { config: { resources: resources }, server: server}) );\n        internals.push( new Dashboard('dashboard', {server: server}) );\n      }\n    }\n\n    async.forEach(internals, loadResourceExtras, function(err) {\n      fn(err, resources.concat(internals));\n    });\n  });\n\n}\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/type-loader.js":"var fs = require('fs')\n  , debug = require('debug')('type-loader');\n\nmodule.exports = function loadTypes(basepath, fn) {\n  var types = {}\n    , defaults = {};\n\n  if(typeof basepath == 'function') {\n    fn = basepath;\n    basepath = undefined;\n  }\n\n  var path = basepath || '.'\n    , packageJsonPath = path + '/package.json'\n    , remaining = 0;\n\n  function loadCustomResources(file) {\n    remaining++;\n    process.nextTick(function () {\n      remaining--;\n      try {\n        var customResource = require(require('path').resolve(path) + '/node_modules/' + file);\n        debug('Loading', file);\n        if(customResource && customResource.prototype && customResource.prototype.__resource__) {\n          debug('is a resource ', customResource && customResource.name);\n          types[customResource.name] = customResource;\n        }\n      } catch(e) {\n        if (e && e.code !== 'MODULE_NOT_FOUND') {\n          console.error();\n          console.error(\"Error loading module node_modules/\" + file);\n          console.error(e.stack || e);\n          if(process.send) process.send({moduleError: e || true});\n          process.exit(1);\n        }\n      }\n\n      if(remaining === 0) {\n        fn(defaults, types);\n      }\n    });\n  }\n\n  // read default lib resources\n  fs.readdir(__dirname + '/resources', function(err, dir) {\n    dir.forEach(function(file) {\n      if(file.indexOf('.js') == file.length - 3 || file.indexOf('.') === -1) {\n        var customResource = require(__dirname + '/resources/' + file);\n        defaults[customResource.name] = customResource;\n      }\n    });\n\n    if (fs.existsSync(packageJsonPath)) {\n      var packageJson;\n      try {\n        packageJson = JSON.parse(fs.readFileSync(packageJsonPath));\n      } catch(ex) {\n        console.error('Failed to parse package.json as json');\n        console.error(ex.stack || ex);\n        if (process.send) process.send({moduleError: ex || true});\n        process.exit(1);\n      }\n      if (packageJson && packageJson.dependencies) {\n        var dependencies = packageJson.dpdInclude && packageJson.dpdInclude.length ? packageJson.dpdInclude.reduce(function(prev, curr) {\n          prev[curr] = packageJson.dependencies[curr];\n          return prev;\n        }, {}) : packageJson.dependencies;\n        var dpdIgnore = packageJson.dpdIgnore || [];\n        debug('Loading these dependencies from package.json', dependencies);\n        remaining = 0;\n        for (var dependency in dependencies) {\n          if(dpdIgnore.indexOf(dependency) === -1) loadCustomResources(dependency);\n        }\n      }\n    } else {\n      // read local project resources\n      fs.readdir(path + '/node_modules', function(err, dir) {\n        remaining = 0;\n        if(dir && dir.length) {\n          dir.forEach(function(file) {\n            if(file.indexOf('.js') == file.length - 3 || file.indexOf('.') === -1) {\n              loadCustomResources(file);\n            }\n          });\n        } else {\n          fn(defaults, types);\n        }\n      });\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resources/internal-resources.js":"var fs = require('fs')\n  , path = require('path')\n  , util = require('util')\n  , fs_extra = require('fs-extra')\n  , Resource = require('../resource')\n  , debug = require('debug')('internal-resources')\n  , path = require('path')\n  , loadTypes = require('../type-loader');\n\n/*!\n * Builds a list of resources from config\n *\n * @param {Array of Object} resourceConfig\n * @param {Server} server\n * @returns {Array of Resource} resources\n */\n\n\nfunction InternalResources(settings, server) {\n  settings.configPath = settings.configPath || './';\n  Resource.apply(this, arguments);\n  this.server = server;\n  // internal resource\n  this.internal = true;\n  debug('constructed');\n}\nutil.inherits(InternalResources, Resource);\nmodule.exports = InternalResources;\n\nvar excludedTypes = {\n  Dashboard: 1,\n  Files: 1,\n  ClientLib: 1,\n  InternalResources: 1\n};\n\nInternalResources.prototype.handle = function(ctx, next) {\n\n  if (!ctx.req.isRoot) {\n    ctx.done({statusCode: 401, message: \"Not Allowed\"});\n    return;\n  }\n\n  var basepath = this.config.configPath;\n\n  // TODO handle file system ENOENT, send all else to ctx.done\n  // if(err) return ctx.done(err);\n\n  var resource\n    , id = ctx.url && ctx.url.replace('/', '')\n    , file;\n\n  if(ctx.url === '/types') {\n    loadTypes(function(defaults, types) {\n      Object.keys(types).forEach(function(key) {\n        defaults[key] = types[key];\n      });\n      Object.keys(defaults).forEach(function(key) {\n        if(excludedTypes[key]) return;\n        var c = defaults[key]\n          , pages = c.dashboard && c.dashboard.pages;\n\n        if (!pages && c.events) {\n          pages = ['Config', 'Events'];\n        }\n\n        defaults[key] = {\n          type: c.name,\n          defaultPath: c.defaultPath,\n          label: c.label,\n          dashboardPages: pages\n        };\n      });\n      ctx.done(null, defaults);\n    });\n    return;\n  }\n\n  if(ctx.req.method != 'GET' && ctx.server) {\n    // clear cache\n    delete ctx.server.__resourceCache;\n  }\n\n  switch (ctx.req.method) {\n    case 'POST':\n    case 'PUT':\n      var parts\n        , fileName\n        , isJson;\n\n      resource = ctx.body;\n\n      parts = (ctx.url || '').split('/').filter(function(p) { return p; });\n\n      if (!parts || !parts.length) return ctx.done({statusCode: 400, message: \"You must provide a resource\"});\n\n      id = parts[0];\n      if (!parts[1] || parts[parts.length - 1].indexOf('.') === -1) {\n        parts.push('config.json');\n      }\n      file = path.join(basepath, 'resources', parts.join('/'));\n\n      fileName = parts[parts.length - 1].toLowerCase();\n      isJson = fileName.lastIndexOf('.json') === fileName.length - 5;\n\n      fs.stat(path.join(basepath, 'resources', id), function(err, stat) {\n        if (!stat || !stat.isDirectory()) {\n          fs.mkdir(path.join(basepath, 'resources', id), function(err) {\n            if (err) return ctx.done(err);\n            save();\n          });\n        } else {\n          save();\n        }\n      });\n\n      function save() {\n        if (isJson && !resource.$setAll) {\n          fs.readFile(file, 'utf-8', function(err, currentValue) {\n            if (!currentValue) {\n              writeFile(resource);\n            } else {\n              try {\n                var currentJson = JSON.parse(currentValue);\n                Object.keys(resource).forEach(function(k) {\n                  currentJson[k] = resource[k];\n                });\n                writeFile(currentJson);\n              } catch (ex) {\n                writeFile(resource);\n              }\n            }\n          });\n        } else if (isJson) {\n          delete resource.$setAll;\n          writeFile(resource);\n        } else {\n          writeFile(resource.value);\n        }\n      }\n\n      function writeFile(value) {\n        var newId = value.id;\n        delete value.id;\n        if (typeof value === 'object') value = JSON.stringify(value, null, '\\t');\n        notifyType(id, 'Changed', resource, ctx.server, function(eventError) {\n          if(eventError) return ctx.done(eventError);\n\n          fs.writeFile(file, value, function(err) {\n            if (err) return ctx.done(err);\n\n            if (fileName.lastIndexOf('config.json') === fileName.length - ('config.json').length &&\n                newId && newId !== id) {\n              //rename\n              if (newId.indexOf('/') === 0) newId = newId.substring(1);\n              fs.rename(path.join(basepath, 'resources', id), path.join(basepath, 'resources', newId), function(err) {\n                if (err) return ctx.done(err);\n                resource.id = newId;\n                ctx.done(null, resource);\n              });\n            } else {\n              resource.id = id;\n              ctx.done(null, resource);\n            }\n          });\n        });\n      }\n\n      break;\n    case 'GET':\n      if(id) {\n        isJson = undefined;\n        file = id;\n        if (id.lastIndexOf('.') <= id.lastIndexOf('/')) {\n          file += '/config.json';\n        }\n        isJson = file.lastIndexOf('.json') === (file.length - ('.json').length);\n\n        file = path.join(basepath, 'resources', file);\n        fs.readFile(file, 'utf-8', function(err, value) {\n          var json;\n          if (!value) return next();\n          if (isJson) {\n            try {\n              json = JSON.parse(value);\n              json.id = id;\n              ctx.done(null, json);\n            } catch (ex) {\n              ctx.done(\"Error parsing file: \" + ex.message);\n            }\n          } else {\n            ctx.done(null, {value: value});\n          }\n\n        });\n\n      } else {\n        fs.readdir(path.join(basepath, 'resources'), function(err, folders) {\n          var remaining\n            , fileDone\n            , resources = [];\n          if (!folders) return ctx.done(err);\n          remaining = folders.length;\n          fileDone = function() {\n            remaining--;\n            if (remaining <= 0) {\n              resources = resources.sort(function(a, b) {\n                var sort = a.__ctime - b.__ctime;\n                if (sort === 0) {\n                  sort = a.id.localeCompare(b.id);\n                }\n                return sort;\n              }).map(function(r) {\n                delete r.__ctime;\n                return r;\n              });\n              ctx.done(null, resources);\n            }\n          };\n\n          if (!remaining) {\n            ctx.done(null, []);\n          }\n\n          folders.forEach(function(f) {\n            var fullPath = path.join(basepath, 'resources', f, 'config.json');\n            fs.stat(fullPath, function(err, stat) {\n              if (stat) {\n                fs.readFile(fullPath, 'utf-8', function(err, value) {\n                  var json;\n                  if (!value) return fileDone();\n                  try {\n                    json = JSON.parse(value);\n                    json.id = f;\n                    json.__ctime = stat.ctime;\n                    resources.push(json);\n                    fileDone();\n                  } catch (ex) {\n                    ctx.done(\"Error parsing config.json: \" + ex.message);\n                  }\n                });\n              } else {\n                fileDone();\n              }\n            });\n          });\n        });\n      }\n      break;\n    case 'DELETE':\n      if (!id) return ctx.done(\"You must specify a resource\");\n      var resourcePath = path.join(basepath, 'resources', id);\n      fs_extra.remove(resourcePath, function(err) {\n        if (err) return ctx.done(err);\n        notifyType(id, 'Deleted', null, ctx.server, function(eventError) {\n          ctx.done(eventError);\n        });\n      });\n      break;\n    default:\n      next();\n  }\n};\n\nfunction notifyType(id, event, config, server, fn) {\n  if(server) {\n    var found = false;\n    server.resources.forEach(function(r) {\n      if(id === r.name) {\n        found = true;\n        debug('notifying resource', r.config.path);\n        if (r['config' + event]) {\n          r['config' + event](config, function(err) {\n            if (err) return fn(err);\n            r.config = config;\n            fn();\n            r.emit(event.toLowerCase(), config);\n          });\n        } else {\n          fn();\n          r.emit(event.toLowerCase(), config);\n        }\n        return false;\n      }\n    });\n\n    if (!found) {\n      fn();\n    }\n  } else {\n    fn();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resource.js":"var parse = require('url').parse\n  , EventEmitter = require('events').EventEmitter\n  , util = require('util')\n  , path = require('path')\n  , Script = require('./script');\n\n/**\n * A `Resource` handles incoming requests at a matched url. The base class is designed\n * to be extended by overriding methods that will be called by a `Router`.\n *\n * A `Resource` is also an `EventEmitter`. The following events are available.\n *\n *   - `changed`      after a resource config has changed\n *   - `deleted`      after a resource config has been deleted\n *\n * Options:\n *\n *   - `path`         the base path a resource should handle\n *   - `db`           the database a resource will use for persistence\n *\n * Example:\n *\n *   The following resource would respond with a file at the url `/my-file.html`.\n *\n *     function MyFileResource(name, options) {\n *       Resource.apply(this, arguments);\n *\n *       this.on('changed', function(config) {\n *         console.log('MyFileResource changed', config);\n *       });\n *     }\n *     util.inherits(MyFileResource, Resource);\n *\n *     FileResource.prototype.handle = function (ctx, next) {\n *       if (ctx.url === '/my-file.html') {\n *         fs.createReadStream('my-file.html').pipe(ctx.res);\n *       } else {\n *         next();\n *       }\n *     }\n *\n * @param {Object} options\n * @api private\n */\n\nfunction Resource(name, options) {\n  EventEmitter.call(this);\n  this.name = name;\n  this.path = '/' + name;\n  options = this.options = options || {};\n  this.config = options.config || {};\n  this.events = {};\n  var instance = this;\n  if(this.constructor.external) {\n    instance.external = {};\n    Object.keys(this.constructor.external).forEach(function (key) {\n      if(typeof instance.constructor.external[key] == 'function') {\n        instance.external[key] = function () {\n          instance.constructor.external[key].apply(instance, arguments);\n        };\n      }\n    });\n  }\n}\n\n/**\n * The external prototype for exposing methods over http and to dpd.js\n */\n\nResource.external = {};\nutil.inherits(Resource, EventEmitter);\n\n/**\n * Parse the `url` into a basepath, query, and parts.\n *\n * @param {String} url\n * @return {Object}\n * @api private\n */\n\nResource.prototype.parse = function (url) {\n  var parsed = parse(url, true)\n    , pathname = parsed.pathname\n    , parts = parsed.parts = pathname.split('/');\n\n  // remove empty\n  parts.shift();\n  parsed.basepath = parts[0];\n\n  // remove empty trailing slash part\n  if(parts[parts.length - 1] === '') parts.pop();\n\n  // the last part is always the identifier\n  if(parts.length > 1) parsed.id = parts[parts.length - 1];\n\n  if(parsed.query.q && parsed.query.q[0] === '{' && parsed.query.q[parsed.query.q.length - 1] === '}') {\n    parsed.query.q = JSON.parse(parsed.query.q);\n  }\n\n  return parsed;\n};\n\nResource.prototype.load = function (fn) {\n  var eventNames = this.constructor && this.constructor.events\n    , remaining = eventNames && eventNames.length\n    , configPath = this.options && this.options.configPath\n    , events = this.events = {};\n\n  if(remaining) {\n    eventNames.forEach(function(e) {\n      var fileName = e.toLowerCase() + '.js'\n        , filePath = path.join(configPath, fileName);\n\n      Script.load(filePath, function (err, script) {\n        if (script) {\n          events[e] = script;\n        }\n        remaining--;\n        if (remaining <= 0) {\n          fn();\n        }\n      });\n    });\n  } else {\n    fn();\n  }\n};\n\n/**\n * Handle an incoming request. This gets called by the router.\n * Call `next()` if the resource cannot handle the request.\n * Otherwise call `cxt.done(err, res)` when the resource\n * is ready to respond.\n *\n * Example:\n *\n *  Override the handle method to return a string:\n *\n *     function MyResource(settings) {\n *       Resource.apply(this, arguments);\n *     }\n *     util.inherits(MyResource, Resource);\n *\n *     MyResource.prototype.handle = function (ctx, next) {\n *       // respond with the file contents (or an error if one occurs)\n *       fs.readFile('myfile.txt', ctx.done);\n *     }\n *\n * @param {Context} ctx\n * @param {function} next\n */\n\nResource.prototype.handle = function (ctx, next) {\n  ctx.end();\n};\n\n/**\n * Turn a resource constructor into an object ready\n * for JSON. It should atleast include the `type`\n * and `defaultPath`.\n */\n\nResource.toJSON = function() {\n  return {\n    type: this.name,\n    defaultPath: '/my-resource'\n  };\n};\n\n/*!\n * If true, generates utility functions for this resource in dpd.js\n */\n\nResource.prototype.clientGeneration = false;\n\n/*!\n * If clientGeneration is true, generates utility functions that alias to get(path)\n */\n\nResource.prototype.clientGenerationGet = [];\n\n/*!\n * If clientGeneration is true, generates utility functions that alias to do(path)\n */\n\nResource.prototype.clientGenerationExec = [];\n\n/*!\n * Resource tag, for duck typing\n */\n\nResource.prototype.__resource__ = true;\n\nmodule.exports = Resource;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/script.js":"var _ = require('underscore')._\n  , EventEmitter = require('events').EventEmitter\n  , fs = require('fs')\n  , bluebird = require('bluebird')\n  , util = require('util');\n\n/**\n * A `Script` executes JavaScript src in a sandboxed context and exposes it a set of domain functions.\n */\n\nfunction Script(src, path) {\n  this.scriptSourceCode = src;\n  this.path = path;\n}\n\nScript.prototype.runWithContext = function (context) {\n  var functionArgs = Object.keys(context);\n\n  // remove the argument 'this' from our list of passed arguments, because it is a reserved word\n  functionArgs.splice(functionArgs.indexOf('this'), 1);\n\n  functionArgs.push(this.scriptSourceCode);\n  var func = this.getFunction(functionArgs);\n\n  // pass our arguments from the sandbox to the function\n  var args = [];\n  functionArgs.forEach(function (p) {\n    args.push(context[p]);\n  });\n  return func.apply(context._this || {}, args);\n};\n\nScript.prototype.getFunction = _.memoize(function(functionArgs) {\n  return Function.apply(null, functionArgs);\n});\n\n/**\n * Run the current script in the given sandbox. An optional domain may be provided to extend the sandbox exposed to the script.\n */\n\nScript.prototype.run = function (ctx, domain, fn) {\n\n  if (this.error) { fn(this.error); }\n\n  if(typeof domain === 'function') {\n    fn = domain;\n    domain = undefined;\n  }\n\n  var req = ctx.req\n    , session = ctx.session\n    , waitingForCallback = false\n    , callbackCount = 0\n    , isDone = false\n    , events;\n\n  var scriptContext = {\n    'this': {},\n    cancel: function(msg, status) {\n      var err;\n      if (util.isError(msg)) {\n        err = msg;\n      } else if (!status && msg && msg.message && (msg.status || msg.statusCode)) {\n        // allow chaining this from another response\n        err = {message: msg.message, statusCode: msg.status || msg.statusCode};\n      } else {\n        err = {message: msg, statusCode: status};\n      }\n      done(err);\n      throw err;\n    },\n    cancelIf: function(condition, msg, status) {\n      if (condition) {\n        scriptContext.cancel(msg, status);\n      }\n    },\n    cancelUnless: function(condition, msg, status) {\n      scriptContext.cancelIf(!condition, msg, status);\n    },\n    me: session && session.user,\n    isMe: function(id) {\n      return (scriptContext.me && scriptContext.me.id === id) || false;\n    },\n    console: console,\n    query: ctx.query,\n    internal: req && req.internal,\n    isRoot: req && req.session && req.session.isRoot,\n    emit: function(collection, query, event, data) {\n      if(arguments.length === 4) {\n        session.emitToUsers(collection, query, event, data);\n      } else if(arguments.length === 3) {\n        // collection is room name\n        if(session.emitToRoom) session.emitToRoom(collection, query, event);\n      } else if(arguments.length <= 2) {\n        event = collection;\n        data = query;\n        if(session.emitToAll) session.emitToAll(event, data);\n      }\n    },\n    session: session,\n    ctx: ctx\n  };\n\n  scriptContext._this = scriptContext['this'];\n  scriptContext._error = undefined;\n\n  events = new EventEmitter();\n\n  function done(err) {\n    if (isDone) return;\n    isDone = true;\n    events.removeAllListeners('finishCallback');\n    if (fn) fn(err);\n  }\n\n  if(domain) {\n\n    events.on('addCallback', function() {\n      waitingForCallback = true;\n      callbackCount++;\n    });\n\n    events.on('finishCallback', function() {\n      callbackCount--;\n      if (callbackCount <= 0) {\n        done(scriptContext._error);\n      }\n    });\n\n    events.on('error', function (err) {\n      done(err);\n    });\n\n    domain.$addCallback = function() {\n      events.emit('addCallback');\n    };\n\n    domain.$finishCallback = function() {\n      events.emit('finishCallback');\n    };\n    domain.dpd = ctx.dpd;\n\n    if(fn) {\n      // if a callback is expected, count callbacks\n      // and manually merge the domain\n      wrapAsyncFunctions(domain, scriptContext, events, done);\n    } else {\n      // otherwise just merge the domain\n      Object.keys(domain).forEach(function (key) {\n        scriptContext[key] = domain[key];\n      });\n    }\n    scriptContext['this'] = scriptContext._this = domain.data;\n  }\n\n  var err;\n\n  try {\n    this.runWithContext(scriptContext);\n  } catch(e) {\n    err = wrapError(e);\n    scriptContext._error = err;\n  }\n  err = err || scriptContext._error;\n  process.nextTick(function () {\n    if (!waitingForCallback && callbackCount <= 0) {\n      done(err);\n    }\n  });\n};\n\nScript.load = function(path, fn) {\n  fs.readFile(path, 'utf-8', function(err, val) {\n    if (val) {\n      fn(err, new Script(val, path));\n    } else {\n      fn(err);\n    }\n  });\n};\n\nfunction wrapError(err) {\n  if (err && err.__proto__ && global[err.__proto__.name]) {\n    err.__proto__ = global[err.__proto__.name].prototype;\n  }\n  return err;\n}\n\nfunction isPromise(obj) {\n  //maybe not the best of all checks but at least it's compliant to Promises/A+\n  //see https://promisesaplus.com\n  return obj !== null && typeof obj === 'object' && (typeof obj.then === 'function' || isPromise(obj.promise));\n}\n\nfunction wrapPromise(promiseable, sandbox, events, done, sandboxRoot) {\n  var realPromise = promiseable;\n  var ret = null;\n  if(!promiseable.then && promiseable.promise && isPromise(promiseable.promise)) {\n    realPromise = bluebird.cast(promiseable.promise);\n    ret = { promise: realPromise, resolve: promiseable.resolve, reject: promiseable.reject };\n  }\n  if (!ret) {\n    ret = bluebird.cast(realPromise);\n    realPromise = ret;\n  }\n\n  var realThen = realPromise._then;\n  var addCallback = function () {\n    events.emit('addCallback');\n  };\n  var finishCallback = function() {\n    events.emit('finishCallback');\n  };\n\n  addCallback();\n  realPromise.then(finishCallback, finishCallback);\n\n  realPromise._then = function (onFulfilled, onRejected) {\n    var args = [undefined, undefined];\n\n    if (onFulfilled) {\n      // wrappedOnFulfilled\n      args[0] = function (res) {\n        addCallback();\n        try {\n          var result = onFulfilled.apply(this, arguments);\n          return isPromise(result)? wrapPromise(result, sandbox, events, done, sandboxRoot) : result;\n        } catch (err) {\n          sandboxRoot._error = err;\n          throw err;\n        } finally {\n          finishCallback();\n        }\n      };\n    }\n\n    if(onRejected) {\n      args[1] =\n        // wrappedOnRejected\n        function (error) {\n          if (error === sandboxRoot._error) {\n            // if we're handling a previously uncaught error, remove it\n            sandboxRoot._error = null;\n          }\n          addCallback();\n          try {\n            var result = onRejected.apply(this, arguments);\n            return isPromise(result)? wrapPromise(result, sandbox, events, done, sandboxRoot) : result;\n          } catch (err) {\n            sandboxRoot._error = wrapError(err);\n            throw err;\n          } finally {\n            finishCallback();\n          }\n        };\n    }\n\n    for(var i = args.length; i< arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n    var result = realThen.apply(realPromise, args);\n    return isPromise(result)? wrapPromise(result, sandbox, events, done, sandboxRoot) : result;\n  };\n  return ret;\n}\n\nfunction wrapAsyncFunction(asyncFunction, sandbox, events, done, sandboxRoot) {\n  return function() {\n    if (sandboxRoot._error) return;\n\n    var args = _.toArray(arguments);\n    var callback;\n    var callbackIndex;\n    var result;\n\n    for(var i = 0; i < args.length; i++) {\n      if(typeof args[i] == 'function') {\n        callback = args[i];\n        callbackIndex = i;\n        break;\n      }\n    }\n\n    if (typeof callback === 'function') {\n      events.emit('addCallback');\n      args[callbackIndex] = function() {\n        if (sandboxRoot._error) return;\n        try {\n          result = callback.apply(sandboxRoot._this, arguments);\n          events.emit('finishCallback');\n        } catch (err) {\n          var wrappedErr = wrapError(err);\n          sandbox._error = wrappedErr;\n          return done(wrappedErr);\n        }\n      };\n    }\n    try {\n      result = asyncFunction.apply(sandboxRoot._this, args);\n    } catch(err) {\n      var wrappedErr = wrapError(err);\n      sandbox._error = wrappedErr;\n      return done(wrappedErr);\n    }\n\n    if(result !== undefined) {\n      if(isPromise(result)) {\n        return wrapPromise(result, sandbox, events, done, sandboxRoot);\n      } else {\n        return result;\n      }\n    }\n  };\n}\n\nfunction wrapAsyncFunctions(asyncFunctions, sandbox, events, done, sandboxRoot) {\n  if (!sandboxRoot) sandboxRoot = sandbox;\n\n  if(!asyncFunctions) {\n    // stop if asyncFunctions does not exist\n    return;\n  }\n\n  Object.keys(asyncFunctions).forEach(function(k) {\n    if (typeof asyncFunctions[k] === 'function') {\n      sandbox[k] = wrapAsyncFunction(asyncFunctions[k], sandbox, events, done, sandboxRoot);\n\n      // we need to retain all the properties a function might have, think constructor with static functions\n      wrapAsyncFunctions(asyncFunctions[k], sandbox[k], events, done, sandboxRoot);\n    } else if (asyncFunctions[k] !== null && typeof asyncFunctions[k] === 'object' && !(asyncFunctions[k] instanceof Array)) {\n      sandbox[k] = sandbox[k] || {};\n      wrapAsyncFunctions(asyncFunctions[k], sandbox[k], events, done, sandboxRoot);\n    } else {\n      sandbox[k] = asyncFunctions[k];\n    }\n  });\n}\n\nmodule.exports = Script;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resources/files.js":"var util = require('util')\n  , send = require('send')\n  , Resource = require('../resource')\n  , path = require('path')\n  , url = require('url')\n  , respond = require('doh').createResponder();\n\n/**\n * A `Files` resource proxies incoming requests to the file system.\n *\n * Options:\n *\n *   - `config.public`       the root folder to server public assets\n *\n * @param {Object} options\n * @api private\n */\n\nfunction Files(name, options) {\n  Resource.apply(this, arguments);\n  if(this.config.public) {\n    this.public = this.config.public;\n  } else {\n    throw new Error('public root folder location required when creating a file resource');\n  }\n}\nutil.inherits(Files, Resource);\n\nFiles.prototype.handle = function (ctx, next) {\n  if(ctx.req && ctx.req.method !== 'GET') return next();\n\n  send(ctx.req, url.parse(ctx.url).pathname, {root: path.resolve(this.public)})\n    .on('error', function (err) {\n      ctx.res.statusCode = 404;\n      respond('Resource Not Found', ctx.req, ctx.res);\n    })\n    .pipe(ctx.res);\n};\n\nmodule.exports = Files;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resources/client-lib.js":"var Resource = require('../resource')\n  , util = require('util')\n  , path = require('path')\n  , fs = require('fs')\n  , async = require('async');\n\nfunction ClientLib(name, options) {\n  Resource.apply(this, arguments);\n}\nutil.inherits(ClientLib, Resource);\n\nClientLib.prototype.load = function(fn) {\n  var resource = this;\n\n  async.parallel({\n    dpdJs: function(callback) {\n      fs.readFile(path.join(__dirname, '../../clib/dpd.js'), 'utf-8', callback);\n    },\n    socketIo: function(callback) {\n      fs.readFile(path.join(__dirname, '../../clib/socket.io.min.js'), 'utf-8', callback);\n    },\n    promise: function(callback) {\n      fs.readFile(path.join(__dirname, '../../clib/ayepromise.min.js'), 'utf-8', callback);\n    },\n    ajax: function(callback) {\n      fs.readFile(path.join(__dirname, '../../clib/ajax.js'), 'utf-8', callback);\n    }\n  }, function(err, results) {\n    if (err) return fn(err);\n    var file = results.socketIo + \"\\n\\n\"\n             + results.promise + \"\\n\\n\"\n             + results.ajax + \"\\n\\n\"\n             + results.dpdJs;\n    resource.clientLib = file;\n    fn();\n  });\n};\n\nClientLib.prototype.handle = function (ctx, next) {\n  var resource = this;\n\n  if (ctx.url === '/') {\n    ctx.res.setHeader('Content-Type', 'text/javascript');\n    var lib = resource.clientLib;\n\n    ctx.res.write(lib);\n    resource.generate(ctx.res, function() {\n      ctx.res.end();\n    });\n  } else {\n    next();\n  }\n};\n\nClientLib.prototype.generate = function(res, fn) {\n  var clientLib = this;\n\n  res.write('\\n\\n// automatically generated code\\n\\n');\n  this.config.resources.forEach(function(r) {\n    clientLib.generateResource(r, res);\n  });\n  fn();\n};\n\nClientLib.prototype.generateResource = function(r, res) {\n  var jsName = r.path.replace(/[^A-Za-z0-9]/g, '')\n    , i;\n\n  if (r.clientGeneration && jsName) {\n    res.write('dpd.' + jsName + ' = dpd(\"' + r.path + '\");\\n');  \n    if (r.clientGenerationExec) {\n      for (i = 0; i < r.clientGenerationExec.length; i++) {\n        res.write('dpd.' + jsName + '.' + r.clientGenerationExec[i] + ' = function(path, body, fn) {\\n');\n        res.write('  return dpd.' + jsName + '.exec(\"' + r.clientGenerationExec[i] + '\", path, body, fn);\\n');\n        res.write('}\\n');\n      }\n    }\n    if (r.clientGenerationGet) {\n      for (i = 0; i < r.clientGenerationGet.length; i++) {\n        res.write('dpd.' + jsName + '.' + r.clientGenerationGet[i] + ' = function(path, query, fn) {\\n');\n        res.write('  return dpd.' + jsName + '.get(\"' + r.clientGenerationGet[i] + '\", path, query, fn);\\n');\n        res.write('}\\n');\n      }\n    }\n    // resource event namespacing sugar\n    res.write('dpd.' + jsName + '.on = function(ev, fn) {\\n');\n    res.write('  return dpd.on(\"' + r.path.replace('/', '') + '\" + \":\" + ev, fn);\\n');\n    res.write('}\\n');\n    res.write('dpd.' + jsName + '.once = function(ev, fn) {\\n');\n    res.write('  return dpd.once(\"' + r.path.replace('/', '') + '\" + \":\" + ev, fn);\\n');\n    res.write('}\\n');\n    res.write('dpd.' + jsName + '.off = function(ev, fn) {\\n');\n    res.write('  return dpd.off(\"' + r.path.replace('/', '') + '\" + \":\" + ev, fn);\\n');\n    res.write('}\\n');\n  }\n\n  if(r.external) {\n    Object.keys(r.external).forEach(function (name) {\n      res.write('dpd.' + jsName + '.' + name + ' = function (path, body, fn) {\\n');\n      res.write('  dpd.' + jsName + '.exec(\"' + name + '\", path, body, fn);\\n');\n      res.write('}\\n');\n    });\n  }\n  \n  res.write('\\n');\n};\n\nmodule.exports = ClientLib;","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resources/dashboard.js":"var util = require('util')\n  , httpUtil = require('../util/http')\n  , filed = require('filed')\n  , Resource = require('../resource')\n  , path = require('path')\n  , debug = require('debug')('dashboard')\n  , fs = require('fs')\n  , ejs = require('ejs')\n  , loadTypes = require('../type-loader')\n  , async = require('async');\n\nfunction Dashboard() {\n  // internal resource\n  this.internal = true;\n\n  this.loadTypes = async.memoize(this.loadTypes);\n  this.loadLayout = async.memoize(this.loadLayout);\n\n  Resource.apply(this, arguments);\n}\nutil.inherits(Dashboard, Resource);\nmodule.exports = Dashboard;\n\n\n\nDashboard.prototype.handle = function(ctx, next) {\n\n  if (ctx.req.url === this.path) {\n    return httpUtil.redirect(ctx.res, ctx.req.url + '/');\n  } else if (ctx.url === '/__is-root') {\n    ctx.done(null, {isRoot: ctx.req.isRoot});\n  } else if (ctx.url.indexOf('/__custom') === 0) {\n    this.serveCustomAsset(ctx, next);\n  } else if (ctx.url.indexOf('.') !== -1) {\n    filed(path.join(__dirname, 'dashboard', ctx.url)).pipe(ctx.res);\n  } else if (!ctx.req.isRoot && (!ctx.server.options || ctx.server.options.env !== 'development')) {\n    filed(path.join(__dirname, 'dashboard', 'auth.html')).pipe(ctx.res);\n  } else {\n    this.render(ctx);\n  }\n\n};\n\n\nDashboard.prototype.serveCustomAsset = function(ctx, next) {\n  var parts = ctx.url.split('/').filter(function(p) { return p; })\n    , resourceTypePath = parts[1]\n    , resource = this;\n\n  resource.loadTypes(function(err, types) {\n    var resourceTypeId\n      , resourceType\n      , dashboardPath\n      , reqUrl = parts.slice(2).join('/');\n\n    resourceTypeId = Object.keys(types).filter(function(t) { return t.toLowerCase() === resourceTypePath; })[0];\n\n    if (resourceTypeId) {\n      resourceType = types[resourceTypeId];\n      dashboardPath = resourceType && resourceType.dashboard && resourceType.dashboard.path;\n      if (dashboardPath) {\n        return filed(path.join(dashboardPath, reqUrl)).pipe(ctx.res);\n      }\n    }\n\n    next();\n  });\n};\n\nDashboard.prototype.loadTypes = function(fn) {\n  loadTypes(function(defaults, types) {\n    Object.keys(defaults).forEach(function(key) {\n      types[key] = defaults[key];\n    });\n    fn(null, types);\n  });\n};\n\nDashboard.prototype.render = function(ctx) {\n  var self = this\n    , appName = path.basename(path.resolve('./'))\n    , env = ctx.server && ctx.server.options && ctx.server.options.env;\n\n  async.parallel({\n      layout: self.loadLayout\n    , options: async.apply(self.loadPage.bind(self), ctx)\n  }, function(err, results) {\n    if (err) return ctx.done(err);\n\n    var options = results.options || {}\n      , layout = results.layout\n      , render = {};\n\n    var context = {\n        resourceId: options.resourceId\n      , resourceType: options.resourceType\n      , page: options.page\n      , basicDashboard: options.basicDashboard\n      , events: options.events\n      , appName: appName\n      , env: env\n    };\n\n    render.bodyHtml = options.bodyHtml;\n\n    try {\n      var rendered = layout({context: context, render: render, scripts: options.scripts || [], css: options.css || null});\n      ctx.res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      ctx.res.end(rendered);\n    } catch (ex) {\n      ctx.done(ex.message);\n    }\n  });\n};\n\nDashboard.prototype.loadLayout = function(fn) {\n\n  fs.readFile(path.join(__dirname, 'dashboard', 'index.ejs'), 'utf-8', function(err, layout) {\n    if (err) return fn(err);\n    var layoutTemplate = ejs.compile(layout, {delimiter:'?'}); //Avoid conlicts by using non-standard tags\n    fn(null, layoutTemplate);\n  });\n};\n\nDashboard.prototype.loadPage = function(ctx, fn) {\n  var parts = ctx.url.split('/').filter(function(p) { return p; })\n    , resourceId\n    , resource\n    , resourceType\n    , options = {}\n    , self = this\n    , dashboardPath\n    , pagePath;\n\n  if (parts.length) {\n    resourceId = parts[0];\n    resource = ctx.server.resources.filter(function(r) { return r.name === resourceId.toLowerCase() })[0];\n\n    if (resource) {\n      options.resourceId = resourceId;\n      resourceType = resource.constructor;\n      options.resourceType = resourceType.name;\n      options.events = resourceType.events;\n      options.scripts = [];\n\n      var page = parts[1];\n\n      if (!page && resourceType.dashboard && resourceType.dashboard.pages) {\n        page = resourceType.dashboard.pages[0];\n      } else if (!page) {\n        page = 'index';\n      }\n      if (page === 'config') page = 'index';\n\n      dashboardPath = resourceType.dashboard && resourceType.dashboard.path;\n\n      async.waterfall([\n        function(fn) {\n          if (dashboardPath) {\n            pagePath = path.join(dashboardPath, page + '.html');\n            fs.exists(pagePath, function(exists) {\n              fn(null, exists);\n            });\n          } else {\n            fn(null, false);\n          }\n        },\n\n        function(exists, fn) {\n          if (exists) {\n            self.loadAdvancedDashboard({\n                pagePath: pagePath\n              , dashboardPath: dashboardPath\n              , page: page\n              , resourceType: resourceType\n              , options: options\n            }, fn);\n          } else {\n            self.loadBasicDashboard({\n                options: options\n              , page: page\n              , resourceType: resourceType\n            }, fn);\n          }\n        }\n      ], function(err) {\n        fn(err, options);\n      });\n\n      debug(\"Editing resource %s of type %s\", resourceId, resourceType.name);\n\n      return;\n    }\n  }\n\n  fn(); //blank page\n};\n\nDashboard.prototype.loadAdvancedDashboard = function(data, fn) {\n  var pagePath = data.pagePath\n    , dashboardPath = data.dashboardPath\n    , page = data.page\n    , resourceType = data.resourceType\n    , options = data.options;\n\n\n  async.parallel({\n    bodyHtml: function(fn) {\n      fs.readFile(pagePath, 'utf-8', fn);\n    },\n\n    scripts: function(fn) {\n      if (resourceType.dashboard.scripts) {\n        resourceType.dashboard.scripts.forEach(function(s) {\n          options.scripts.push('/__custom/' + resourceType.name.toLowerCase() + s);\n        });\n      }\n\n      fs.exists(path.join(dashboardPath, 'js', page + '.js'), function(exists) {\n        if (exists) {\n          options.scripts.push('/__custom/' + resourceType.name.toLowerCase() + '/js/' + page + '.js');\n        }\n\n        fn();\n      });\n    },\n\n    stylesheet: function(fn) {\n      fs.exists(path.join(resourceType.dashboard.path, 'style.css'), function(exists) {\n        if (exists) {\n          options.css = '/__custom/' + resourceType.name.toLowerCase() + '/style.css';\n        }\n\n        fn();\n      });\n    }\n  }, function(err, results) {\n    if (err) return fn(err);\n\n    options.bodyHtml = results.bodyHtml;\n\n    if (page === 'index') page = 'config';\n    options.page = page;\n\n    fn(null, options);\n  });\n};\n\nDashboard.prototype.loadBasicDashboard = function(data, fn) {\n  var options = data.options\n    , page = data.page\n    , resourceType = data.resourceType\n    , dashboardPath = path.join(__dirname, 'dashboard');\n\n  options.page = page;\n  if (page === 'index') {\n    options.page = 'config';\n    if (resourceType.basicDashboard) {\n      options.scripts.push('/js/basic.js');\n      options.basicDashboard = resourceType.basicDashboard;\n      fs.readFile(path.join(dashboardPath, 'basic.html'), function(err, bodyHtml) {\n        options.bodyHtml = bodyHtml;\n        fn(err);\n      });\n    } else {\n      options.scripts.push('/js/default.js');\n      fs.readFile(path.join(dashboardPath, 'default.html'), function(err, bodyHtml) {\n        options.bodyHtml = bodyHtml;\n        fn(err);\n      });\n    }\n  } else if (page === 'events') {\n    fs.readFile(path.join(dashboardPath, 'events.html'), function(err, bodyHtml) {\n      options.bodyHtml = bodyHtml;\n      fn(err);\n    });\n  } else {\n    return fn();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/attach.js":"var fs = require('fs');\nvar path = require('path');\nvar debug = require('debug')('server');\nvar _ = require('underscore');\nvar Router = require('./router');\nvar db = require('./db');\nvar Keys = require('./keys');\nvar SessionStore = require('./session').SessionStore;\nvar setupReqRes = require('./util/http').setup;\nvar config = require('./config-loader');\n\n\n/**\n* Attach deployd router, sessions, db and functions into an existing http server instance.\n* Make it possible to extend an express or socketIo server.\n*\n* The attached server instance consists of a handleRequest function which is an express middleware\n*\n* Options:\n*\n*   - `db`           the database connection info\n*   - `socketIo`     the already created socket.io instance\n*   - `host`         the server's hostname\n*\n* Properties:\n*\n*  - `sessions`      the servers `SessionStore`\n*  - `sockets`       raw socket.io sockets\n*  - `db`            the servers `Db` instance\n*  - `handleRequest` express middleware\n*\n* Example:\n*\n*   var http = require('http');\n*   var express = require('express');\n*   var app = express();\n*   var server = http.createServer(app);\n*   var io = require('socket.io').listen(server, {'log level': 0});\n*\n*   var deployd = require('deployd')\n*   deployd.attach(server, {socketIo: io, env: ENV, db:{host:'localhost', port:27015, name:'my-db'} } );\n*   app.use(server.handleRequest);\n*\n*   server.listen();\n*\n* @param {Object} options\n* @return {HttpServer}\n*/\nfunction attach(httpServer, options) {\n  var server = process.server = httpServer;\n\n  // defaults\n  server.options = options = _.extend({\n    db: {port: 27017, host: '127.0.0.1', name: 'deployd'}\n  }, options);\n\n  debug('started with options %j', options);\n\n  // an object to map a server to its stores\n  server.stores = {};\n\n  // back all memory stores with a db\n  server.db = db.create(options.db);\n\n  // use socket io for a session based realtime channel\n  if (options.socketIo && options.socketIo.sockets) {\n    server.sockets = options.socketIo.sockets;\n  } else {\n    var socketIo = require('socket.io').listen(server, {'log level':0});\n    server.sockets = socketIo.sockets;\n  }\n\n  // persist sessions in a store\n  server.sessions = new SessionStore('sessions', server.db, server.sockets, options.sessions);\n\n  // persist keys in a store\n  server.keys = new Keys();\n\n  server.handleRequest = function handleRequest(req, res) {\n    // dont handle socket.io requests\n    if(req.url.indexOf('/socket.io/') === 0) return;\n    debug('%s %s', req.method, req.url);\n\n    // add utilites to req and res\n    setupReqRes(server.options, req, res, function(err, next) {\n      if(err) return res.end(err.message);\n\n      var authToken, usesBearerAuth = false;\n      if (req.headers && req.headers.authorization) {\n        var parts = req.headers.authorization.split(' ');\n        var scheme = parts[0]\n        , credentials = parts[1];\n\n        if (/^Bearer$/i.test(scheme)) {\n          authToken = credentials;\n          usesBearerAuth = true;\n        }\n      }\n\n      server.sessions.createSession(authToken || req.cookies.get('sid'), function(err, session) {\n\n        if(err) {\n          debug('session error', err, session);\n          throw err;\n        } else {\n          if (!usesBearerAuth) {\n            // (re)set the session id cookie if we're not using Authorization Bearer\n            req.cookies.set('sid', session.sid);\n          }\n          req.session = session;\n\n          var root = req.headers['dpd-ssh-key'] || req.cookies.get('DpdSshKey');\n\n          if (server.options.env === 'development') {\n            if (root) {\n              req.isRoot = true;\n            }\n            server.route(req, res);\n          } else if (root) {\n            // all root requests\n            // must be authenticated\n            debug('authenticating', root);\n            server.keys.get(root, function(err, key) {\n              if(err) throw err;\n              if(key) req.isRoot = true;\n              debug('is root?', session.isRoot);\n              server.route(req, res);\n            });\n          } else {\n            // normal route\n            server.route(req, res);\n          }\n        }\n      });\n    });\n  };\n\n\n  var serverpath = server.options.server_dir || fs.realpathSync('./');\n\n  // mkdir resourcesPath if not exists\n  var resourcesPath = path.join(serverpath, 'resources');\n  // use sync functions, as only run once when server start-up\n  if (!fs.existsSync(resourcesPath)) {\n    fs.mkdirSync(resourcesPath);\n  }\n\n  server.route = function route(req, res) {\n    config.loadConfig(serverpath, server, function(err, resourcesInstances) {\n      if (err) throw err;\n      server.resources = resourcesInstances;\n      var router = server.router = new Router(resourcesInstances, server);\n      router.route(req, res);\n    });\n  };\n\n  // lazy-load OR bootstrap load?\n  // config.loadConfig('./', server, function(err, resourcesInstances) {\n  //     if (err) {\n  //         console.error();\n  //         console.error(\"Error loading resources: \");\n  //         console.error(err.stack || err);\n  //         process.exit(1);\n  //     } else {\n  //         server.resources = resourcesInstances;\n  //         var router = server.router = new Router(resourcesInstances, server);\n  //     }\n  // });\n\n\n  server.on('request:error', function (err, req, res) {\n    console.error();\n    console.error(req.method, req.url, err.stack || err);\n    process.exit(1);\n  });\n\n\n\n\n  /**\n  * Create a new `Store` for persisting data using the database info that was passed to the server when it was created.\n  *\n  * Example:\n  *\n  *     // Attach a store to the server\n  *     var todos = server.createStore('todos');\n  *\n  *     // Use the store to CRUD data\n  *     todos.insert({name: 'go to the store', done: true}, ...); // see `Store` for more info\n  *\n  * @param {String} namespace\n  * @return {Store}\n  */\n  server.createStore = function(namespace) {\n    return (this.stores[namespace] = this.db.createStore(namespace));\n  };\n\n  return server;\n}\n\nmodule.exports = attach;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/clib/ajax.js":"/* Adapted from http://www.quirksmode.org/js/xmlhttp.html */\n\n/*jshint undef:true, browser: true*/\n/*global ActiveXObject:false, console:false, ayepromise:true */\n\n(function() {\n\nfunction parseBody(req) {\n  var header = req.getResponseHeader('Content-Type');\n  if (header === \"application/json\" && req.responseText) {\n    try {\n      return JSON.parse(req.responseText);\n    } catch (ex) {\n      console.error(\"Failed to parse \\\"\" + req.responseText + \"\\\" as JSON\", ex);\n      return req.responseText;\n    }\n  } else {\n    return req.responseText;\n  }\n\n}\n\nfunction sendRequest(url,options) {\n  var req = createXMLHTTPObject();\n  var deferred = ayepromise.defer();\n  if (!req) return Error(\"AJAX is somehow not supported\");\n\n  if (options.query) url += '?' + options.query;\n\n  var data = options.data;\n  var method = options.method || \"GET\";\n  req.open(method,url,true);\n  req.withCredentials = true;\n  // req.setRequestHeader('User-Agent','XMLHTTP/1.0');\n  if (data) {\n    req.setRequestHeader('Content-Type', options.contentType || 'application/json');\n  }\n  req.setRequestHeader('Accept', 'application/json');\n\n  if (typeof sendRequest.headers === 'object') {\n    for (var k in sendRequest.headers) {\n      if (sendRequest.headers.hasOwnProperty(k)) {\n        req.setRequestHeader(k, sendRequest.headers[k]);\n      }\n    }\n  }\n  req.onreadystatechange = function () {\n    if (req.readyState != 4) return;\n    var result = { data: parseBody(req), raw: req };\n    if (req.status != 200 && req.status != 204 && req.status != 304) {\n      if (typeof options.error === 'function') options.error(result);\n      deferred.reject(result);\n      return;\n    }\n    if (typeof options.success === 'function') options.success(result);\n    deferred.resolve(result);\n  };\n  if (req.readyState == 4) return;\n  req.send(data);\n  return deferred.promise;\n}\n\nsendRequest.headers = {};\n\nvar XMLHttpFactories = [\n  function () {return new XMLHttpRequest()},\n  function () {return new ActiveXObject(\"Msxml2.XMLHTTP\")},\n  function () {return new ActiveXObject(\"Msxml3.XMLHTTP\")},\n  function () {return new ActiveXObject(\"Microsoft.XMLHTTP\")},\n  function () {return new XDomainRequest()}\n];\n\nfunction createXMLHTTPObject() {\n  var xmlhttp = false;\n  for (var i=0;i<XMLHttpFactories.length;i++) {\n    try {\n      xmlhttp = XMLHttpFactories[i]();\n    }\n    catch (e) {\n      continue;\n    }\n    break;\n  }\n  return xmlhttp;\n}\n\nif (!window._dpd) window._dpd = {};\nwindow._dpd.ajax = sendRequest;\n\n})();\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/clib/ayepromise.js":"// UMD header\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.ayepromise = factory();\n    }\n}(this, function () {\n    'use strict';\n\n    var ayepromise = {};\n\n    /* Wrap an arbitrary number of functions and allow only one of them to be\n       executed and only once */\n    var once = function () {\n        var wasCalled = false;\n\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n\n    var getThenableIfExists = function (obj) {\n        // Make sure we only access the accessor once as required by the spec\n        var then = obj && obj.then;\n\n        if (typeof obj === \"object\" && typeof then === \"function\") {\n            // Bind function back to it's object (so fan's of 'this' don't get sad)\n            return function() { return then.apply(obj, arguments); };\n        }\n    };\n\n    var aThenHandler = function (onFulfilled, onRejected) {\n        var defer = ayepromise.defer();\n\n        var doHandlerCall = function (func, value) {\n            setTimeout(function () {\n                var returnValue;\n                try {\n                    returnValue = func(value);\n                } catch (e) {\n                    defer.reject(e);\n                    return;\n                }\n\n                if (returnValue === defer.promise) {\n                    defer.reject(new TypeError('Cannot resolve promise with itself'));\n                } else {\n                    defer.resolve(returnValue);\n                }\n            }, 1);\n        };\n\n        var callFulfilled = function (value) {\n            if (onFulfilled && onFulfilled.call) {\n                doHandlerCall(onFulfilled, value);\n            } else {\n                defer.resolve(value);\n            }\n        };\n\n        var callRejected = function (value) {\n            if (onRejected && onRejected.call) {\n                doHandlerCall(onRejected, value);\n            } else {\n                defer.reject(value);\n            }\n        };\n\n        return {\n            promise: defer.promise,\n            handle: function (state, value) {\n                if (state === FULFILLED) {\n                    callFulfilled(value);\n                } else {\n                    callRejected(value);\n                }\n            }\n        };\n    };\n\n    // States\n    var PENDING = 0,\n        FULFILLED = 1,\n        REJECTED = 2;\n\n    ayepromise.defer = function () {\n        var state = PENDING,\n            outcome,\n            thenHandlers = [];\n\n        var doSettle = function (settledState, value) {\n            state = settledState;\n            // persist for handlers registered after settling\n            outcome = value;\n\n            thenHandlers.forEach(function (then) {\n                then.handle(state, outcome);\n            });\n\n            // Discard all references to handlers to be garbage collected\n            thenHandlers = null;\n        };\n\n        var doFulfill = function (value) {\n            doSettle(FULFILLED, value);\n        };\n\n        var doReject = function (error) {\n            doSettle(REJECTED, error);\n        };\n\n        var registerThenHandler = function (onFulfilled, onRejected) {\n            var thenHandler = aThenHandler(onFulfilled, onRejected);\n\n            if (state === PENDING) {\n                thenHandlers.push(thenHandler);\n            } else {\n                thenHandler.handle(state, outcome);\n            }\n\n            return thenHandler.promise;\n        };\n\n        var safelyResolveThenable = function (thenable) {\n            // Either fulfill, reject or reject with error\n            var onceWrapper = once();\n            try {\n                thenable(\n                    onceWrapper(transparentlyResolveThenablesAndSettle),\n                    onceWrapper(doReject)\n                );\n            } catch (e) {\n                onceWrapper(doReject)(e);\n            }\n        };\n\n        var transparentlyResolveThenablesAndSettle = function (value) {\n            var thenable;\n\n            try {\n                thenable = getThenableIfExists(value);\n            } catch (e) {\n                doReject(e);\n                return;\n            }\n\n            if (thenable) {\n                safelyResolveThenable(thenable);\n            } else {\n                doFulfill(value);\n            }\n        };\n\n        var onceWrapper = once();\n        return {\n            resolve: onceWrapper(transparentlyResolveThenablesAndSettle),\n            reject: onceWrapper(doReject),\n            promise: {\n                then: registerThenHandler,\n                fail: function (onRejected) {\n                    return registerThenHandler(null, onRejected);\n                }\n            }\n        };\n    };\n\n    return ayepromise;\n}));\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/clib/dpd.js":"(function (undefined) {\n\n  if (!window._dpd) window._dpd = {};\n\n  var root = null;\n\n  var consoleLog = (typeof console !== 'undefined') && console.log;\n\n  var socket;\n\n  var BASE_URL = '/';\n\n  function normalizeArray(parts, allowAboveRoot) {\n    // if the path tries to go above the root, `up` ends up > 0\n    var up = 0;\n    for (var i = parts.length - 1; i >= 0; i--) {\n      var last = parts[i];\n      if (last == '.') {\n        parts.splice(i, 1);\n      } else if (last === '..') {\n        parts.splice(i, 1);\n        up++;\n      } else if (up) {\n        parts.splice(i, 1);\n        up--;\n      }\n    }\n\n    // if the path is allowed to go above the root, restore leading ..\n    if (allowAboveRoot) {\n      for (; up--; up) {\n        parts.unshift('..');\n      }\n    }\n\n    return parts;\n  }\n\n  function filterArray(list, fn) {\n    if (Array.prototype.filter) return Array.prototype.filter.call(list, fn);\n    var newList = [];\n    for (var i = 0; i < list.length; i++) {\n      if (fn(list[i])) {\n        newList.push(list[i]);\n      }\n    }\n    return newList;\n  }\n\n  function joinPath() {\n    var paths = Array.prototype.slice.call(arguments, 0);\n    paths = paths.join('/').split('/');\n    return '/' + filterArray(paths, function(p, index) {\n      return p && typeof p === 'string';\n    }).join('/');\n  }\n\n  function isComplex(obj) {\n    if (obj) {\n      for (var k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          if (typeof obj[k] !== 'string') {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function createQueryString(query) {\n    var parts = [];\n    for (var k in query) {\n      if (query.hasOwnProperty(k)) {\n        parts.push(encodeURIComponent(k) + \"=\" + encodeURIComponent(query[k]));\n      }\n    }\n    return parts.join('&');\n  }\n\n  function encodeIfComplex(query) {\n    if (isComplex(query)) {\n      return encodeURIComponent(JSON.stringify(query));\n    } else if (query) {\n      return createQueryString(query);\n    }\n  }\n\n  function returnSuccess(fn) {\n    return function(data) {\n      if (fn === consoleLog) return console.log(data);\n      if (typeof fn === 'function') fn(data);\n    };\n  }\n\n  function returnError(fn) {\n    return function(data) {\n      if (fn === consoleLog) return console.error(data);\n      if (typeof fn === 'function') fn(null, data);\n    };\n  }\n\n  function unwrapPromise(promise, fn) {\n    return promise\n    .then(function (res) {\n      var sessionId = res.raw.getResponseHeader(\"X-Session-Token\");\n      if (sessionId) {\n        window.dpd.setSessionId(sessionId);\n      }\n      return res;\n    })\n    .then(function (res) {\n      returnSuccess(fn)(res.data);\n      return res.data;\n    })\n    .fail(function (err) {\n      returnError(fn)(err.data);\n      throw err.data;\n    });\n  }\n\n  var baseMethods = {\n    get: function(options, fn) {\n      var query = encodeIfComplex(options.query);\n\n      return unwrapPromise(_dpd.ajax(root + joinPath(BASE_URL, options.path), {\n          method: \"GET\"\n        , query: query\n      }), fn);\n    }\n    , del: function(options, fn) {\n      var query = encodeIfComplex(options.query);\n\n      return unwrapPromise(_dpd.ajax(root + joinPath(BASE_URL, options.path), {\n          method: \"DELETE\"\n        , query: query\n      }), fn);\n    }\n    , requestWithBody: function(method, options, fn) {\n      var query = encodeIfComplex(options.query);\n      if (query) query = '?' + query;\n      else query = '';\n\n      return unwrapPromise(_dpd.ajax(root + joinPath(BASE_URL, options.path) + query, {\n          method: method\n        , contentType: options.body && \"application/json\"\n        , data: JSON.stringify(options.body || {}) || \"{}\" })\n      , fn);\n    }\n  };\n\n  baseMethods.post = function(options, fn) {\n    return baseMethods.requestWithBody(\"POST\", options, fn);\n  };\n\n  baseMethods.put = function(options, fn) {\n    return baseMethods.requestWithBody(\"PUT\", options, fn);\n  };\n\n  function isString(arg) {\n    return typeof arg === 'string' || typeof arg === 'number';\n  }\n\n  function toString(arg) {\n    return arg ? arg.toString() : null;\n  }\n\n  function parseGetSignature(args) {\n    var settings = {}\n      , i = 0;\n\n    // path/func\n    if (isString(args[i]) || !args[i]) {\n      settings.path = toString(args[i]);\n      i++;\n    }\n\n    // join path to func\n    if (isString(args[i]) || !args[i]) {\n      settings.path = joinPath(settings.path, toString(args[i]));\n      i++;\n    }\n\n    // query\n    if (args[i] !== consoleLog && typeof args[i] === 'object' || !args[i]) { // IE considers console.log to be an object.\n      settings.query = args[i];\n      i++;\n    }\n\n    if (typeof args[i] === 'function' || args[i] === consoleLog) {\n      settings.fn = args[i];\n    }\n\n    return settings;\n  }\n\n  function parsePostSignature(args) {\n    var settings = {}\n      , i = 0;\n\n    //path\n    if (isString(args[i]) || !args[i]) {\n      settings.path = toString(args[i]);\n      i++;\n    }\n\n    // body\n    if (args[i] !== consoleLog && typeof args[i] === 'object' || !args[i]) {\n      settings.body = args[i];\n      i++;\n    }\n\n    // query - if this exists the LAST obj was query and the new one is body\n    if (args[i] !== consoleLog && typeof args[i] === 'object') {\n      settings.query = settings.body;\n      settings.body = args[i];\n      i++;\n    }\n\n    if (typeof args[i] === 'function' || args[i] === consoleLog) {\n      settings.fn = args[i];\n    }\n\n    return settings;\n  }\n\n  window.dpd = function(resource) {\n\n    var r = {\n      get: function(func, path, query, fn) {\n        var settings = parseGetSignature(arguments);\n        settings.path = joinPath(resource, settings.path);\n\n        return baseMethods.get(settings, settings.fn);\n      }\n      , post: function(path, query, body, fn) {\n        var settings = parsePostSignature(arguments);\n        settings.path = joinPath(resource, settings.path);\n\n        return baseMethods.post(settings, settings.fn);\n      }\n      , put: function(path, query, body, fn) {\n        var settings = parsePostSignature(arguments);\n        settings.path = joinPath(resource, settings.path);\n\n        return baseMethods.put(settings, settings.fn);\n      }, del: function(path, query, fn) {\n        var settings = parseGetSignature(arguments);\n        settings.path = joinPath(resource, settings.path);\n\n        return baseMethods.del(settings, settings.fn);\n      }\n    };\n\n    r.exec = function(func, path, body, fn) {\n      var settings = {}\n        , i = 0;\n\n      settings.func = arguments[i];\n      i++;\n\n      // path\n      if (isString(arguments[i])) {\n        settings.path = arguments[i];\n        i++;\n      }\n\n      // body\n      if (typeof arguments[i] === 'object') {\n        settings.body = arguments[i];\n        i++;\n      }\n\n      fn = arguments[i];\n\n      settings.path = joinPath(resource, settings.func, settings.path);\n      return baseMethods.post(settings, fn);\n    };\n\n    return r;\n  };\n\n  function getBaseUrl(){\n    return root + BASE_URL;\n  }\n\n  function setBaseUrl(options) {\n    var oldRoot = root;\n\n    options = options || {};\n    if (typeof options === \"string\") {\n      // TODO: may need to parse the url to get the domain for socket\n      root = options;\n    } else {\n      if (options.hostname) {\n        root = (options.protocol||location.protocol) + '//' + options.hostname;\n        var port = options.port || location.port;\n        if (port) {\n          root += ':' + port;\n        }\n      } else {\n        var element = document.currentScript;\n        if (!element) {\n          element = document.querySelector('script[src$=\"dpd.js\"]');\n        }\n        if (element) {\n          var src = element.src || '';\n          var m = /((\\w+:)?\\/\\/(.+):?(\\d+)?)\\//.exec(src);\n          if (m) {\n            root = m[1];\n          }\n        }\n      }\n    }\n\n    if (!root && location.hostname) {\n      root = location.protocol + '//' + location.hostname;\n      if (location.port) {\n        root += ':' + location.port;\n      }\n    }\n    if (root !== oldRoot) {\n      if (socket && socket.io) {\n        // disconnect socket if we're changing url\n        socket.io.disconnect();\n      }\n      socket = null;\n      window.dpd.socket = null;\n    }\n  }\n\n  var _sessionId;\n\n  function checkAndConnectSocketIO() {\n    if (!socket) {\n      socket = io.connect(root);\n      window.dpd.socket = socket;\n      window.dpd.once('connect', function() {\n        isSocketReady = true;\n      });\n      window.dpd.on('reconnect', function(){\n        if (_sessionId) window.dpd.setSessionId(_sessionId, true);\n      });\n    }\n  }\n\n  window.dpd.setBaseUrl = setBaseUrl;\n  window.dpd.getBaseUrl = getBaseUrl;\n\n  window.dpd.setSessionId = function (sessionId, force) {\n    if (force || (sessionId != _sessionId)) {\n      window.dpd.socketReady(function (){\n        window.dpd.socket.emit('server:setSession', { sid: sessionId });\n        _sessionId = sessionId;\n      });\n    }\n  };\n\n  window.dpd.on = function() {\n    checkAndConnectSocketIO();\n    socket.on.apply(socket, arguments);\n  };\n\n  window.dpd.once = function(name, fn) {\n    checkAndConnectSocketIO();\n    var _fn = function() {\n      socket.removeListener(name, _fn);\n      fn.apply(this, arguments);\n    };\n    socket.on(name, _fn);\n  };\n\n  window.dpd.off = function(name, fn) {\n    checkAndConnectSocketIO();\n    if (fn == null) {\n      socket.removeAllListeners(name);\n    } else {\n      socket.removeListener(name, fn);\n    }\n  };\n\n  var isSocketReady = false;\n\n  window.dpd.socketReady = function(fn) {\n    checkAndConnectSocketIO();\n    if (isSocketReady) {\n      setTimeout(fn, 0);\n    } else {\n      window.dpd.once('connect', fn);\n    }\n  };\n\n  setBaseUrl();\n})();\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/clib/socket.io.js":"!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.io=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\nmodule.exports = _dereq_('./lib/');\n\n},{\"./lib/\":2}],2:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar url = _dereq_('./url');\nvar parser = _dereq_('socket.io-parser');\nvar Manager = _dereq_('./manager');\nvar debug = _dereq_('debug')('socket.io-client');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = lookup;\n\n/**\n * Managers cache.\n */\n\nvar cache = exports.managers = {};\n\n/**\n * Looks up an existing `Manager` for multiplexing.\n * If the user summons:\n *\n *   `io('http://localhost/a');`\n *   `io('http://localhost/b');`\n *\n * We reuse the existing instance based on same scheme/port/host,\n * and we initialize sockets for each namespace.\n *\n * @api public\n */\n\nfunction lookup(uri, opts) {\n  if (typeof uri == 'object') {\n    opts = uri;\n    uri = undefined;\n  }\n\n  opts = opts || {};\n\n  var parsed = url(uri);\n  var source = parsed.source;\n  var id = parsed.id;\n  var path = parsed.path;\n  var sameNamespace = (cache[id] && cache[id].nsps[path] &&\n                       path == cache[id].nsps[path].nsp);\n  var newConnection = opts.forceNew || opts['force new connection'] ||\n                      false === opts.multiplex || sameNamespace;\n\n  var io;\n\n  if (newConnection) {\n    debug('ignoring socket cache for %s', source);\n    io = Manager(source, opts);\n  } else {\n    if (!cache[id]) {\n      debug('new io instance for %s', source);\n      cache[id] = Manager(source, opts);\n    }\n    io = cache[id];\n  }\n\n  return io.socket(parsed.path);\n}\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = parser.protocol;\n\n/**\n * `connect`.\n *\n * @param {String} uri\n * @api public\n */\n\nexports.connect = lookup;\n\n/**\n * Expose constructors for standalone build.\n *\n * @api public\n */\n\nexports.Manager = _dereq_('./manager');\nexports.Socket = _dereq_('./socket');\n\n},{\"./manager\":3,\"./socket\":5,\"./url\":6,\"debug\":10,\"socket.io-parser\":44}],3:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar url = _dereq_('./url');\nvar eio = _dereq_('engine.io-client');\nvar Socket = _dereq_('./socket');\nvar Emitter = _dereq_('component-emitter');\nvar parser = _dereq_('socket.io-parser');\nvar on = _dereq_('./on');\nvar bind = _dereq_('component-bind');\nvar object = _dereq_('object-component');\nvar debug = _dereq_('debug')('socket.io-client:manager');\nvar indexOf = _dereq_('indexof');\nvar Backoff = _dereq_('backo2');\n\n/**\n * Module exports\n */\n\nmodule.exports = Manager;\n\n/**\n * `Manager` constructor.\n *\n * @param {String} engine instance or engine uri/opts\n * @param {Object} options\n * @api public\n */\n\nfunction Manager(uri, opts){\n  if (!(this instanceof Manager)) return new Manager(uri, opts);\n  if (uri && ('object' == typeof uri)) {\n    opts = uri;\n    uri = undefined;\n  }\n  opts = opts || {};\n\n  opts.path = opts.path || '/socket.io';\n  this.nsps = {};\n  this.subs = [];\n  this.opts = opts;\n  this.reconnection(opts.reconnection !== false);\n  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n  this.reconnectionDelay(opts.reconnectionDelay || 1000);\n  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n  this.randomizationFactor(opts.randomizationFactor || 0.5);\n  this.backoff = new Backoff({\n    min: this.reconnectionDelay(),\n    max: this.reconnectionDelayMax(),\n    jitter: this.randomizationFactor()\n  });\n  this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n  this.readyState = 'closed';\n  this.uri = uri;\n  this.connected = [];\n  this.encoding = false;\n  this.packetBuffer = [];\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n  this.autoConnect = opts.autoConnect !== false;\n  if (this.autoConnect) this.open();\n}\n\n/**\n * Propagate given event to sockets and emit on `this`\n *\n * @api private\n */\n\nManager.prototype.emitAll = function() {\n  this.emit.apply(this, arguments);\n  for (var nsp in this.nsps) {\n    this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);\n  }\n};\n\n/**\n * Update `socket.id` of all sockets\n *\n * @api private\n */\n\nManager.prototype.updateSocketIds = function(){\n  for (var nsp in this.nsps) {\n    this.nsps[nsp].id = this.engine.id;\n  }\n};\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Manager.prototype);\n\n/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnection = function(v){\n  if (!arguments.length) return this._reconnection;\n  this._reconnection = !!v;\n  return this;\n};\n\n/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} max reconnection attempts before giving up\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionAttempts = function(v){\n  if (!arguments.length) return this._reconnectionAttempts;\n  this._reconnectionAttempts = v;\n  return this;\n};\n\n/**\n * Sets the delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelay = function(v){\n  if (!arguments.length) return this._reconnectionDelay;\n  this._reconnectionDelay = v;\n  this.backoff && this.backoff.setMin(v);\n  return this;\n};\n\nManager.prototype.randomizationFactor = function(v){\n  if (!arguments.length) return this._randomizationFactor;\n  this._randomizationFactor = v;\n  this.backoff && this.backoff.setJitter(v);\n  return this;\n};\n\n/**\n * Sets the maximum delay between reconnections.\n *\n * @param {Number} delay\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.reconnectionDelayMax = function(v){\n  if (!arguments.length) return this._reconnectionDelayMax;\n  this._reconnectionDelayMax = v;\n  this.backoff && this.backoff.setMax(v);\n  return this;\n};\n\n/**\n * Sets the connection timeout. `false` to disable\n *\n * @return {Manager} self or value\n * @api public\n */\n\nManager.prototype.timeout = function(v){\n  if (!arguments.length) return this._timeout;\n  this._timeout = v;\n  return this;\n};\n\n/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @api private\n */\n\nManager.prototype.maybeReconnectOnOpen = function() {\n  // Only try to reconnect if it's the first time we're connecting\n  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {\n    // keeps reconnection from firing twice for the same reconnection loop\n    this.reconnect();\n  }\n};\n\n\n/**\n * Sets the current transport `socket`.\n *\n * @param {Function} optional, callback\n * @return {Manager} self\n * @api public\n */\n\nManager.prototype.open =\nManager.prototype.connect = function(fn){\n  debug('readyState %s', this.readyState);\n  if (~this.readyState.indexOf('open')) return this;\n\n  debug('opening %s', this.uri);\n  this.engine = eio(this.uri, this.opts);\n  var socket = this.engine;\n  var self = this;\n  this.readyState = 'opening';\n  this.skipReconnect = false;\n\n  // emit `open`\n  var openSub = on(socket, 'open', function() {\n    self.onopen();\n    fn && fn();\n  });\n\n  // emit `connect_error`\n  var errorSub = on(socket, 'error', function(data){\n    debug('connect_error');\n    self.cleanup();\n    self.readyState = 'closed';\n    self.emitAll('connect_error', data);\n    if (fn) {\n      var err = new Error('Connection error');\n      err.data = data;\n      fn(err);\n    } else {\n      // Only do this if there is no fn to handle the error\n      self.maybeReconnectOnOpen();\n    }\n  });\n\n  // emit `connect_timeout`\n  if (false !== this._timeout) {\n    var timeout = this._timeout;\n    debug('connect attempt will timeout after %d', timeout);\n\n    // set timer\n    var timer = setTimeout(function(){\n      debug('connect attempt timed out after %d', timeout);\n      openSub.destroy();\n      socket.close();\n      socket.emit('error', 'timeout');\n      self.emitAll('connect_timeout', timeout);\n    }, timeout);\n\n    this.subs.push({\n      destroy: function(){\n        clearTimeout(timer);\n      }\n    });\n  }\n\n  this.subs.push(openSub);\n  this.subs.push(errorSub);\n\n  return this;\n};\n\n/**\n * Called upon transport open.\n *\n * @api private\n */\n\nManager.prototype.onopen = function(){\n  debug('open');\n\n  // clear old subs\n  this.cleanup();\n\n  // mark as open\n  this.readyState = 'open';\n  this.emit('open');\n\n  // add new subs\n  var socket = this.engine;\n  this.subs.push(on(socket, 'data', bind(this, 'ondata')));\n  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));\n  this.subs.push(on(socket, 'error', bind(this, 'onerror')));\n  this.subs.push(on(socket, 'close', bind(this, 'onclose')));\n};\n\n/**\n * Called with data.\n *\n * @api private\n */\n\nManager.prototype.ondata = function(data){\n  this.decoder.add(data);\n};\n\n/**\n * Called when parser fully decodes a packet.\n *\n * @api private\n */\n\nManager.prototype.ondecoded = function(packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon socket error.\n *\n * @api private\n */\n\nManager.prototype.onerror = function(err){\n  debug('error', err);\n  this.emitAll('error', err);\n};\n\n/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @api public\n */\n\nManager.prototype.socket = function(nsp){\n  var socket = this.nsps[nsp];\n  if (!socket) {\n    socket = new Socket(this, nsp);\n    this.nsps[nsp] = socket;\n    var self = this;\n    socket.on('connect', function(){\n      socket.id = self.engine.id;\n      if (!~indexOf(self.connected, socket)) {\n        self.connected.push(socket);\n      }\n    });\n  }\n  return socket;\n};\n\n/**\n * Called upon a socket close.\n *\n * @param {Socket} socket\n */\n\nManager.prototype.destroy = function(socket){\n  var index = indexOf(this.connected, socket);\n  if (~index) this.connected.splice(index, 1);\n  if (this.connected.length) return;\n\n  this.close();\n};\n\n/**\n * Writes a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nManager.prototype.packet = function(packet){\n  debug('writing packet %j', packet);\n  var self = this;\n\n  if (!self.encoding) {\n    // encode, then write to engine with result\n    self.encoding = true;\n    this.encoder.encode(packet, function(encodedPackets) {\n      for (var i = 0; i < encodedPackets.length; i++) {\n        self.engine.write(encodedPackets[i]);\n      }\n      self.encoding = false;\n      self.processPacketQueue();\n    });\n  } else { // add packet to the queue\n    self.packetBuffer.push(packet);\n  }\n};\n\n/**\n * If packet buffer is non-empty, begins encoding the\n * next packet in line.\n *\n * @api private\n */\n\nManager.prototype.processPacketQueue = function() {\n  if (this.packetBuffer.length > 0 && !this.encoding) {\n    var pack = this.packetBuffer.shift();\n    this.packet(pack);\n  }\n};\n\n/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @api private\n */\n\nManager.prototype.cleanup = function(){\n  var sub;\n  while (sub = this.subs.shift()) sub.destroy();\n\n  this.packetBuffer = [];\n  this.encoding = false;\n\n  this.decoder.destroy();\n};\n\n/**\n * Close the current socket.\n *\n * @api private\n */\n\nManager.prototype.close =\nManager.prototype.disconnect = function(){\n  this.skipReconnect = true;\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.engine && this.engine.close();\n};\n\n/**\n * Called upon engine close.\n *\n * @api private\n */\n\nManager.prototype.onclose = function(reason){\n  debug('close');\n  this.cleanup();\n  this.backoff.reset();\n  this.readyState = 'closed';\n  this.emit('close', reason);\n  if (this._reconnection && !this.skipReconnect) {\n    this.reconnect();\n  }\n};\n\n/**\n * Attempt a reconnection.\n *\n * @api private\n */\n\nManager.prototype.reconnect = function(){\n  if (this.reconnecting || this.skipReconnect) return this;\n\n  var self = this;\n\n  if (this.backoff.attempts >= this._reconnectionAttempts) {\n    debug('reconnect failed');\n    this.backoff.reset();\n    this.emitAll('reconnect_failed');\n    this.reconnecting = false;\n  } else {\n    var delay = this.backoff.duration();\n    debug('will wait %dms before reconnect attempt', delay);\n\n    this.reconnecting = true;\n    var timer = setTimeout(function(){\n      if (self.skipReconnect) return;\n\n      debug('attempting reconnect');\n      self.emitAll('reconnect_attempt', self.backoff.attempts);\n      self.emitAll('reconnecting', self.backoff.attempts);\n\n      // check again for the case socket closed in above events\n      if (self.skipReconnect) return;\n\n      self.open(function(err){\n        if (err) {\n          debug('reconnect attempt error');\n          self.reconnecting = false;\n          self.reconnect();\n          self.emitAll('reconnect_error', err.data);\n        } else {\n          debug('reconnect success');\n          self.onreconnect();\n        }\n      });\n    }, delay);\n\n    this.subs.push({\n      destroy: function(){\n        clearTimeout(timer);\n      }\n    });\n  }\n};\n\n/**\n * Called upon successful reconnect.\n *\n * @api private\n */\n\nManager.prototype.onreconnect = function(){\n  var attempt = this.backoff.attempts;\n  this.reconnecting = false;\n  this.backoff.reset();\n  this.updateSocketIds();\n  this.emitAll('reconnect', attempt);\n};\n\n},{\"./on\":4,\"./socket\":5,\"./url\":6,\"backo2\":7,\"component-bind\":8,\"component-emitter\":9,\"debug\":10,\"engine.io-client\":11,\"indexof\":40,\"object-component\":41,\"socket.io-parser\":44}],4:[function(_dereq_,module,exports){\n\n/**\n * Module exports.\n */\n\nmodule.exports = on;\n\n/**\n * Helper for subscriptions.\n *\n * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n * @param {String} event name\n * @param {Function} callback\n * @api public\n */\n\nfunction on(obj, ev, fn) {\n  obj.on(ev, fn);\n  return {\n    destroy: function(){\n      obj.removeListener(ev, fn);\n    }\n  };\n}\n\n},{}],5:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar parser = _dereq_('socket.io-parser');\nvar Emitter = _dereq_('component-emitter');\nvar toArray = _dereq_('to-array');\nvar on = _dereq_('./on');\nvar bind = _dereq_('component-bind');\nvar debug = _dereq_('debug')('socket.io-client:socket');\nvar hasBin = _dereq_('has-binary');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = Socket;\n\n/**\n * Internal events (blacklisted).\n * These events can't be emitted by the user.\n *\n * @api private\n */\n\nvar events = {\n  connect: 1,\n  connect_error: 1,\n  connect_timeout: 1,\n  disconnect: 1,\n  error: 1,\n  reconnect: 1,\n  reconnect_attempt: 1,\n  reconnect_failed: 1,\n  reconnect_error: 1,\n  reconnecting: 1\n};\n\n/**\n * Shortcut to `Emitter#emit`.\n */\n\nvar emit = Emitter.prototype.emit;\n\n/**\n * `Socket` constructor.\n *\n * @api public\n */\n\nfunction Socket(io, nsp){\n  this.io = io;\n  this.nsp = nsp;\n  this.json = this; // compat\n  this.ids = 0;\n  this.acks = {};\n  if (this.io.autoConnect) this.open();\n  this.receiveBuffer = [];\n  this.sendBuffer = [];\n  this.connected = false;\n  this.disconnected = true;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Subscribe to open, close and packet events\n *\n * @api private\n */\n\nSocket.prototype.subEvents = function() {\n  if (this.subs) return;\n\n  var io = this.io;\n  this.subs = [\n    on(io, 'open', bind(this, 'onopen')),\n    on(io, 'packet', bind(this, 'onpacket')),\n    on(io, 'close', bind(this, 'onclose'))\n  ];\n};\n\n/**\n * \"Opens\" the socket.\n *\n * @api public\n */\n\nSocket.prototype.open =\nSocket.prototype.connect = function(){\n  if (this.connected) return this;\n\n  this.subEvents();\n  this.io.open(); // ensure open\n  if ('open' == this.io.readyState) this.onopen();\n  return this;\n};\n\n/**\n * Sends a `message` event.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.send = function(){\n  var args = toArray(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n\n/**\n * Override `emit`.\n * If the event is in `events`, it's emitted normally.\n *\n * @param {String} event name\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.emit = function(ev){\n  if (events.hasOwnProperty(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n\n  var args = toArray(arguments);\n  var parserType = parser.EVENT; // default\n  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary\n  var packet = { type: parserType, data: args };\n\n  // event ack callback\n  if ('function' == typeof args[args.length - 1]) {\n    debug('emitting packet with ack id %d', this.ids);\n    this.acks[this.ids] = args.pop();\n    packet.id = this.ids++;\n  }\n\n  if (this.connected) {\n    this.packet(packet);\n  } else {\n    this.sendBuffer.push(packet);\n  }\n\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.packet = function(packet){\n  packet.nsp = this.nsp;\n  this.io.packet(packet);\n};\n\n/**\n * Called upon engine `open`.\n *\n * @api private\n */\n\nSocket.prototype.onopen = function(){\n  debug('transport is open - connecting');\n\n  // write connect packet if necessary\n  if ('/' != this.nsp) {\n    this.packet({ type: parser.CONNECT });\n  }\n};\n\n/**\n * Called upon engine `close`.\n *\n * @param {String} reason\n * @api private\n */\n\nSocket.prototype.onclose = function(reason){\n  debug('close (%s)', reason);\n  this.connected = false;\n  this.disconnected = true;\n  delete this.id;\n  this.emit('disconnect', reason);\n};\n\n/**\n * Called with socket packet.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onpacket = function(packet){\n  if (packet.nsp != this.nsp) return;\n\n  switch (packet.type) {\n    case parser.CONNECT:\n      this.onconnect();\n      break;\n\n    case parser.EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.BINARY_EVENT:\n      this.onevent(packet);\n      break;\n\n    case parser.ACK:\n      this.onack(packet);\n      break;\n\n    case parser.BINARY_ACK:\n      this.onack(packet);\n      break;\n\n    case parser.DISCONNECT:\n      this.ondisconnect();\n      break;\n\n    case parser.ERROR:\n      this.emit('error', packet.data);\n      break;\n  }\n};\n\n/**\n * Called upon a server event.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onevent = function(packet){\n  var args = packet.data || [];\n  debug('emitting event %j', args);\n\n  if (null != packet.id) {\n    debug('attaching ack callback to event');\n    args.push(this.ack(packet.id));\n  }\n\n  if (this.connected) {\n    emit.apply(this, args);\n  } else {\n    this.receiveBuffer.push(args);\n  }\n};\n\n/**\n * Produces an ack callback to emit with an event.\n *\n * @api private\n */\n\nSocket.prototype.ack = function(id){\n  var self = this;\n  var sent = false;\n  return function(){\n    // prevent double callbacks\n    if (sent) return;\n    sent = true;\n    var args = toArray(arguments);\n    debug('sending ack %j', args);\n\n    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;\n    self.packet({\n      type: type,\n      id: id,\n      data: args\n    });\n  };\n};\n\n/**\n * Called upon a server acknowlegement.\n *\n * @param {Object} packet\n * @api private\n */\n\nSocket.prototype.onack = function(packet){\n  debug('calling ack %s with %j', packet.id, packet.data);\n  var fn = this.acks[packet.id];\n  fn.apply(this, packet.data);\n  delete this.acks[packet.id];\n};\n\n/**\n * Called upon server connect.\n *\n * @api private\n */\n\nSocket.prototype.onconnect = function(){\n  this.connected = true;\n  this.disconnected = false;\n  this.emit('connect');\n  this.emitBuffered();\n};\n\n/**\n * Emit buffered events (received and emitted).\n *\n * @api private\n */\n\nSocket.prototype.emitBuffered = function(){\n  var i;\n  for (i = 0; i < this.receiveBuffer.length; i++) {\n    emit.apply(this, this.receiveBuffer[i]);\n  }\n  this.receiveBuffer = [];\n\n  for (i = 0; i < this.sendBuffer.length; i++) {\n    this.packet(this.sendBuffer[i]);\n  }\n  this.sendBuffer = [];\n};\n\n/**\n * Called upon server disconnect.\n *\n * @api private\n */\n\nSocket.prototype.ondisconnect = function(){\n  debug('server disconnect (%s)', this.nsp);\n  this.destroy();\n  this.onclose('io server disconnect');\n};\n\n/**\n * Called upon forced client/server side disconnections,\n * this method ensures the manager stops tracking us and\n * that reconnections don't get triggered for this.\n *\n * @api private.\n */\n\nSocket.prototype.destroy = function(){\n  if (this.subs) {\n    // clean subscriptions to avoid reconnections\n    for (var i = 0; i < this.subs.length; i++) {\n      this.subs[i].destroy();\n    }\n    this.subs = null;\n  }\n\n  this.io.destroy(this);\n};\n\n/**\n * Disconnects the socket manually.\n *\n * @return {Socket} self\n * @api public\n */\n\nSocket.prototype.close =\nSocket.prototype.disconnect = function(){\n  if (this.connected) {\n    debug('performing disconnect (%s)', this.nsp);\n    this.packet({ type: parser.DISCONNECT });\n  }\n\n  // remove socket from pool\n  this.destroy();\n\n  if (this.connected) {\n    // fire events\n    this.onclose('io client disconnect');\n  }\n  return this;\n};\n\n},{\"./on\":4,\"component-bind\":8,\"component-emitter\":9,\"debug\":10,\"has-binary\":36,\"socket.io-parser\":44,\"to-array\":48}],6:[function(_dereq_,module,exports){\n(function (global){\n\n/**\n * Module dependencies.\n */\n\nvar parseuri = _dereq_('parseuri');\nvar debug = _dereq_('debug')('socket.io-client:url');\n\n/**\n * Module exports.\n */\n\nmodule.exports = url;\n\n/**\n * URL parser.\n *\n * @param {String} url\n * @param {Object} An object meant to mimic window.location.\n *                 Defaults to window.location.\n * @api public\n */\n\nfunction url(uri, loc){\n  var obj = uri;\n\n  // default to window.location\n  var loc = loc || global.location;\n  if (null == uri) uri = loc.protocol + '//' + loc.host;\n\n  // relative path support\n  if ('string' == typeof uri) {\n    if ('/' == uri.charAt(0)) {\n      if ('/' == uri.charAt(1)) {\n        uri = loc.protocol + uri;\n      } else {\n        uri = loc.hostname + uri;\n      }\n    }\n\n    if (!/^(https?|wss?):\\/\\//.test(uri)) {\n      debug('protocol-less url %s', uri);\n      if ('undefined' != typeof loc) {\n        uri = loc.protocol + '//' + uri;\n      } else {\n        uri = 'https://' + uri;\n      }\n    }\n\n    // parse\n    debug('parse %s', uri);\n    obj = parseuri(uri);\n  }\n\n  // make sure we treat `localhost:80` and `localhost` equally\n  if (!obj.port) {\n    if (/^(http|ws)$/.test(obj.protocol)) {\n      obj.port = '80';\n    }\n    else if (/^(http|ws)s$/.test(obj.protocol)) {\n      obj.port = '443';\n    }\n  }\n\n  obj.path = obj.path || '/';\n\n  // define unique id\n  obj.id = obj.protocol + '://' + obj.host + ':' + obj.port;\n  // define href\n  obj.href = obj.protocol + '://' + obj.host + (loc && loc.port == obj.port ? '' : (':' + obj.port));\n\n  return obj;\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"debug\":10,\"parseuri\":42}],7:[function(_dereq_,module,exports){\n\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n\n},{}],8:[function(_dereq_,module,exports){\n/**\n * Slice reference.\n */\n\nvar slice = [].slice;\n\n/**\n * Bind `obj` to `fn`.\n *\n * @param {Object} obj\n * @param {Function|String} fn or string\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(obj, fn){\n  if ('string' == typeof fn) fn = obj[fn];\n  if ('function' != typeof fn) throw new Error('bind() requires a function');\n  var args = slice.call(arguments, 2);\n  return function(){\n    return fn.apply(obj, args.concat(slice.call(arguments)));\n  }\n};\n\n},{}],9:[function(_dereq_,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n},{}],10:[function(_dereq_,module,exports){\n\n/**\n * Expose `debug()` as the module.\n */\n\nmodule.exports = debug;\n\n/**\n * Create a debugger with the given `name`.\n *\n * @param {String} name\n * @return {Type}\n * @api public\n */\n\nfunction debug(name) {\n  if (!debug.enabled(name)) return function(){};\n\n  return function(fmt){\n    fmt = coerce(fmt);\n\n    var curr = new Date;\n    var ms = curr - (debug[name] || curr);\n    debug[name] = curr;\n\n    fmt = name\n      + ' '\n      + fmt\n      + ' +' + debug.humanize(ms);\n\n    // This hackery is required for IE8\n    // where `console.log` doesn't have 'apply'\n    window.console\n      && console.log\n      && Function.prototype.apply.call(console.log, console, arguments);\n  }\n}\n\n/**\n * The currently active debug mode names.\n */\n\ndebug.names = [];\ndebug.skips = [];\n\n/**\n * Enables a debug mode by name. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} name\n * @api public\n */\n\ndebug.enable = function(name) {\n  try {\n    localStorage.debug = name;\n  } catch(e){}\n\n  var split = (name || '').split(/[\\s,]+/)\n    , len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    name = split[i].replace('*', '.*?');\n    if (name[0] === '-') {\n      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));\n    }\n    else {\n      debug.names.push(new RegExp('^' + name + '$'));\n    }\n  }\n};\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\ndebug.disable = function(){\n  debug.enable('');\n};\n\n/**\n * Humanize the given `ms`.\n *\n * @param {Number} m\n * @return {String}\n * @api private\n */\n\ndebug.humanize = function(ms) {\n  var sec = 1000\n    , min = 60 * 1000\n    , hour = 60 * min;\n\n  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';\n  if (ms >= min) return (ms / min).toFixed(1) + 'm';\n  if (ms >= sec) return (ms / sec | 0) + 's';\n  return ms + 'ms';\n};\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\ndebug.enabled = function(name) {\n  for (var i = 0, len = debug.skips.length; i < len; i++) {\n    if (debug.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (var i = 0, len = debug.names.length; i < len; i++) {\n    if (debug.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Coerce `val`.\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n// persist\n\ntry {\n  if (window.localStorage) debug.enable(localStorage.debug);\n} catch(e){}\n\n},{}],11:[function(_dereq_,module,exports){\n\nmodule.exports =  _dereq_('./lib/');\n\n},{\"./lib/\":12}],12:[function(_dereq_,module,exports){\n\nmodule.exports = _dereq_('./socket');\n\n/**\n * Exports parser\n *\n * @api public\n *\n */\nmodule.exports.parser = _dereq_('engine.io-parser');\n\n},{\"./socket\":13,\"engine.io-parser\":25}],13:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar transports = _dereq_('./transports');\nvar Emitter = _dereq_('component-emitter');\nvar debug = _dereq_('debug')('engine.io-client:socket');\nvar index = _dereq_('indexof');\nvar parser = _dereq_('engine.io-parser');\nvar parseuri = _dereq_('parseuri');\nvar parsejson = _dereq_('parsejson');\nvar parseqs = _dereq_('parseqs');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Socket;\n\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop(){}\n\n/**\n * Socket constructor.\n *\n * @param {String|Object} uri or options\n * @param {Object} options\n * @api public\n */\n\nfunction Socket(uri, opts){\n  if (!(this instanceof Socket)) return new Socket(uri, opts);\n\n  opts = opts || {};\n\n  if (uri && 'object' == typeof uri) {\n    opts = uri;\n    uri = null;\n  }\n\n  if (uri) {\n    uri = parseuri(uri);\n    opts.host = uri.host;\n    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';\n    opts.port = uri.port;\n    if (uri.query) opts.query = uri.query;\n  }\n\n  this.secure = null != opts.secure ? opts.secure :\n    (global.location && 'https:' == location.protocol);\n\n  if (opts.host) {\n    var pieces = opts.host.split(':');\n    opts.hostname = pieces.shift();\n    if (pieces.length) {\n      opts.port = pieces.pop();\n    } else if (!opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? '443' : '80';\n    }\n  }\n\n  this.agent = opts.agent || false;\n  this.hostname = opts.hostname ||\n    (global.location ? location.hostname : 'localhost');\n  this.port = opts.port || (global.location && location.port ?\n       location.port :\n       (this.secure ? 443 : 80));\n  this.query = opts.query || {};\n  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);\n  this.upgrade = false !== opts.upgrade;\n  this.path = (opts.path || '/engine.io').replace(/\\/$/, '') + '/';\n  this.forceJSONP = !!opts.forceJSONP;\n  this.jsonp = false !== opts.jsonp;\n  this.forceBase64 = !!opts.forceBase64;\n  this.enablesXDR = !!opts.enablesXDR;\n  this.timestampParam = opts.timestampParam || 't';\n  this.timestampRequests = opts.timestampRequests;\n  this.transports = opts.transports || ['polling', 'websocket'];\n  this.readyState = '';\n  this.writeBuffer = [];\n  this.callbackBuffer = [];\n  this.policyPort = opts.policyPort || 843;\n  this.rememberUpgrade = opts.rememberUpgrade || false;\n  this.binaryType = null;\n  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx || null;\n  this.key = opts.key || null;\n  this.passphrase = opts.passphrase || null;\n  this.cert = opts.cert || null;\n  this.ca = opts.ca || null;\n  this.ciphers = opts.ciphers || null;\n  this.rejectUnauthorized = opts.rejectUnauthorized || null;\n\n  this.open();\n}\n\nSocket.priorWebsocketSuccess = false;\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Socket.prototype);\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\n/**\n * Expose deps for legacy compatibility\n * and standalone browser access.\n */\n\nSocket.Socket = Socket;\nSocket.Transport = _dereq_('./transport');\nSocket.transports = _dereq_('./transports');\nSocket.parser = _dereq_('engine.io-parser');\n\n/**\n * Creates transport of the given type.\n *\n * @param {String} transport name\n * @return {Transport}\n * @api private\n */\n\nSocket.prototype.createTransport = function (name) {\n  debug('creating transport \"%s\"', name);\n  var query = clone(this.query);\n\n  // append engine.io protocol identifier\n  query.EIO = parser.protocol;\n\n  // transport name\n  query.transport = name;\n\n  // session id if we already have one\n  if (this.id) query.sid = this.id;\n\n  var transport = new transports[name]({\n    agent: this.agent,\n    hostname: this.hostname,\n    port: this.port,\n    secure: this.secure,\n    path: this.path,\n    query: query,\n    forceJSONP: this.forceJSONP,\n    jsonp: this.jsonp,\n    forceBase64: this.forceBase64,\n    enablesXDR: this.enablesXDR,\n    timestampRequests: this.timestampRequests,\n    timestampParam: this.timestampParam,\n    policyPort: this.policyPort,\n    socket: this,\n    pfx: this.pfx,\n    key: this.key,\n    passphrase: this.passphrase,\n    cert: this.cert,\n    ca: this.ca,\n    ciphers: this.ciphers,\n    rejectUnauthorized: this.rejectUnauthorized\n  });\n\n  return transport;\n};\n\nfunction clone (obj) {\n  var o = {};\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n  return o;\n}\n\n/**\n * Initializes transport to use and starts probe.\n *\n * @api private\n */\nSocket.prototype.open = function () {\n  var transport;\n  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {\n    transport = 'websocket';\n  } else if (0 == this.transports.length) {\n    // Emit error on next tick so it can be listened to\n    var self = this;\n    setTimeout(function() {\n      self.emit('error', 'No transports available');\n    }, 0);\n    return;\n  } else {\n    transport = this.transports[0];\n  }\n  this.readyState = 'opening';\n\n  // Retry with the next transport if the transport is disabled (jsonp: false)\n  var transport;\n  try {\n    transport = this.createTransport(transport);\n  } catch (e) {\n    this.transports.shift();\n    this.open();\n    return;\n  }\n\n  transport.open();\n  this.setTransport(transport);\n};\n\n/**\n * Sets the current transport. Disables the existing one (if any).\n *\n * @api private\n */\n\nSocket.prototype.setTransport = function(transport){\n  debug('setting transport %s', transport.name);\n  var self = this;\n\n  if (this.transport) {\n    debug('clearing existing transport %s', this.transport.name);\n    this.transport.removeAllListeners();\n  }\n\n  // set up transport\n  this.transport = transport;\n\n  // set up transport listeners\n  transport\n  .on('drain', function(){\n    self.onDrain();\n  })\n  .on('packet', function(packet){\n    self.onPacket(packet);\n  })\n  .on('error', function(e){\n    self.onError(e);\n  })\n  .on('close', function(){\n    self.onClose('transport close');\n  });\n};\n\n/**\n * Probes a transport.\n *\n * @param {String} transport name\n * @api private\n */\n\nSocket.prototype.probe = function (name) {\n  debug('probing transport \"%s\"', name);\n  var transport = this.createTransport(name, { probe: 1 })\n    , failed = false\n    , self = this;\n\n  Socket.priorWebsocketSuccess = false;\n\n  function onTransportOpen(){\n    if (self.onlyBinaryUpgrades) {\n      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n      failed = failed || upgradeLosesBinary;\n    }\n    if (failed) return;\n\n    debug('probe transport \"%s\" opened', name);\n    transport.send([{ type: 'ping', data: 'probe' }]);\n    transport.once('packet', function (msg) {\n      if (failed) return;\n      if ('pong' == msg.type && 'probe' == msg.data) {\n        debug('probe transport \"%s\" pong', name);\n        self.upgrading = true;\n        self.emit('upgrading', transport);\n        if (!transport) return;\n        Socket.priorWebsocketSuccess = 'websocket' == transport.name;\n\n        debug('pausing current transport \"%s\"', self.transport.name);\n        self.transport.pause(function () {\n          if (failed) return;\n          if ('closed' == self.readyState) return;\n          debug('changing transport and sending upgrade packet');\n\n          cleanup();\n\n          self.setTransport(transport);\n          transport.send([{ type: 'upgrade' }]);\n          self.emit('upgrade', transport);\n          transport = null;\n          self.upgrading = false;\n          self.flush();\n        });\n      } else {\n        debug('probe transport \"%s\" failed', name);\n        var err = new Error('probe error');\n        err.transport = transport.name;\n        self.emit('upgradeError', err);\n      }\n    });\n  }\n\n  function freezeTransport() {\n    if (failed) return;\n\n    // Any callback called by transport should be ignored since now\n    failed = true;\n\n    cleanup();\n\n    transport.close();\n    transport = null;\n  }\n\n  //Handle any error that happens while probing\n  function onerror(err) {\n    var error = new Error('probe error: ' + err);\n    error.transport = transport.name;\n\n    freezeTransport();\n\n    debug('probe transport \"%s\" failed because of error: %s', name, err);\n\n    self.emit('upgradeError', error);\n  }\n\n  function onTransportClose(){\n    onerror(\"transport closed\");\n  }\n\n  //When the socket is closed while we're probing\n  function onclose(){\n    onerror(\"socket closed\");\n  }\n\n  //When the socket is upgraded while we're probing\n  function onupgrade(to){\n    if (transport && to.name != transport.name) {\n      debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n      freezeTransport();\n    }\n  }\n\n  //Remove all listeners on the transport and on self\n  function cleanup(){\n    transport.removeListener('open', onTransportOpen);\n    transport.removeListener('error', onerror);\n    transport.removeListener('close', onTransportClose);\n    self.removeListener('close', onclose);\n    self.removeListener('upgrading', onupgrade);\n  }\n\n  transport.once('open', onTransportOpen);\n  transport.once('error', onerror);\n  transport.once('close', onTransportClose);\n\n  this.once('close', onclose);\n  this.once('upgrading', onupgrade);\n\n  transport.open();\n\n};\n\n/**\n * Called when connection is deemed open.\n *\n * @api public\n */\n\nSocket.prototype.onOpen = function () {\n  debug('socket open');\n  this.readyState = 'open';\n  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;\n  this.emit('open');\n  this.flush();\n\n  // we check for `readyState` in case an `open`\n  // listener already closed the socket\n  if ('open' == this.readyState && this.upgrade && this.transport.pause) {\n    debug('starting upgrade probes');\n    for (var i = 0, l = this.upgrades.length; i < l; i++) {\n      this.probe(this.upgrades[i]);\n    }\n  }\n};\n\n/**\n * Handles a packet.\n *\n * @api private\n */\n\nSocket.prototype.onPacket = function (packet) {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n\n    this.emit('packet', packet);\n\n    // Socket is live - any packet counts\n    this.emit('heartbeat');\n\n    switch (packet.type) {\n      case 'open':\n        this.onHandshake(parsejson(packet.data));\n        break;\n\n      case 'pong':\n        this.setPing();\n        break;\n\n      case 'error':\n        var err = new Error('server error');\n        err.code = packet.data;\n        this.emit('error', err);\n        break;\n\n      case 'message':\n        this.emit('data', packet.data);\n        this.emit('message', packet.data);\n        break;\n    }\n  } else {\n    debug('packet received with socket readyState \"%s\"', this.readyState);\n  }\n};\n\n/**\n * Called upon handshake completion.\n *\n * @param {Object} handshake obj\n * @api private\n */\n\nSocket.prototype.onHandshake = function (data) {\n  this.emit('handshake', data);\n  this.id = data.sid;\n  this.transport.query.sid = data.sid;\n  this.upgrades = this.filterUpgrades(data.upgrades);\n  this.pingInterval = data.pingInterval;\n  this.pingTimeout = data.pingTimeout;\n  this.onOpen();\n  // In case open handler closes socket\n  if  ('closed' == this.readyState) return;\n  this.setPing();\n\n  // Prolong liveness of socket on heartbeat\n  this.removeListener('heartbeat', this.onHeartbeat);\n  this.on('heartbeat', this.onHeartbeat);\n};\n\n/**\n * Resets ping timeout.\n *\n * @api private\n */\n\nSocket.prototype.onHeartbeat = function (timeout) {\n  clearTimeout(this.pingTimeoutTimer);\n  var self = this;\n  self.pingTimeoutTimer = setTimeout(function () {\n    if ('closed' == self.readyState) return;\n    self.onClose('ping timeout');\n  }, timeout || (self.pingInterval + self.pingTimeout));\n};\n\n/**\n * Pings server every `this.pingInterval` and expects response\n * within `this.pingTimeout` or closes connection.\n *\n * @api private\n */\n\nSocket.prototype.setPing = function () {\n  var self = this;\n  clearTimeout(self.pingIntervalTimer);\n  self.pingIntervalTimer = setTimeout(function () {\n    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);\n    self.ping();\n    self.onHeartbeat(self.pingTimeout);\n  }, self.pingInterval);\n};\n\n/**\n* Sends a ping packet.\n*\n* @api public\n*/\n\nSocket.prototype.ping = function () {\n  this.sendPacket('ping');\n};\n\n/**\n * Called on `drain` event\n *\n * @api private\n */\n\nSocket.prototype.onDrain = function() {\n  for (var i = 0; i < this.prevBufferLen; i++) {\n    if (this.callbackBuffer[i]) {\n      this.callbackBuffer[i]();\n    }\n  }\n\n  this.writeBuffer.splice(0, this.prevBufferLen);\n  this.callbackBuffer.splice(0, this.prevBufferLen);\n\n  // setting prevBufferLen = 0 is very important\n  // for example, when upgrading, upgrade packet is sent over,\n  // and a nonzero prevBufferLen could cause problems on `drain`\n  this.prevBufferLen = 0;\n\n  if (this.writeBuffer.length == 0) {\n    this.emit('drain');\n  } else {\n    this.flush();\n  }\n};\n\n/**\n * Flush write buffers.\n *\n * @api private\n */\n\nSocket.prototype.flush = function () {\n  if ('closed' != this.readyState && this.transport.writable &&\n    !this.upgrading && this.writeBuffer.length) {\n    debug('flushing %d packets in socket', this.writeBuffer.length);\n    this.transport.send(this.writeBuffer);\n    // keep track of current length of writeBuffer\n    // splice writeBuffer and callbackBuffer on `drain`\n    this.prevBufferLen = this.writeBuffer.length;\n    this.emit('flush');\n  }\n};\n\n/**\n * Sends a message.\n *\n * @param {String} message.\n * @param {Function} callback function.\n * @return {Socket} for chaining.\n * @api public\n */\n\nSocket.prototype.write =\nSocket.prototype.send = function (msg, fn) {\n  this.sendPacket('message', msg, fn);\n  return this;\n};\n\n/**\n * Sends a packet.\n *\n * @param {String} packet type.\n * @param {String} data.\n * @param {Function} callback function.\n * @api private\n */\n\nSocket.prototype.sendPacket = function (type, data, fn) {\n  if ('closing' == this.readyState || 'closed' == this.readyState) {\n    return;\n  }\n\n  var packet = { type: type, data: data };\n  this.emit('packetCreate', packet);\n  this.writeBuffer.push(packet);\n  this.callbackBuffer.push(fn);\n  this.flush();\n};\n\n/**\n * Closes the connection.\n *\n * @api private\n */\n\nSocket.prototype.close = function () {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    this.readyState = 'closing';\n\n    var self = this;\n\n    function close() {\n      self.onClose('forced close');\n      debug('socket closing - telling transport to close');\n      self.transport.close();\n    }\n\n    function cleanupAndClose() {\n      self.removeListener('upgrade', cleanupAndClose);\n      self.removeListener('upgradeError', cleanupAndClose);\n      close();\n    }\n\n    function waitForUpgrade() {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      self.once('upgrade', cleanupAndClose);\n      self.once('upgradeError', cleanupAndClose);\n    }\n\n    if (this.writeBuffer.length) {\n      this.once('drain', function() {\n        if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      });\n    } else if (this.upgrading) {\n      waitForUpgrade();\n    } else {\n      close();\n    }\n  }\n\n  return this;\n};\n\n/**\n * Called upon transport error\n *\n * @api private\n */\n\nSocket.prototype.onError = function (err) {\n  debug('socket error %j', err);\n  Socket.priorWebsocketSuccess = false;\n  this.emit('error', err);\n  this.onClose('transport error', err);\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nSocket.prototype.onClose = function (reason, desc) {\n  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {\n    debug('socket close with reason: \"%s\"', reason);\n    var self = this;\n\n    // clear timers\n    clearTimeout(this.pingIntervalTimer);\n    clearTimeout(this.pingTimeoutTimer);\n\n    // clean buffers in next tick, so developers can still\n    // grab the buffers on `close` event\n    setTimeout(function() {\n      self.writeBuffer = [];\n      self.callbackBuffer = [];\n      self.prevBufferLen = 0;\n    }, 0);\n\n    // stop event from firing again for transport\n    this.transport.removeAllListeners('close');\n\n    // ensure transport won't stay open\n    this.transport.close();\n\n    // ignore further transport communication\n    this.transport.removeAllListeners();\n\n    // set ready state\n    this.readyState = 'closed';\n\n    // clear session id\n    this.id = null;\n\n    // emit close event\n    this.emit('close', reason, desc);\n  }\n};\n\n/**\n * Filters upgrades, returning only those matching client transports.\n *\n * @param {Array} server upgrades\n * @api private\n *\n */\n\nSocket.prototype.filterUpgrades = function (upgrades) {\n  var filteredUpgrades = [];\n  for (var i = 0, j = upgrades.length; i<j; i++) {\n    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);\n  }\n  return filteredUpgrades;\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./transport\":14,\"./transports\":15,\"component-emitter\":9,\"debug\":22,\"engine.io-parser\":25,\"indexof\":40,\"parsejson\":32,\"parseqs\":33,\"parseuri\":34}],14:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar parser = _dereq_('engine.io-parser');\nvar Emitter = _dereq_('component-emitter');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Transport;\n\n/**\n * Transport abstract constructor.\n *\n * @param {Object} options.\n * @api private\n */\n\nfunction Transport (opts) {\n  this.path = opts.path;\n  this.hostname = opts.hostname;\n  this.port = opts.port;\n  this.secure = opts.secure;\n  this.query = opts.query;\n  this.timestampParam = opts.timestampParam;\n  this.timestampRequests = opts.timestampRequests;\n  this.readyState = '';\n  this.agent = opts.agent || false;\n  this.socket = opts.socket;\n  this.enablesXDR = opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Transport.prototype);\n\n/**\n * A counter used to prevent collisions in the timestamps used\n * for cache busting.\n */\n\nTransport.timestamps = 0;\n\n/**\n * Emits an error.\n *\n * @param {String} str\n * @return {Transport} for chaining\n * @api public\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  var err = new Error(msg);\n  err.type = 'TransportError';\n  err.description = desc;\n  this.emit('error', err);\n  return this;\n};\n\n/**\n * Opens the transport.\n *\n * @api public\n */\n\nTransport.prototype.open = function () {\n  if ('closed' == this.readyState || '' == this.readyState) {\n    this.readyState = 'opening';\n    this.doOpen();\n  }\n\n  return this;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function () {\n  if ('opening' == this.readyState || 'open' == this.readyState) {\n    this.doClose();\n    this.onClose();\n  }\n\n  return this;\n};\n\n/**\n * Sends multiple packets.\n *\n * @param {Array} packets\n * @api private\n */\n\nTransport.prototype.send = function(packets){\n  if ('open' == this.readyState) {\n    this.write(packets);\n  } else {\n    throw new Error('Transport not open');\n  }\n};\n\n/**\n * Called upon open\n *\n * @api private\n */\n\nTransport.prototype.onOpen = function () {\n  this.readyState = 'open';\n  this.writable = true;\n  this.emit('open');\n};\n\n/**\n * Called with data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function(data){\n  var packet = parser.decodePacket(data, this.socket.binaryType);\n  this.onPacket(packet);\n};\n\n/**\n * Called with a decoded packet.\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called upon close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n\n},{\"component-emitter\":9,\"engine.io-parser\":25}],15:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = _dereq_('xmlhttprequest');\nvar XHR = _dereq_('./polling-xhr');\nvar JSONP = _dereq_('./polling-jsonp');\nvar websocket = _dereq_('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling(opts){\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = 'https:' == location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname != location.hostname || port != opts.port;\n    xs = opts.secure != isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling-jsonp\":16,\"./polling-xhr\":17,\"./websocket\":19,\"xmlhttprequest\":20}],16:[function(_dereq_,module,exports){\n(function (global){\n\n/**\n * Module requirements.\n */\n\nvar Polling = _dereq_('./polling');\nvar inherit = _dereq_('component-inherit');\n\n/**\n * Module exports.\n */\n\nmodule.exports = JSONPPolling;\n\n/**\n * Cached regular expressions.\n */\n\nvar rNewline = /\\n/g;\nvar rEscapedNewline = /\\\\n/g;\n\n/**\n * Global JSONP callbacks.\n */\n\nvar callbacks;\n\n/**\n * Callbacks count.\n */\n\nvar index = 0;\n\n/**\n * Noop.\n */\n\nfunction empty () { }\n\n/**\n * JSONP Polling constructor.\n *\n * @param {Object} opts.\n * @api public\n */\n\nfunction JSONPPolling (opts) {\n  Polling.call(this, opts);\n\n  this.query = this.query || {};\n\n  // define global callbacks array if not present\n  // we do this here (lazily) to avoid unneeded global pollution\n  if (!callbacks) {\n    // we need to consider multiple engines in the same page\n    if (!global.___eio) global.___eio = [];\n    callbacks = global.___eio;\n  }\n\n  // callback identifier\n  this.index = callbacks.length;\n\n  // add callback to jsonp global\n  var self = this;\n  callbacks.push(function (msg) {\n    self.onData(msg);\n  });\n\n  // append to query string\n  this.query.j = this.index;\n\n  // prevent spurious errors from being emitted when the window is unloaded\n  if (global.document && global.addEventListener) {\n    global.addEventListener('beforeunload', function () {\n      if (self.script) self.script.onerror = empty;\n    }, false);\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(JSONPPolling, Polling);\n\n/*\n * JSONP only supports binary as base64 encoded strings\n */\n\nJSONPPolling.prototype.supportsBinary = false;\n\n/**\n * Closes the socket.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doClose = function () {\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  if (this.form) {\n    this.form.parentNode.removeChild(this.form);\n    this.form = null;\n    this.iframe = null;\n  }\n\n  Polling.prototype.doClose.call(this);\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nJSONPPolling.prototype.doPoll = function () {\n  var self = this;\n  var script = document.createElement('script');\n\n  if (this.script) {\n    this.script.parentNode.removeChild(this.script);\n    this.script = null;\n  }\n\n  script.async = true;\n  script.src = this.uri();\n  script.onerror = function(e){\n    self.onError('jsonp poll error',e);\n  };\n\n  var insertAt = document.getElementsByTagName('script')[0];\n  insertAt.parentNode.insertBefore(script, insertAt);\n  this.script = script;\n\n  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);\n\n  if (isUAgecko) {\n    setTimeout(function () {\n      var iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      document.body.removeChild(iframe);\n    }, 100);\n  }\n};\n\n/**\n * Writes with a hidden iframe.\n *\n * @param {String} data to send\n * @param {Function} called upon flush.\n * @api private\n */\n\nJSONPPolling.prototype.doWrite = function (data, fn) {\n  var self = this;\n\n  if (!this.form) {\n    var form = document.createElement('form');\n    var area = document.createElement('textarea');\n    var id = this.iframeId = 'eio_iframe_' + this.index;\n    var iframe;\n\n    form.className = 'socketio';\n    form.style.position = 'absolute';\n    form.style.top = '-1000px';\n    form.style.left = '-1000px';\n    form.target = id;\n    form.method = 'POST';\n    form.setAttribute('accept-charset', 'utf-8');\n    area.name = 'd';\n    form.appendChild(area);\n    document.body.appendChild(form);\n\n    this.form = form;\n    this.area = area;\n  }\n\n  this.form.action = this.uri();\n\n  function complete () {\n    initIframe();\n    fn();\n  }\n\n  function initIframe () {\n    if (self.iframe) {\n      try {\n        self.form.removeChild(self.iframe);\n      } catch (e) {\n        self.onError('jsonp polling iframe removal error', e);\n      }\n    }\n\n    try {\n      // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n      var html = '<iframe src=\"javascript:0\" name=\"'+ self.iframeId +'\">';\n      iframe = document.createElement(html);\n    } catch (e) {\n      iframe = document.createElement('iframe');\n      iframe.name = self.iframeId;\n      iframe.src = 'javascript:0';\n    }\n\n    iframe.id = self.iframeId;\n\n    self.form.appendChild(iframe);\n    self.iframe = iframe;\n  }\n\n  initIframe();\n\n  // escape \\n to prevent it from being converted into \\r\\n by some UAs\n  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n  data = data.replace(rEscapedNewline, '\\\\\\n');\n  this.area.value = data.replace(rNewline, '\\\\n');\n\n  try {\n    this.form.submit();\n  } catch(e) {}\n\n  if (this.iframe.attachEvent) {\n    this.iframe.onreadystatechange = function(){\n      if (self.iframe.readyState == 'complete') {\n        complete();\n      }\n    };\n  } else {\n    this.iframe.onload = complete;\n  }\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling\":18,\"component-inherit\":21}],17:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module requirements.\n */\n\nvar XMLHttpRequest = _dereq_('xmlhttprequest');\nvar Polling = _dereq_('./polling');\nvar Emitter = _dereq_('component-emitter');\nvar inherit = _dereq_('component-inherit');\nvar debug = _dereq_('debug')('engine.io-client:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\nmodule.exports.Request = Request;\n\n/**\n * Empty function\n */\n\nfunction empty(){}\n\n/**\n * XHR Polling constructor.\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction XHR(opts){\n  Polling.call(this, opts);\n\n  if (global.location) {\n    var isSSL = 'https:' == location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    this.xd = opts.hostname != global.location.hostname ||\n      port != opts.port;\n    this.xs = opts.secure != isSSL;\n  }\n}\n\n/**\n * Inherits from Polling.\n */\n\ninherit(XHR, Polling);\n\n/**\n * XHR supports binary\n */\n\nXHR.prototype.supportsBinary = true;\n\n/**\n * Creates a request.\n *\n * @param {String} method\n * @api private\n */\n\nXHR.prototype.request = function(opts){\n  opts = opts || {};\n  opts.uri = this.uri();\n  opts.xd = this.xd;\n  opts.xs = this.xs;\n  opts.agent = this.agent || false;\n  opts.supportsBinary = this.supportsBinary;\n  opts.enablesXDR = this.enablesXDR;\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  return new Request(opts);\n};\n\n/**\n * Sends data.\n *\n * @param {String} data to send.\n * @param {Function} called upon flush.\n * @api private\n */\n\nXHR.prototype.doWrite = function(data, fn){\n  var isBinary = typeof data !== 'string' && data !== undefined;\n  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });\n  var self = this;\n  req.on('success', fn);\n  req.on('error', function(err){\n    self.onError('xhr post error', err);\n  });\n  this.sendXhr = req;\n};\n\n/**\n * Starts a poll cycle.\n *\n * @api private\n */\n\nXHR.prototype.doPoll = function(){\n  debug('xhr poll');\n  var req = this.request();\n  var self = this;\n  req.on('data', function(data){\n    self.onData(data);\n  });\n  req.on('error', function(err){\n    self.onError('xhr poll error', err);\n  });\n  this.pollXhr = req;\n};\n\n/**\n * Request constructor\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Request(opts){\n  this.method = opts.method || 'GET';\n  this.uri = opts.uri;\n  this.xd = !!opts.xd;\n  this.xs = !!opts.xs;\n  this.async = false !== opts.async;\n  this.data = undefined != opts.data ? opts.data : null;\n  this.agent = opts.agent;\n  this.isBinary = opts.isBinary;\n  this.supportsBinary = opts.supportsBinary;\n  this.enablesXDR = opts.enablesXDR;\n\n  // SSL options for Node.js client\n  this.pfx = opts.pfx;\n  this.key = opts.key;\n  this.passphrase = opts.passphrase;\n  this.cert = opts.cert;\n  this.ca = opts.ca;\n  this.ciphers = opts.ciphers;\n  this.rejectUnauthorized = opts.rejectUnauthorized;\n\n  this.create();\n}\n\n/**\n * Mix in `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Creates the XHR object and sends the request.\n *\n * @api private\n */\n\nRequest.prototype.create = function(){\n  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  var xhr = this.xhr = new XMLHttpRequest(opts);\n  var self = this;\n\n  try {\n    debug('xhr open %s: %s', this.method, this.uri);\n    xhr.open(this.method, this.uri, this.async);\n    if (this.supportsBinary) {\n      // This has to be done after open because Firefox is stupid\n      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\n      xhr.responseType = 'arraybuffer';\n    }\n\n    if ('POST' == this.method) {\n      try {\n        if (this.isBinary) {\n          xhr.setRequestHeader('Content-type', 'application/octet-stream');\n        } else {\n          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        }\n      } catch (e) {}\n    }\n\n    // ie6 check\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = true;\n    }\n\n    if (this.hasXDR()) {\n      xhr.onload = function(){\n        self.onLoad();\n      };\n      xhr.onerror = function(){\n        self.onError(xhr.responseText);\n      };\n    } else {\n      xhr.onreadystatechange = function(){\n        if (4 != xhr.readyState) return;\n        if (200 == xhr.status || 1223 == xhr.status) {\n          self.onLoad();\n        } else {\n          // make sure the `error` event handler that's user-set\n          // does not throw in the same tick and gets caught here\n          setTimeout(function(){\n            self.onError(xhr.status);\n          }, 0);\n        }\n      };\n    }\n\n    debug('xhr data %s', this.data);\n    xhr.send(this.data);\n  } catch (e) {\n    // Need to defer since .create() is called directly fhrom the constructor\n    // and thus the 'error' event can only be only bound *after* this exception\n    // occurs.  Therefore, also, we cannot throw here at all.\n    setTimeout(function() {\n      self.onError(e);\n    }, 0);\n    return;\n  }\n\n  if (global.document) {\n    this.index = Request.requestsCount++;\n    Request.requests[this.index] = this;\n  }\n};\n\n/**\n * Called upon successful response.\n *\n * @api private\n */\n\nRequest.prototype.onSuccess = function(){\n  this.emit('success');\n  this.cleanup();\n};\n\n/**\n * Called if we have data.\n *\n * @api private\n */\n\nRequest.prototype.onData = function(data){\n  this.emit('data', data);\n  this.onSuccess();\n};\n\n/**\n * Called upon error.\n *\n * @api private\n */\n\nRequest.prototype.onError = function(err){\n  this.emit('error', err);\n  this.cleanup(true);\n};\n\n/**\n * Cleans up house.\n *\n * @api private\n */\n\nRequest.prototype.cleanup = function(fromError){\n  if ('undefined' == typeof this.xhr || null === this.xhr) {\n    return;\n  }\n  // xmlhttprequest\n  if (this.hasXDR()) {\n    this.xhr.onload = this.xhr.onerror = empty;\n  } else {\n    this.xhr.onreadystatechange = empty;\n  }\n\n  if (fromError) {\n    try {\n      this.xhr.abort();\n    } catch(e) {}\n  }\n\n  if (global.document) {\n    delete Request.requests[this.index];\n  }\n\n  this.xhr = null;\n};\n\n/**\n * Called upon load.\n *\n * @api private\n */\n\nRequest.prototype.onLoad = function(){\n  var data;\n  try {\n    var contentType;\n    try {\n      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];\n    } catch (e) {}\n    if (contentType === 'application/octet-stream') {\n      data = this.xhr.response;\n    } else {\n      if (!this.supportsBinary) {\n        data = this.xhr.responseText;\n      } else {\n        data = 'ok';\n      }\n    }\n  } catch (e) {\n    this.onError(e);\n  }\n  if (null != data) {\n    this.onData(data);\n  }\n};\n\n/**\n * Check if it has XDomainRequest.\n *\n * @api private\n */\n\nRequest.prototype.hasXDR = function(){\n  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;\n};\n\n/**\n * Aborts the request.\n *\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  this.cleanup();\n};\n\n/**\n * Aborts pending requests when unloading the window. This is needed to prevent\n * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n * emitted.\n */\n\nif (global.document) {\n  Request.requestsCount = 0;\n  Request.requests = {};\n  if (global.attachEvent) {\n    global.attachEvent('onunload', unloadHandler);\n  } else if (global.addEventListener) {\n    global.addEventListener('beforeunload', unloadHandler, false);\n  }\n}\n\nfunction unloadHandler() {\n  for (var i in Request.requests) {\n    if (Request.requests.hasOwnProperty(i)) {\n      Request.requests[i].abort();\n    }\n  }\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./polling\":18,\"component-emitter\":9,\"component-inherit\":21,\"debug\":22,\"xmlhttprequest\":20}],18:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Transport = _dereq_('../transport');\nvar parseqs = _dereq_('parseqs');\nvar parser = _dereq_('engine.io-parser');\nvar inherit = _dereq_('component-inherit');\nvar debug = _dereq_('debug')('engine.io-client:polling');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Polling;\n\n/**\n * Is XHR2 supported?\n */\n\nvar hasXHR2 = (function() {\n  var XMLHttpRequest = _dereq_('xmlhttprequest');\n  var xhr = new XMLHttpRequest({ xdomain: false });\n  return null != xhr.responseType;\n})();\n\n/**\n * Polling interface.\n *\n * @param {Object} opts\n * @api private\n */\n\nfunction Polling(opts){\n  var forceBase64 = (opts && opts.forceBase64);\n  if (!hasXHR2 || forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(Polling, Transport);\n\n/**\n * Transport name.\n */\n\nPolling.prototype.name = 'polling';\n\n/**\n * Opens the socket (triggers polling). We write a PING message to determine\n * when the transport is open.\n *\n * @api private\n */\n\nPolling.prototype.doOpen = function(){\n  this.poll();\n};\n\n/**\n * Pauses polling.\n *\n * @param {Function} callback upon buffers are flushed and transport is paused\n * @api private\n */\n\nPolling.prototype.pause = function(onPause){\n  var pending = 0;\n  var self = this;\n\n  this.readyState = 'pausing';\n\n  function pause(){\n    debug('paused');\n    self.readyState = 'paused';\n    onPause();\n  }\n\n  if (this.polling || !this.writable) {\n    var total = 0;\n\n    if (this.polling) {\n      debug('we are currently polling - waiting to pause');\n      total++;\n      this.once('pollComplete', function(){\n        debug('pre-pause polling complete');\n        --total || pause();\n      });\n    }\n\n    if (!this.writable) {\n      debug('we are currently writing - waiting to pause');\n      total++;\n      this.once('drain', function(){\n        debug('pre-pause writing complete');\n        --total || pause();\n      });\n    }\n  } else {\n    pause();\n  }\n};\n\n/**\n * Starts polling cycle.\n *\n * @api public\n */\n\nPolling.prototype.poll = function(){\n  debug('polling');\n  this.polling = true;\n  this.doPoll();\n  this.emit('poll');\n};\n\n/**\n * Overloads onData to detect payloads.\n *\n * @api private\n */\n\nPolling.prototype.onData = function(data){\n  var self = this;\n  debug('polling got data %s', data);\n  var callback = function(packet, index, total) {\n    // if its the first message we consider the transport open\n    if ('opening' == self.readyState) {\n      self.onOpen();\n    }\n\n    // if its a close packet, we close the ongoing requests\n    if ('close' == packet.type) {\n      self.onClose();\n      return false;\n    }\n\n    // otherwise bypass onData and handle the message\n    self.onPacket(packet);\n  };\n\n  // decode payload\n  parser.decodePayload(data, this.socket.binaryType, callback);\n\n  // if an event did not trigger closing\n  if ('closed' != this.readyState) {\n    // if we got data we're not polling\n    this.polling = false;\n    this.emit('pollComplete');\n\n    if ('open' == this.readyState) {\n      this.poll();\n    } else {\n      debug('ignoring poll - transport state \"%s\"', this.readyState);\n    }\n  }\n};\n\n/**\n * For polling, send a close packet.\n *\n * @api private\n */\n\nPolling.prototype.doClose = function(){\n  var self = this;\n\n  function close(){\n    debug('writing close packet');\n    self.write([{ type: 'close' }]);\n  }\n\n  if ('open' == this.readyState) {\n    debug('transport open - closing');\n    close();\n  } else {\n    // in case we're trying to close while\n    // handshaking is in progress (GH-164)\n    debug('transport not open - deferring close');\n    this.once('open', close);\n  }\n};\n\n/**\n * Writes a packets payload.\n *\n * @param {Array} data packets\n * @param {Function} drain callback\n * @api private\n */\n\nPolling.prototype.write = function(packets){\n  var self = this;\n  this.writable = false;\n  var callbackfn = function() {\n    self.writable = true;\n    self.emit('drain');\n  };\n\n  var self = this;\n  parser.encodePayload(packets, this.supportsBinary, function(data) {\n    self.doWrite(data, callbackfn);\n  });\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nPolling.prototype.uri = function(){\n  var query = this.query || {};\n  var schema = this.secure ? 'https' : 'http';\n  var port = '';\n\n  // cache busting is forced\n  if (false !== this.timestampRequests) {\n    query[this.timestampParam] = +new Date + '-' + Transport.timestamps++;\n  }\n\n  if (!this.supportsBinary && !query.sid) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // avoid port if default for schema\n  if (this.port && (('https' == schema && this.port != 443) ||\n     ('http' == schema && this.port != 80))) {\n    port = ':' + this.port;\n  }\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  return schema + '://' + this.hostname + port + this.path + query;\n};\n\n},{\"../transport\":14,\"component-inherit\":21,\"debug\":22,\"engine.io-parser\":25,\"parseqs\":33,\"xmlhttprequest\":20}],19:[function(_dereq_,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Transport = _dereq_('../transport');\nvar parser = _dereq_('engine.io-parser');\nvar parseqs = _dereq_('parseqs');\nvar inherit = _dereq_('component-inherit');\nvar debug = _dereq_('debug')('engine.io-client:websocket');\n\n/**\n * `ws` exposes a WebSocket-compatible interface in\n * Node, or the `WebSocket` or `MozWebSocket` globals\n * in the browser.\n */\n\nvar WebSocket = _dereq_('ws');\n\n/**\n * Module exports.\n */\n\nmodule.exports = WS;\n\n/**\n * WebSocket transport constructor.\n *\n * @api {Object} connection options\n * @api public\n */\n\nfunction WS(opts){\n  var forceBase64 = (opts && opts.forceBase64);\n  if (forceBase64) {\n    this.supportsBinary = false;\n  }\n  Transport.call(this, opts);\n}\n\n/**\n * Inherits from Transport.\n */\n\ninherit(WS, Transport);\n\n/**\n * Transport name.\n *\n * @api public\n */\n\nWS.prototype.name = 'websocket';\n\n/*\n * WebSockets support binary\n */\n\nWS.prototype.supportsBinary = true;\n\n/**\n * Opens socket.\n *\n * @api private\n */\n\nWS.prototype.doOpen = function(){\n  if (!this.check()) {\n    // let probe timeout\n    return;\n  }\n\n  var self = this;\n  var uri = this.uri();\n  var protocols = void(0);\n  var opts = { agent: this.agent };\n\n  // SSL options for Node.js client\n  opts.pfx = this.pfx;\n  opts.key = this.key;\n  opts.passphrase = this.passphrase;\n  opts.cert = this.cert;\n  opts.ca = this.ca;\n  opts.ciphers = this.ciphers;\n  opts.rejectUnauthorized = this.rejectUnauthorized;\n\n  this.ws = new WebSocket(uri, protocols, opts);\n\n  if (this.ws.binaryType === undefined) {\n    this.supportsBinary = false;\n  }\n\n  this.ws.binaryType = 'arraybuffer';\n  this.addEventListeners();\n};\n\n/**\n * Adds event listeners to the socket\n *\n * @api private\n */\n\nWS.prototype.addEventListeners = function(){\n  var self = this;\n\n  this.ws.onopen = function(){\n    self.onOpen();\n  };\n  this.ws.onclose = function(){\n    self.onClose();\n  };\n  this.ws.onmessage = function(ev){\n    self.onData(ev.data);\n  };\n  this.ws.onerror = function(e){\n    self.onError('websocket error', e);\n  };\n};\n\n/**\n * Override `onData` to use a timer on iOS.\n * See: https://gist.github.com/mloughran/2052006\n *\n * @api private\n */\n\nif ('undefined' != typeof navigator\n  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {\n  WS.prototype.onData = function(data){\n    var self = this;\n    setTimeout(function(){\n      Transport.prototype.onData.call(self, data);\n    }, 0);\n  };\n}\n\n/**\n * Writes data to socket.\n *\n * @param {Array} array of packets.\n * @api private\n */\n\nWS.prototype.write = function(packets){\n  var self = this;\n  this.writable = false;\n  // encodePacket efficient as it uses WS framing\n  // no need for encodePayload\n  for (var i = 0, l = packets.length; i < l; i++) {\n    parser.encodePacket(packets[i], this.supportsBinary, function(data) {\n      //Sometimes the websocket has already been closed but the browser didn't\n      //have a chance of informing us about it yet, in that case send will\n      //throw an error\n      try {\n        self.ws.send(data);\n      } catch (e){\n        debug('websocket closed before onclose event');\n      }\n    });\n  }\n\n  function ondrain() {\n    self.writable = true;\n    self.emit('drain');\n  }\n  // fake drain\n  // defer to next tick to allow Socket to clear writeBuffer\n  setTimeout(ondrain, 0);\n};\n\n/**\n * Called upon close\n *\n * @api private\n */\n\nWS.prototype.onClose = function(){\n  Transport.prototype.onClose.call(this);\n};\n\n/**\n * Closes socket.\n *\n * @api private\n */\n\nWS.prototype.doClose = function(){\n  if (typeof this.ws !== 'undefined') {\n    this.ws.close();\n  }\n};\n\n/**\n * Generates uri for connection.\n *\n * @api private\n */\n\nWS.prototype.uri = function(){\n  var query = this.query || {};\n  var schema = this.secure ? 'wss' : 'ws';\n  var port = '';\n\n  // avoid port if default for schema\n  if (this.port && (('wss' == schema && this.port != 443)\n    || ('ws' == schema && this.port != 80))) {\n    port = ':' + this.port;\n  }\n\n  // append timestamp to URI\n  if (this.timestampRequests) {\n    query[this.timestampParam] = +new Date;\n  }\n\n  // communicate binary support capabilities\n  if (!this.supportsBinary) {\n    query.b64 = 1;\n  }\n\n  query = parseqs.encode(query);\n\n  // prepend ? to query\n  if (query.length) {\n    query = '?' + query;\n  }\n\n  return schema + '://' + this.hostname + port + this.path + query;\n};\n\n/**\n * Feature detection for WebSocket.\n *\n * @return {Boolean} whether this transport is available.\n * @api public\n */\n\nWS.prototype.check = function(){\n  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);\n};\n\n},{\"../transport\":14,\"component-inherit\":21,\"debug\":22,\"engine.io-parser\":25,\"parseqs\":33,\"ws\":35}],20:[function(_dereq_,module,exports){\n// browser shim for xmlhttprequest module\nvar hasCORS = _dereq_('has-cors');\n\nmodule.exports = function(opts) {\n  var xdomain = opts.xdomain;\n\n  // scheme must be same when usign XDomainRequest\n  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n  var xscheme = opts.xscheme;\n\n  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n  // https://github.com/Automattic/engine.io-client/pull/217\n  var enablesXDR = opts.enablesXDR;\n\n  // XMLHttpRequest can be disabled on IE\n  try {\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n      return new XMLHttpRequest();\n    }\n  } catch (e) { }\n\n  // Use XDomainRequest for IE8 if enablesXDR is true\n  // because loading bar keeps flashing when using jsonp-polling\n  // https://github.com/yujiosaka/socke.io-ie8-loading-example\n  try {\n    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {\n      return new XDomainRequest();\n    }\n  } catch (e) { }\n\n  if (!xdomain) {\n    try {\n      return new ActiveXObject('Microsoft.XMLHTTP');\n    } catch(e) { }\n  }\n}\n\n},{\"has-cors\":38}],21:[function(_dereq_,module,exports){\n\nmodule.exports = function(a, b){\n  var fn = function(){};\n  fn.prototype = b.prototype;\n  a.prototype = new fn;\n  a.prototype.constructor = a;\n};\n},{}],22:[function(_dereq_,module,exports){\n\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = _dereq_('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // This hackery is required for IE8,\n  // where the `console.log` function doesn't have 'apply'\n  return 'object' == typeof console\n    && 'function' == typeof console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      localStorage.removeItem('debug');\n    } else {\n      localStorage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = localStorage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n},{\"./debug\":23}],23:[function(_dereq_,module,exports){\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = _dereq_('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n},{\"ms\":24}],24:[function(_dereq_,module,exports){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n},{}],25:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Module dependencies.\n */\n\nvar keys = _dereq_('./keys');\nvar hasBinary = _dereq_('has-binary');\nvar sliceBuffer = _dereq_('arraybuffer.slice');\nvar base64encoder = _dereq_('base64-arraybuffer');\nvar after = _dereq_('after');\nvar utf8 = _dereq_('utf8');\n\n/**\n * Check if we are running an android browser. That requires us to use\n * ArrayBuffer with polling transports...\n *\n * http://ghinda.net/jpeg-blob-ajax-android/\n */\n\nvar isAndroid = navigator.userAgent.match(/Android/i);\n\n/**\n * Check if we are running in PhantomJS.\n * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n * https://github.com/ariya/phantomjs/issues/11395\n * @type boolean\n */\nvar isPhantomJS = /PhantomJS/i.test(navigator.userAgent);\n\n/**\n * When true, avoids using Blobs to encode payloads.\n * @type boolean\n */\nvar dontSendBlobs = isAndroid || isPhantomJS;\n\n/**\n * Current protocol version.\n */\n\nexports.protocol = 3;\n\n/**\n * Packet types.\n */\n\nvar packets = exports.packets = {\n    open:     0    // non-ws\n  , close:    1    // non-ws\n  , ping:     2\n  , pong:     3\n  , message:  4\n  , upgrade:  5\n  , noop:     6\n};\n\nvar packetslist = keys(packets);\n\n/**\n * Premade error packet.\n */\n\nvar err = { type: 'error', data: 'parser error' };\n\n/**\n * Create a blob api even for blob builder when vendor prefixes exist\n */\n\nvar Blob = _dereq_('blob');\n\n/**\n * Encodes a packet.\n *\n *     <packet type id> [ <data> ]\n *\n * Example:\n *\n *     5hello world\n *     3\n *     4\n *\n * Binary is encoded in an identical principle\n *\n * @api private\n */\n\nexports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {\n  if ('function' == typeof supportsBinary) {\n    callback = supportsBinary;\n    supportsBinary = false;\n  }\n\n  if ('function' == typeof utf8encode) {\n    callback = utf8encode;\n    utf8encode = null;\n  }\n\n  var data = (packet.data === undefined)\n    ? undefined\n    : packet.data.buffer || packet.data;\n\n  if (global.ArrayBuffer && data instanceof ArrayBuffer) {\n    return encodeArrayBuffer(packet, supportsBinary, callback);\n  } else if (Blob && data instanceof global.Blob) {\n    return encodeBlob(packet, supportsBinary, callback);\n  }\n\n  // might be an object with { base64: true, data: dataAsBase64String }\n  if (data && data.base64) {\n    return encodeBase64Object(packet, callback);\n  }\n\n  // Sending data as a utf-8 string\n  var encoded = packets[packet.type];\n\n  // data fragment is optional\n  if (undefined !== packet.data) {\n    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);\n  }\n\n  return callback('' + encoded);\n\n};\n\nfunction encodeBase64Object(packet, callback) {\n  // packet data is an object { base64: true, data: dataAsBase64String }\n  var message = 'b' + exports.packets[packet.type] + packet.data.data;\n  return callback(message);\n}\n\n/**\n * Encode packet helpers for binary types\n */\n\nfunction encodeArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var data = packet.data;\n  var contentArray = new Uint8Array(data);\n  var resultBuffer = new Uint8Array(1 + data.byteLength);\n\n  resultBuffer[0] = packets[packet.type];\n  for (var i = 0; i < contentArray.length; i++) {\n    resultBuffer[i+1] = contentArray[i];\n  }\n\n  return callback(resultBuffer.buffer);\n}\n\nfunction encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  var fr = new FileReader();\n  fr.onload = function() {\n    packet.data = fr.result;\n    exports.encodePacket(packet, supportsBinary, true, callback);\n  };\n  return fr.readAsArrayBuffer(packet.data);\n}\n\nfunction encodeBlob(packet, supportsBinary, callback) {\n  if (!supportsBinary) {\n    return exports.encodeBase64Packet(packet, callback);\n  }\n\n  if (dontSendBlobs) {\n    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);\n  }\n\n  var length = new Uint8Array(1);\n  length[0] = packets[packet.type];\n  var blob = new Blob([length.buffer, packet.data]);\n\n  return callback(blob);\n}\n\n/**\n * Encodes a packet with binary data in a base64 string\n *\n * @param {Object} packet, has `type` and `data`\n * @return {String} base64 encoded message\n */\n\nexports.encodeBase64Packet = function(packet, callback) {\n  var message = 'b' + exports.packets[packet.type];\n  if (Blob && packet.data instanceof Blob) {\n    var fr = new FileReader();\n    fr.onload = function() {\n      var b64 = fr.result.split(',')[1];\n      callback(message + b64);\n    };\n    return fr.readAsDataURL(packet.data);\n  }\n\n  var b64data;\n  try {\n    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));\n  } catch (e) {\n    // iPhone Safari doesn't let you apply with typed arrays\n    var typed = new Uint8Array(packet.data);\n    var basic = new Array(typed.length);\n    for (var i = 0; i < typed.length; i++) {\n      basic[i] = typed[i];\n    }\n    b64data = String.fromCharCode.apply(null, basic);\n  }\n  message += global.btoa(b64data);\n  return callback(message);\n};\n\n/**\n * Decodes a packet. Changes format to Blob if requested.\n *\n * @return {Object} with `type` and `data` (if any)\n * @api private\n */\n\nexports.decodePacket = function (data, binaryType, utf8decode) {\n  // String data\n  if (typeof data == 'string' || data === undefined) {\n    if (data.charAt(0) == 'b') {\n      return exports.decodeBase64Packet(data.substr(1), binaryType);\n    }\n\n    if (utf8decode) {\n      try {\n        data = utf8.decode(data);\n      } catch (e) {\n        return err;\n      }\n    }\n    var type = data.charAt(0);\n\n    if (Number(type) != type || !packetslist[type]) {\n      return err;\n    }\n\n    if (data.length > 1) {\n      return { type: packetslist[type], data: data.substring(1) };\n    } else {\n      return { type: packetslist[type] };\n    }\n  }\n\n  var asArray = new Uint8Array(data);\n  var type = asArray[0];\n  var rest = sliceBuffer(data, 1);\n  if (Blob && binaryType === 'blob') {\n    rest = new Blob([rest]);\n  }\n  return { type: packetslist[type], data: rest };\n};\n\n/**\n * Decodes a packet encoded in a base64 string\n *\n * @param {String} base64 encoded message\n * @return {Object} with `type` and `data` (if any)\n */\n\nexports.decodeBase64Packet = function(msg, binaryType) {\n  var type = packetslist[msg.charAt(0)];\n  if (!global.ArrayBuffer) {\n    return { type: type, data: { base64: true, data: msg.substr(1) } };\n  }\n\n  var data = base64encoder.decode(msg.substr(1));\n\n  if (binaryType === 'blob' && Blob) {\n    data = new Blob([data]);\n  }\n\n  return { type: type, data: data };\n};\n\n/**\n * Encodes multiple messages (payload).\n *\n *     <length>:data\n *\n * Example:\n *\n *     11:hello world2:hi\n *\n * If any contents are binary, they will be encoded as base64 strings. Base64\n * encoded strings are marked with a b before the length specifier\n *\n * @param {Array} packets\n * @api private\n */\n\nexports.encodePayload = function (packets, supportsBinary, callback) {\n  if (typeof supportsBinary == 'function') {\n    callback = supportsBinary;\n    supportsBinary = null;\n  }\n\n  var isBinary = hasBinary(packets);\n\n  if (supportsBinary && isBinary) {\n    if (Blob && !dontSendBlobs) {\n      return exports.encodePayloadAsBlob(packets, callback);\n    }\n\n    return exports.encodePayloadAsArrayBuffer(packets, callback);\n  }\n\n  if (!packets.length) {\n    return callback('0:');\n  }\n\n  function setLengthHeader(message) {\n    return message.length + ':' + message;\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {\n      doneCallback(null, setLengthHeader(message));\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(results.join(''));\n  });\n};\n\n/**\n * Async array map using after\n */\n\nfunction map(ary, each, done) {\n  var result = new Array(ary.length);\n  var next = after(ary.length, done);\n\n  var eachWithIndex = function(i, el, cb) {\n    each(el, function(error, msg) {\n      result[i] = msg;\n      cb(error, result);\n    });\n  };\n\n  for (var i = 0; i < ary.length; i++) {\n    eachWithIndex(i, ary[i], next);\n  }\n}\n\n/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */\n\nexports.decodePayload = function (data, binaryType, callback) {\n  if (typeof data != 'string') {\n    return exports.decodePayloadAsBinary(data, binaryType, callback);\n  }\n\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var packet;\n  if (data == '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n  var length = ''\n    , n, msg;\n\n  for (var i = 0, l = data.length; i < l; i++) {\n    var chr = data.charAt(i);\n\n    if (':' != chr) {\n      length += chr;\n    } else {\n      if ('' == length || (length != (n = Number(length)))) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      msg = data.substr(i + 1, n);\n\n      if (length != msg.length) {\n        // parser error - ignoring payload\n        return callback(err, 0, 1);\n      }\n\n      if (msg.length) {\n        packet = exports.decodePacket(msg, binaryType, true);\n\n        if (err.type == packet.type && err.data == packet.data) {\n          // parser error in individual packet - ignoring payload\n          return callback(err, 0, 1);\n        }\n\n        var ret = callback(packet, i + n, l);\n        if (false === ret) return;\n      }\n\n      // advance cursor\n      i += n;\n      length = '';\n    }\n  }\n\n  if (length != '') {\n    // parser error - ignoring payload\n    return callback(err, 0, 1);\n  }\n\n};\n\n/**\n * Encodes multiple messages (payload) as binary.\n *\n * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n * 255><data>\n *\n * Example:\n * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n *\n * @param {Array} packets\n * @return {ArrayBuffer} encoded payload\n * @api private\n */\n\nexports.encodePayloadAsArrayBuffer = function(packets, callback) {\n  if (!packets.length) {\n    return callback(new ArrayBuffer(0));\n  }\n\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(data) {\n      return doneCallback(null, data);\n    });\n  }\n\n  map(packets, encodeOne, function(err, encodedPackets) {\n    var totalLength = encodedPackets.reduce(function(acc, p) {\n      var len;\n      if (typeof p === 'string'){\n        len = p.length;\n      } else {\n        len = p.byteLength;\n      }\n      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2\n    }, 0);\n\n    var resultArray = new Uint8Array(totalLength);\n\n    var bufferIndex = 0;\n    encodedPackets.forEach(function(p) {\n      var isString = typeof p === 'string';\n      var ab = p;\n      if (isString) {\n        var view = new Uint8Array(p.length);\n        for (var i = 0; i < p.length; i++) {\n          view[i] = p.charCodeAt(i);\n        }\n        ab = view.buffer;\n      }\n\n      if (isString) { // not true binary\n        resultArray[bufferIndex++] = 0;\n      } else { // true binary\n        resultArray[bufferIndex++] = 1;\n      }\n\n      var lenStr = ab.byteLength.toString();\n      for (var i = 0; i < lenStr.length; i++) {\n        resultArray[bufferIndex++] = parseInt(lenStr[i]);\n      }\n      resultArray[bufferIndex++] = 255;\n\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < view.length; i++) {\n        resultArray[bufferIndex++] = view[i];\n      }\n    });\n\n    return callback(resultArray.buffer);\n  });\n};\n\n/**\n * Encode as Blob\n */\n\nexports.encodePayloadAsBlob = function(packets, callback) {\n  function encodeOne(packet, doneCallback) {\n    exports.encodePacket(packet, true, true, function(encoded) {\n      var binaryIdentifier = new Uint8Array(1);\n      binaryIdentifier[0] = 1;\n      if (typeof encoded === 'string') {\n        var view = new Uint8Array(encoded.length);\n        for (var i = 0; i < encoded.length; i++) {\n          view[i] = encoded.charCodeAt(i);\n        }\n        encoded = view.buffer;\n        binaryIdentifier[0] = 0;\n      }\n\n      var len = (encoded instanceof ArrayBuffer)\n        ? encoded.byteLength\n        : encoded.size;\n\n      var lenStr = len.toString();\n      var lengthAry = new Uint8Array(lenStr.length + 1);\n      for (var i = 0; i < lenStr.length; i++) {\n        lengthAry[i] = parseInt(lenStr[i]);\n      }\n      lengthAry[lenStr.length] = 255;\n\n      if (Blob) {\n        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);\n        doneCallback(null, blob);\n      }\n    });\n  }\n\n  map(packets, encodeOne, function(err, results) {\n    return callback(new Blob(results));\n  });\n};\n\n/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */\n\nexports.decodePayloadAsBinary = function (data, binaryType, callback) {\n  if (typeof binaryType === 'function') {\n    callback = binaryType;\n    binaryType = null;\n  }\n\n  var bufferTail = data;\n  var buffers = [];\n\n  var numberTooLong = false;\n  while (bufferTail.byteLength > 0) {\n    var tailArray = new Uint8Array(bufferTail);\n    var isString = tailArray[0] === 0;\n    var msgLength = '';\n\n    for (var i = 1; ; i++) {\n      if (tailArray[i] == 255) break;\n\n      if (msgLength.length > 310) {\n        numberTooLong = true;\n        break;\n      }\n\n      msgLength += tailArray[i];\n    }\n\n    if(numberTooLong) return callback(err, 0, 1);\n\n    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);\n    msgLength = parseInt(msgLength);\n\n    var msg = sliceBuffer(bufferTail, 0, msgLength);\n    if (isString) {\n      try {\n        msg = String.fromCharCode.apply(null, new Uint8Array(msg));\n      } catch (e) {\n        // iPhone Safari doesn't let you apply to typed arrays\n        var typed = new Uint8Array(msg);\n        msg = '';\n        for (var i = 0; i < typed.length; i++) {\n          msg += String.fromCharCode(typed[i]);\n        }\n      }\n    }\n\n    buffers.push(msg);\n    bufferTail = sliceBuffer(bufferTail, msgLength);\n  }\n\n  var total = buffers.length;\n  buffers.forEach(function(buffer, i) {\n    callback(exports.decodePacket(buffer, binaryType, true), i, total);\n  });\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./keys\":26,\"after\":27,\"arraybuffer.slice\":28,\"base64-arraybuffer\":29,\"blob\":30,\"has-binary\":36,\"utf8\":31}],26:[function(_dereq_,module,exports){\n\n/**\n * Gets the keys for an object.\n *\n * @return {Array} keys\n * @api private\n */\n\nmodule.exports = Object.keys || function keys (obj){\n  var arr = [];\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var i in obj) {\n    if (has.call(obj, i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n},{}],27:[function(_dereq_,module,exports){\nmodule.exports = after\n\nfunction after(count, callback, err_cb) {\n    var bail = false\n    err_cb = err_cb || noop\n    proxy.count = count\n\n    return (count === 0) ? callback() : proxy\n\n    function proxy(err, result) {\n        if (proxy.count <= 0) {\n            throw new Error('after called too many times')\n        }\n        --proxy.count\n\n        // after first error, rest are passed to err_cb\n        if (err) {\n            bail = true\n            callback(err)\n            // future error callbacks will go to error handler\n            callback = err_cb\n        } else if (proxy.count === 0 && !bail) {\n            callback(null, result)\n        }\n    }\n}\n\nfunction noop() {}\n\n},{}],28:[function(_dereq_,module,exports){\n/**\n * An abstraction for slicing an arraybuffer even when\n * ArrayBuffer.prototype.slice is not supported\n *\n * @api public\n */\n\nmodule.exports = function(arraybuffer, start, end) {\n  var bytes = arraybuffer.byteLength;\n  start = start || 0;\n  end = end || bytes;\n\n  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }\n\n  if (start < 0) { start += bytes; }\n  if (end < 0) { end += bytes; }\n  if (end > bytes) { end = bytes; }\n\n  if (start >= bytes || start >= end || bytes === 0) {\n    return new ArrayBuffer(0);\n  }\n\n  var abv = new Uint8Array(arraybuffer);\n  var result = new Uint8Array(end - start);\n  for (var i = start, ii = 0; i < end; i++, ii++) {\n    result[ii] = abv[i];\n  }\n  return result.buffer;\n};\n\n},{}],29:[function(_dereq_,module,exports){\n/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(chars){\n  \"use strict\";\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = chars.indexOf(base64[i]);\n      encoded2 = chars.indexOf(base64[i+1]);\n      encoded3 = chars.indexOf(base64[i+2]);\n      encoded4 = chars.indexOf(base64[i+3]);\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");\n\n},{}],30:[function(_dereq_,module,exports){\n(function (global){\n/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder = global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported = (function() {\n  try {\n    var b = new Blob(['hi']);\n    return b.size == 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported = BlobBuilder\n  && BlobBuilder.prototype.append\n  && BlobBuilder.prototype.getBlob;\n\nfunction BlobBuilderConstructor(ary, options) {\n  options = options || {};\n\n  var bb = new BlobBuilder();\n  for (var i = 0; i < ary.length; i++) {\n    bb.append(ary[i]);\n  }\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nmodule.exports = (function() {\n  if (blobSupported) {\n    return global.Blob;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],31:[function(_dereq_,module,exports){\n(function (global){\n/*! http://mths.be/utf8js v2.0.0 by @mathias */\n;(function(root) {\n\n\t// Detect free variables `exports`\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code,\n\t// and use it as `root`\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar stringFromCharCode = String.fromCharCode;\n\n\t// Taken from http://mths.be/punycode\n\tfunction ucs2decode(string) {\n\t\tvar output = [];\n\t\tvar counter = 0;\n\t\tvar length = string.length;\n\t\tvar value;\n\t\tvar extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t// Taken from http://mths.be/punycode\n\tfunction ucs2encode(array) {\n\t\tvar length = array.length;\n\t\tvar index = -1;\n\t\tvar value;\n\t\tvar output = '';\n\t\twhile (++index < length) {\n\t\t\tvalue = array[index];\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t}\n\t\treturn output;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction createByte(codePoint, shift) {\n\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n\t}\n\n\tfunction encodeCodePoint(codePoint) {\n\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n\t\t\treturn stringFromCharCode(codePoint);\n\t\t}\n\t\tvar symbol = '';\n\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n\t\t}\n\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n\t\t\tsymbol += createByte(codePoint, 12);\n\t\t\tsymbol += createByte(codePoint, 6);\n\t\t}\n\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n\t\treturn symbol;\n\t}\n\n\tfunction utf8encode(string) {\n\t\tvar codePoints = ucs2decode(string);\n\n\t\t// console.log(JSON.stringify(codePoints.map(function(x) {\n\t\t// \treturn 'U+' + x.toString(16).toUpperCase();\n\t\t// })));\n\n\t\tvar length = codePoints.length;\n\t\tvar index = -1;\n\t\tvar codePoint;\n\t\tvar byteString = '';\n\t\twhile (++index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tbyteString += encodeCodePoint(codePoint);\n\t\t}\n\t\treturn byteString;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tfunction readContinuationByte() {\n\t\tif (byteIndex >= byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\tif ((continuationByte & 0xC0) == 0x80) {\n\t\t\treturn continuationByte & 0x3F;\n\t\t}\n\n\t\t// If we end up here, it’s not a continuation byte\n\t\tthrow Error('Invalid continuation byte');\n\t}\n\n\tfunction decodeSymbol() {\n\t\tvar byte1;\n\t\tvar byte2;\n\t\tvar byte3;\n\t\tvar byte4;\n\t\tvar codePoint;\n\n\t\tif (byteIndex > byteCount) {\n\t\t\tthrow Error('Invalid byte index');\n\t\t}\n\n\t\tif (byteIndex == byteCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read first byte\n\t\tbyte1 = byteArray[byteIndex] & 0xFF;\n\t\tbyteIndex++;\n\n\t\t// 1-byte sequence (no continuation bytes)\n\t\tif ((byte1 & 0x80) == 0) {\n\t\t\treturn byte1;\n\t\t}\n\n\t\t// 2-byte sequence\n\t\tif ((byte1 & 0xE0) == 0xC0) {\n\t\t\tvar byte2 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;\n\t\t\tif (codePoint >= 0x80) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 3-byte sequence (may include unpaired surrogates)\n\t\tif ((byte1 & 0xF0) == 0xE0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\n\t\t\tif (codePoint >= 0x0800) {\n\t\t\t\treturn codePoint;\n\t\t\t} else {\n\t\t\t\tthrow Error('Invalid continuation byte');\n\t\t\t}\n\t\t}\n\n\t\t// 4-byte sequence\n\t\tif ((byte1 & 0xF8) == 0xF0) {\n\t\t\tbyte2 = readContinuationByte();\n\t\t\tbyte3 = readContinuationByte();\n\t\t\tbyte4 = readContinuationByte();\n\t\t\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |\n\t\t\t\t(byte3 << 0x06) | byte4;\n\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\n\t\t\t\treturn codePoint;\n\t\t\t}\n\t\t}\n\n\t\tthrow Error('Invalid UTF-8 detected');\n\t}\n\n\tvar byteArray;\n\tvar byteCount;\n\tvar byteIndex;\n\tfunction utf8decode(byteString) {\n\t\tbyteArray = ucs2decode(byteString);\n\t\tbyteCount = byteArray.length;\n\t\tbyteIndex = 0;\n\t\tvar codePoints = [];\n\t\tvar tmp;\n\t\twhile ((tmp = decodeSymbol()) !== false) {\n\t\t\tcodePoints.push(tmp);\n\t\t}\n\t\treturn ucs2encode(codePoints);\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar utf8 = {\n\t\t'version': '2.0.0',\n\t\t'encode': utf8encode,\n\t\t'decode': utf8decode\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn utf8;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = utf8;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tvar object = {};\n\t\t\tvar hasOwnProperty = object.hasOwnProperty;\n\t\t\tfor (var key in utf8) {\n\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.utf8 = utf8;\n\t}\n\n}(this));\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],32:[function(_dereq_,module,exports){\n(function (global){\n/**\n * JSON parse.\n *\n * @see Based on jQuery#parseJSON (MIT) and JSON2\n * @api private\n */\n\nvar rvalidchars = /^[\\],:{}\\s]*$/;\nvar rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\nvar rvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g;\nvar rtrimLeft = /^\\s+/;\nvar rtrimRight = /\\s+$/;\n\nmodule.exports = function parsejson(data) {\n  if ('string' != typeof data || !data) {\n    return null;\n  }\n\n  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');\n\n  // Attempt to parse using the native JSON parser first\n  if (global.JSON && JSON.parse) {\n    return JSON.parse(data);\n  }\n\n  if (rvalidchars.test(data.replace(rvalidescape, '@')\n      .replace(rvalidtokens, ']')\n      .replace(rvalidbraces, ''))) {\n    return (new Function('return ' + data))();\n  }\n};\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],33:[function(_dereq_,module,exports){\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\n\nexports.encode = function (obj) {\n  var str = '';\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (str.length) str += '&';\n      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n    }\n  }\n\n  return str;\n};\n\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\n\nexports.decode = function(qs){\n  var qry = {};\n  var pairs = qs.split('&');\n  for (var i = 0, l = pairs.length; i < l; i++) {\n    var pair = pairs[i].split('=');\n    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n  }\n  return qry;\n};\n\n},{}],34:[function(_dereq_,module,exports){\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\n\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports = function parseuri(str) {\n    var src = str,\n        b = str.indexOf('['),\n        e = str.indexOf(']');\n\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m = re.exec(str || ''),\n        uri = {},\n        i = 14;\n\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n\n    return uri;\n};\n\n},{}],35:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar global = (function() { return this; })();\n\n/**\n * WebSocket constructor.\n */\n\nvar WebSocket = global.WebSocket || global.MozWebSocket;\n\n/**\n * Module exports.\n */\n\nmodule.exports = WebSocket ? ws : null;\n\n/**\n * WebSocket constructor.\n *\n * The third `opts` options object gets ignored in web browsers, since it's\n * non-standard, and throws a TypeError if passed to the constructor.\n * See: https://github.com/einaros/ws/issues/227\n *\n * @param {String} uri\n * @param {Array} protocols (optional)\n * @param {Object) opts (optional)\n * @api public\n */\n\nfunction ws(uri, protocols, opts) {\n  var instance;\n  if (protocols) {\n    instance = new WebSocket(uri, protocols);\n  } else {\n    instance = new WebSocket(uri);\n  }\n  return instance;\n}\n\nif (WebSocket) ws.prototype = WebSocket.prototype;\n\n},{}],36:[function(_dereq_,module,exports){\n(function (global){\n\n/*\n * Module requirements.\n */\n\nvar isArray = _dereq_('isarray');\n\n/**\n * Module exports.\n */\n\nmodule.exports = hasBinary;\n\n/**\n * Checks for binary data.\n *\n * Right now only Buffer and ArrayBuffer are supported..\n *\n * @param {Object} anything\n * @api public\n */\n\nfunction hasBinary(data) {\n\n  function _hasBinary(obj) {\n    if (!obj) return false;\n\n    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||\n         (global.Blob && obj instanceof Blob) ||\n         (global.File && obj instanceof File)\n        ) {\n      return true;\n    }\n\n    if (isArray(obj)) {\n      for (var i = 0; i < obj.length; i++) {\n          if (_hasBinary(obj[i])) {\n              return true;\n          }\n      }\n    } else if (obj && 'object' == typeof obj) {\n      if (obj.toJSON) {\n        obj = obj.toJSON();\n      }\n\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key) && _hasBinary(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return _hasBinary(data);\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"isarray\":37}],37:[function(_dereq_,module,exports){\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n},{}],38:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar global = _dereq_('global');\n\n/**\n * Module exports.\n *\n * Logic borrowed from Modernizr:\n *\n *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n */\n\ntry {\n  module.exports = 'XMLHttpRequest' in global &&\n    'withCredentials' in new global.XMLHttpRequest();\n} catch (err) {\n  // if XMLHttp support is disabled in IE then it will throw\n  // when trying to create\n  module.exports = false;\n}\n\n},{\"global\":39}],39:[function(_dereq_,module,exports){\n\n/**\n * Returns `this`. Execute this without a \"context\" (i.e. without it being\n * attached to an object of the left-hand side), and `this` points to the\n * \"global\" scope of the current JS execution.\n */\n\nmodule.exports = (function () { return this; })();\n\n},{}],40:[function(_dereq_,module,exports){\n\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};\n},{}],41:[function(_dereq_,module,exports){\n\n/**\n * HOP ref.\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Return own keys in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.keys = Object.keys || function(obj){\n  var keys = [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n/**\n * Return own values in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.values = function(obj){\n  var vals = [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      vals.push(obj[key]);\n    }\n  }\n  return vals;\n};\n\n/**\n * Merge `b` into `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api public\n */\n\nexports.merge = function(a, b){\n  for (var key in b) {\n    if (has.call(b, key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\n/**\n * Return length of `obj`.\n *\n * @param {Object} obj\n * @return {Number}\n * @api public\n */\n\nexports.length = function(obj){\n  return exports.keys(obj).length;\n};\n\n/**\n * Check if `obj` is empty.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api public\n */\n\nexports.isEmpty = function(obj){\n  return 0 == exports.length(obj);\n};\n},{}],42:[function(_dereq_,module,exports){\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\n\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'\n  , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports = function parseuri(str) {\n  var m = re.exec(str || '')\n    , uri = {}\n    , i = 14;\n\n  while (i--) {\n    uri[parts[i]] = m[i] || '';\n  }\n\n  return uri;\n};\n\n},{}],43:[function(_dereq_,module,exports){\n(function (global){\n/*global Blob,File*/\n\n/**\n * Module requirements\n */\n\nvar isArray = _dereq_('isarray');\nvar isBuf = _dereq_('./is-buffer');\n\n/**\n * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n * Anything with blobs or files should be fed through removeBlobs before coming\n * here.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @api public\n */\n\nexports.deconstructPacket = function(packet){\n  var buffers = [];\n  var packetData = packet.data;\n\n  function _deconstructPacket(data) {\n    if (!data) return data;\n\n    if (isBuf(data)) {\n      var placeholder = { _placeholder: true, num: buffers.length };\n      buffers.push(data);\n      return placeholder;\n    } else if (isArray(data)) {\n      var newData = new Array(data.length);\n      for (var i = 0; i < data.length; i++) {\n        newData[i] = _deconstructPacket(data[i]);\n      }\n      return newData;\n    } else if ('object' == typeof data && !(data instanceof Date)) {\n      var newData = {};\n      for (var key in data) {\n        newData[key] = _deconstructPacket(data[key]);\n      }\n      return newData;\n    }\n    return data;\n  }\n\n  var pack = packet;\n  pack.data = _deconstructPacket(packetData);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n  return {packet: pack, buffers: buffers};\n};\n\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @api public\n */\n\nexports.reconstructPacket = function(packet, buffers) {\n  var curPlaceHolder = 0;\n\n  function _reconstructPacket(data) {\n    if (data && data._placeholder) {\n      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)\n      return buf;\n    } else if (isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        data[i] = _reconstructPacket(data[i]);\n      }\n      return data;\n    } else if (data && 'object' == typeof data) {\n      for (var key in data) {\n        data[key] = _reconstructPacket(data[key]);\n      }\n      return data;\n    }\n    return data;\n  }\n\n  packet.data = _reconstructPacket(packet.data);\n  packet.attachments = undefined; // no longer useful\n  return packet;\n};\n\n/**\n * Asynchronously removes Blobs or Files from data via\n * FileReader's readAsArrayBuffer method. Used before encoding\n * data as msgpack. Calls callback with the blobless data.\n *\n * @param {Object} data\n * @param {Function} callback\n * @api private\n */\n\nexports.removeBlobs = function(data, callback) {\n  function _removeBlobs(obj, curKey, containingObject) {\n    if (!obj) return obj;\n\n    // convert any blob\n    if ((global.Blob && obj instanceof Blob) ||\n        (global.File && obj instanceof File)) {\n      pendingBlobs++;\n\n      // async filereader\n      var fileReader = new FileReader();\n      fileReader.onload = function() { // this.result == arraybuffer\n        if (containingObject) {\n          containingObject[curKey] = this.result;\n        }\n        else {\n          bloblessData = this.result;\n        }\n\n        // if nothing pending its callback time\n        if(! --pendingBlobs) {\n          callback(bloblessData);\n        }\n      };\n\n      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer\n    } else if (isArray(obj)) { // handle array\n      for (var i = 0; i < obj.length; i++) {\n        _removeBlobs(obj[i], i, obj);\n      }\n    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object\n      for (var key in obj) {\n        _removeBlobs(obj[key], key, obj);\n      }\n    }\n  }\n\n  var pendingBlobs = 0;\n  var bloblessData = data;\n  _removeBlobs(bloblessData);\n  if (!pendingBlobs) {\n    callback(bloblessData);\n  }\n};\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./is-buffer\":45,\"isarray\":46}],44:[function(_dereq_,module,exports){\n\n/**\n * Module dependencies.\n */\n\nvar debug = _dereq_('debug')('socket.io-parser');\nvar json = _dereq_('json3');\nvar isArray = _dereq_('isarray');\nvar Emitter = _dereq_('component-emitter');\nvar binary = _dereq_('./binary');\nvar isBuf = _dereq_('./is-buffer');\n\n/**\n * Protocol version.\n *\n * @api public\n */\n\nexports.protocol = 4;\n\n/**\n * Packet types.\n *\n * @api public\n */\n\nexports.types = [\n  'CONNECT',\n  'DISCONNECT',\n  'EVENT',\n  'BINARY_EVENT',\n  'ACK',\n  'BINARY_ACK',\n  'ERROR'\n];\n\n/**\n * Packet type `connect`.\n *\n * @api public\n */\n\nexports.CONNECT = 0;\n\n/**\n * Packet type `disconnect`.\n *\n * @api public\n */\n\nexports.DISCONNECT = 1;\n\n/**\n * Packet type `event`.\n *\n * @api public\n */\n\nexports.EVENT = 2;\n\n/**\n * Packet type `ack`.\n *\n * @api public\n */\n\nexports.ACK = 3;\n\n/**\n * Packet type `error`.\n *\n * @api public\n */\n\nexports.ERROR = 4;\n\n/**\n * Packet type 'binary event'\n *\n * @api public\n */\n\nexports.BINARY_EVENT = 5;\n\n/**\n * Packet type `binary ack`. For acks with binary arguments.\n *\n * @api public\n */\n\nexports.BINARY_ACK = 6;\n\n/**\n * Encoder constructor.\n *\n * @api public\n */\n\nexports.Encoder = Encoder;\n\n/**\n * Decoder constructor.\n *\n * @api public\n */\n\nexports.Decoder = Decoder;\n\n/**\n * A socket.io Encoder instance\n *\n * @api public\n */\n\nfunction Encoder() {}\n\n/**\n * Encode a packet as a single string if non-binary, or as a\n * buffer sequence, depending on packet type.\n *\n * @param {Object} obj - packet object\n * @param {Function} callback - function to handle encodings (likely engine.write)\n * @return Calls callback with Array of encodings\n * @api public\n */\n\nEncoder.prototype.encode = function(obj, callback){\n  debug('encoding packet %j', obj);\n\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    encodeAsBinary(obj, callback);\n  }\n  else {\n    var encoding = encodeAsString(obj);\n    callback([encoding]);\n  }\n};\n\n/**\n * Encode packet as string.\n *\n * @param {Object} packet\n * @return {String} encoded\n * @api private\n */\n\nfunction encodeAsString(obj) {\n  var str = '';\n  var nsp = false;\n\n  // first is type\n  str += obj.type;\n\n  // attachments if we have them\n  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {\n    str += obj.attachments;\n    str += '-';\n  }\n\n  // if we have a namespace other than `/`\n  // we append it followed by a comma `,`\n  if (obj.nsp && '/' != obj.nsp) {\n    nsp = true;\n    str += obj.nsp;\n  }\n\n  // immediately followed by the id\n  if (null != obj.id) {\n    if (nsp) {\n      str += ',';\n      nsp = false;\n    }\n    str += obj.id;\n  }\n\n  // json data\n  if (null != obj.data) {\n    if (nsp) str += ',';\n    str += json.stringify(obj.data);\n  }\n\n  debug('encoded %j as %s', obj, str);\n  return str;\n}\n\n/**\n * Encode packet as 'buffer sequence' by removing blobs, and\n * deconstructing packet into object with placeholders and\n * a list of buffers.\n *\n * @param {Object} packet\n * @return {Buffer} encoded\n * @api private\n */\n\nfunction encodeAsBinary(obj, callback) {\n\n  function writeEncoding(bloblessData) {\n    var deconstruction = binary.deconstructPacket(bloblessData);\n    var pack = encodeAsString(deconstruction.packet);\n    var buffers = deconstruction.buffers;\n\n    buffers.unshift(pack); // add packet info to beginning of data list\n    callback(buffers); // write all the buffers\n  }\n\n  binary.removeBlobs(obj, writeEncoding);\n}\n\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n * @api public\n */\n\nfunction Decoder() {\n  this.reconstructor = null;\n}\n\n/**\n * Mix in `Emitter` with Decoder.\n */\n\nEmitter(Decoder.prototype);\n\n/**\n * Decodes an ecoded packet string into packet JSON.\n *\n * @param {String} obj - encoded packet\n * @return {Object} packet\n * @api public\n */\n\nDecoder.prototype.add = function(obj) {\n  var packet;\n  if ('string' == typeof obj) {\n    packet = decodeString(obj);\n    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json\n      this.reconstructor = new BinaryReconstructor(packet);\n\n      // no attachments, labeled binary but no binary data to follow\n      if (this.reconstructor.reconPack.attachments == 0) {\n        this.emit('decoded', packet);\n      }\n    } else { // non-binary full packet\n      this.emit('decoded', packet);\n    }\n  }\n  else if (isBuf(obj) || obj.base64) { // raw binary data\n    if (!this.reconstructor) {\n      throw new Error('got binary data when not reconstructing a packet');\n    } else {\n      packet = this.reconstructor.takeBinaryData(obj);\n      if (packet) { // received final buffer\n        this.reconstructor = null;\n        this.emit('decoded', packet);\n      }\n    }\n  }\n  else {\n    throw new Error('Unknown type: ' + obj);\n  }\n};\n\n/**\n * Decode a packet String (JSON data)\n *\n * @param {String} str\n * @return {Object} packet\n * @api private\n */\n\nfunction decodeString(str) {\n  var p = {};\n  var i = 0;\n\n  // look up type\n  p.type = Number(str.charAt(0));\n  if (null == exports.types[p.type]) return error();\n\n  // look up attachments if type binary\n  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {\n    p.attachments = '';\n    while (str.charAt(++i) != '-') {\n      p.attachments += str.charAt(i);\n    }\n    p.attachments = Number(p.attachments);\n  }\n\n  // look up namespace (if any)\n  if ('/' == str.charAt(i + 1)) {\n    p.nsp = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (',' == c) break;\n      p.nsp += c;\n      if (i + 1 == str.length) break;\n    }\n  } else {\n    p.nsp = '/';\n  }\n\n  // look up id\n  var next = str.charAt(i + 1);\n  if ('' != next && Number(next) == next) {\n    p.id = '';\n    while (++i) {\n      var c = str.charAt(i);\n      if (null == c || Number(c) != c) {\n        --i;\n        break;\n      }\n      p.id += str.charAt(i);\n      if (i + 1 == str.length) break;\n    }\n    p.id = Number(p.id);\n  }\n\n  // look up json data\n  if (str.charAt(++i)) {\n    try {\n      p.data = json.parse(str.substr(i));\n    } catch(e){\n      return error();\n    }\n  }\n\n  debug('decoded %s as %j', str, p);\n  return p;\n}\n\n/**\n * Deallocates a parser's resources\n *\n * @api public\n */\n\nDecoder.prototype.destroy = function() {\n  if (this.reconstructor) {\n    this.reconstructor.finishedReconstruction();\n  }\n};\n\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n * @api private\n */\n\nfunction BinaryReconstructor(packet) {\n  this.reconPack = packet;\n  this.buffers = [];\n}\n\n/**\n * Method to be called when binary data received from connection\n * after a BINARY_EVENT packet.\n *\n * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n * @return {null | Object} returns null if more binary data is expected or\n *   a reconstructed packet object if all buffers have been received.\n * @api private\n */\n\nBinaryReconstructor.prototype.takeBinaryData = function(binData) {\n  this.buffers.push(binData);\n  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list\n    var packet = binary.reconstructPacket(this.reconPack, this.buffers);\n    this.finishedReconstruction();\n    return packet;\n  }\n  return null;\n};\n\n/**\n * Cleans up binary packet reconstruction variables.\n *\n * @api private\n */\n\nBinaryReconstructor.prototype.finishedReconstruction = function() {\n  this.reconPack = null;\n  this.buffers = [];\n};\n\nfunction error(data){\n  return {\n    type: exports.ERROR,\n    data: 'parser error'\n  };\n}\n\n},{\"./binary\":43,\"./is-buffer\":45,\"component-emitter\":9,\"debug\":10,\"isarray\":46,\"json3\":47}],45:[function(_dereq_,module,exports){\n(function (global){\n\nmodule.exports = isBuf;\n\n/**\n * Returns true if obj is a buffer or an arraybuffer.\n *\n * @api private\n */\n\nfunction isBuf(obj) {\n  return (global.Buffer && global.Buffer.isBuffer(obj)) ||\n         (global.ArrayBuffer && obj instanceof ArrayBuffer);\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],46:[function(_dereq_,module,exports){\nmodule.exports=_dereq_(37)\n},{}],47:[function(_dereq_,module,exports){\n/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */\n;(function (window) {\n  // Convenience aliases.\n  var getClass = {}.toString, isProperty, forEach, undef;\n\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = typeof define === \"function\" && define.amd;\n\n  // Detect native implementations.\n  var nativeJSON = typeof JSON == \"object\" && JSON;\n\n  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if\n  // available.\n  var JSON3 = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n\n  if (JSON3 && nativeJSON) {\n    // Explicitly delegate to the native `stringify` and `parse`\n    // implementations in CommonJS environments.\n    JSON3.stringify = nativeJSON.stringify;\n    JSON3.parse = nativeJSON.parse;\n  } else {\n    // Export for web browsers, JavaScript engines, and asynchronous module\n    // loaders, using the global `JSON` object if available.\n    JSON3 = window.JSON = nativeJSON || {};\n  }\n\n  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n  var isExtended = new Date(-3509827334573292);\n  try {\n    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n    // results for certain dates in Opera >= 10.53.\n    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n      // Safari < 2.0.2 stores the internal millisecond time value correctly,\n      // but clips the values returned by the date methods to the range of\n      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n  } catch (exception) {}\n\n  // Internal: Determines whether the native `JSON.stringify` and `parse`\n  // implementations are spec-compliant. Based on work by Ken Snyder.\n  function has(name) {\n    if (has[name] !== undef) {\n      // Return cached feature test result.\n      return has[name];\n    }\n\n    var isSupported;\n    if (name == \"bug-string-char-index\") {\n      // IE <= 7 doesn't support accessing string characters using square\n      // bracket notation. IE 8 only supports this for primitives.\n      isSupported = \"a\"[0] != \"a\";\n    } else if (name == \"json\") {\n      // Indicates whether both `JSON.stringify` and `JSON.parse` are\n      // supported.\n      isSupported = has(\"json-stringify\") && has(\"json-parse\");\n    } else {\n      var value, serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n      // Test `JSON.stringify`.\n      if (name == \"json-stringify\") {\n        var stringify = JSON3.stringify, stringifySupported = typeof stringify == \"function\" && isExtended;\n        if (stringifySupported) {\n          // A test function object with a custom `toJSON` method.\n          (value = function () {\n            return 1;\n          }).toJSON = value;\n          try {\n            stringifySupported =\n              // Firefox 3.1b1 and b2 serialize string, number, and boolean\n              // primitives as object literals.\n              stringify(0) === \"0\" &&\n              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n              // literals.\n              stringify(new Number()) === \"0\" &&\n              stringify(new String()) == '\"\"' &&\n              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n              // does not define a canonical JSON representation (this applies to\n              // objects with `toJSON` properties as well, *unless* they are nested\n              // within an object or array).\n              stringify(getClass) === undef &&\n              // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n              // FF 3.1b3 pass this test.\n              stringify(undef) === undef &&\n              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n              // respectively, if the value is omitted entirely.\n              stringify() === undef &&\n              // FF 3.1b1, 2 throw an error if the given value is not a number,\n              // string, array, object, Boolean, or `null` literal. This applies to\n              // objects with custom `toJSON` methods as well, unless they are nested\n              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n              // methods entirely.\n              stringify(value) === \"1\" &&\n              stringify([value]) == \"[1]\" &&\n              // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n              // `\"[null]\"`.\n              stringify([undef]) == \"[null]\" &&\n              // YUI 3.0.0b1 fails to serialize `null` literals.\n              stringify(null) == \"null\" &&\n              // FF 3.1b1, 2 halts serialization if an array contains a function:\n              // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n              // elides non-JSON values from objects and arrays, unless they\n              // define custom `toJSON` methods.\n              stringify([undef, getClass, null]) == \"[null,null,null]\" &&\n              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n              // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n              stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n              stringify(null, value) === \"1\" &&\n              stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" &&\n              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n              // serialize extended years.\n              stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n              // The milliseconds are optional in ES 5, but required in 5.1.\n              stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n              // four-digit years instead of six-digit years. Credits: @Yaffle.\n              stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n              // values less than 1000. Credits: @Yaffle.\n              stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n          } catch (exception) {\n            stringifySupported = false;\n          }\n        }\n        isSupported = stringifySupported;\n      }\n      // Test `JSON.parse`.\n      if (name == \"json-parse\") {\n        var parse = JSON3.parse;\n        if (typeof parse == \"function\") {\n          try {\n            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n            // Conforming implementations should also coerce the initial argument to\n            // a string prior to parsing.\n            if (parse(\"0\") === 0 && !parse(false)) {\n              // Simple parsing test.\n              value = parse(serialized);\n              var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n              if (parseSupported) {\n                try {\n                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                  parseSupported = !parse('\"\\t\"');\n                } catch (exception) {}\n                if (parseSupported) {\n                  try {\n                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                    // certain octal literals.\n                    parseSupported = parse(\"01\") !== 1;\n                  } catch (exception) {}\n                }\n                if (parseSupported) {\n                  try {\n                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                    // points. These environments, along with FF 3.1b1 and 2,\n                    // also allow trailing commas in JSON objects and arrays.\n                    parseSupported = parse(\"1.\") !== 1;\n                  } catch (exception) {}\n                }\n              }\n            }\n          } catch (exception) {\n            parseSupported = false;\n          }\n        }\n        isSupported = parseSupported;\n      }\n    }\n    return has[name] = !!isSupported;\n  }\n\n  if (!has(\"json\")) {\n    // Common `[[Class]]` name aliases.\n    var functionClass = \"[object Function]\";\n    var dateClass = \"[object Date]\";\n    var numberClass = \"[object Number]\";\n    var stringClass = \"[object String]\";\n    var arrayClass = \"[object Array]\";\n    var booleanClass = \"[object Boolean]\";\n\n    // Detect incomplete support for accessing string characters by index.\n    var charIndexBuggy = has(\"bug-string-char-index\");\n\n    // Define additional utility methods if the `Date` methods are buggy.\n    if (!isExtended) {\n      var floor = Math.floor;\n      // A mapping between the months of the year and the number of days between\n      // January 1st and the first of the respective month.\n      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n      // Internal: Calculates the number of days between the Unix epoch and the\n      // first day of the given month.\n      var getDay = function (year, month) {\n        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n      };\n    }\n\n    // Internal: Determines if a property is a direct property of the given\n    // object. Delegates to the native `Object#hasOwnProperty` method.\n    if (!(isProperty = {}.hasOwnProperty)) {\n      isProperty = function (property) {\n        var members = {}, constructor;\n        if ((members.__proto__ = null, members.__proto__ = {\n          // The *proto* property cannot be set multiple times in recent\n          // versions of Firefox and SeaMonkey.\n          \"toString\": 1\n        }, members).toString != getClass) {\n          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n          // supports the mutable *proto* property.\n          isProperty = function (property) {\n            // Capture and break the object's prototype chain (see section 8.6.2\n            // of the ES 5.1 spec). The parenthesized expression prevents an\n            // unsafe transformation by the Closure Compiler.\n            var original = this.__proto__, result = property in (this.__proto__ = null, this);\n            // Restore the original prototype chain.\n            this.__proto__ = original;\n            return result;\n          };\n        } else {\n          // Capture a reference to the top-level `Object` constructor.\n          constructor = members.constructor;\n          // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n          // other environments.\n          isProperty = function (property) {\n            var parent = (this.constructor || constructor).prototype;\n            return property in this && !(property in parent && this[property] === parent[property]);\n          };\n        }\n        members = null;\n        return isProperty.call(this, property);\n      };\n    }\n\n    // Internal: A set of primitive types used by `isHostType`.\n    var PrimitiveTypes = {\n      'boolean': 1,\n      'number': 1,\n      'string': 1,\n      'undefined': 1\n    };\n\n    // Internal: Determines if the given object `property` value is a\n    // non-primitive.\n    var isHostType = function (object, property) {\n      var type = typeof object[property];\n      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];\n    };\n\n    // Internal: Normalizes the `for...in` iteration algorithm across\n    // environments. Each enumerated key is yielded to a `callback` function.\n    forEach = function (object, callback) {\n      var size = 0, Properties, members, property;\n\n      // Tests for bugs in the current environment's `for...in` algorithm. The\n      // `valueOf` property inherits the non-enumerable flag from\n      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n      (Properties = function () {\n        this.valueOf = 0;\n      }).prototype.valueOf = 0;\n\n      // Iterate over a new instance of the `Properties` class.\n      members = new Properties();\n      for (property in members) {\n        // Ignore all properties inherited from `Object.prototype`.\n        if (isProperty.call(members, property)) {\n          size++;\n        }\n      }\n      Properties = members = null;\n\n      // Normalize the iteration algorithm.\n      if (!size) {\n        // A list of non-enumerable properties inherited from `Object.prototype`.\n        members = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n        // properties.\n        forEach = function (object, callback) {\n          var isFunction = getClass.call(object) == functionClass, property, length;\n          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;\n          for (property in object) {\n            // Gecko <= 1.0 enumerates the `prototype` property of functions under\n            // certain conditions; IE does not.\n            if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n              callback(property);\n            }\n          }\n          // Manually invoke the callback for each non-enumerable property.\n          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\n        };\n      } else if (size == 2) {\n        // Safari <= 2.0.4 enumerates shadowed properties twice.\n        forEach = function (object, callback) {\n          // Create a set of iterated properties.\n          var members = {}, isFunction = getClass.call(object) == functionClass, property;\n          for (property in object) {\n            // Store each property name to prevent double enumeration. The\n            // `prototype` property of functions is not enumerated due to cross-\n            // environment inconsistencies.\n            if (!(isFunction && property == \"prototype\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\n              callback(property);\n            }\n          }\n        };\n      } else {\n        // No bugs detected; use the standard `for...in` algorithm.\n        forEach = function (object, callback) {\n          var isFunction = getClass.call(object) == functionClass, property, isConstructor;\n          for (property in object) {\n            if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n              callback(property);\n            }\n          }\n          // Manually invoke the callback for the `constructor` property due to\n          // cross-environment inconsistencies.\n          if (isConstructor || isProperty.call(object, (property = \"constructor\"))) {\n            callback(property);\n          }\n        };\n      }\n      return forEach(object, callback);\n    };\n\n    // Public: Serializes a JavaScript `value` as a JSON string. The optional\n    // `filter` argument may specify either a function that alters how object and\n    // array members are serialized, or an array of strings and numbers that\n    // indicates which properties should be serialized. The optional `width`\n    // argument may be either a string or number that specifies the indentation\n    // level of the output.\n    if (!has(\"json-stringify\")) {\n      // Internal: A map of control characters and their escaped equivalents.\n      var Escapes = {\n        92: \"\\\\\\\\\",\n        34: '\\\\\"',\n        8: \"\\\\b\",\n        12: \"\\\\f\",\n        10: \"\\\\n\",\n        13: \"\\\\r\",\n        9: \"\\\\t\"\n      };\n\n      // Internal: Converts `value` into a zero-padded string such that its\n      // length is at least equal to `width`. The `width` must be <= 6.\n      var leadingZeroes = \"000000\";\n      var toPaddedString = function (width, value) {\n        // The `|| 0` expression is necessary to work around a bug in\n        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n        return (leadingZeroes + (value || 0)).slice(-width);\n      };\n\n      // Internal: Double-quotes a string `value`, replacing all ASCII control\n      // characters (characters with code unit values between 0 and 31) with\n      // their escaped equivalents. This is an implementation of the\n      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n      var unicodePrefix = \"\\\\u00\";\n      var quote = function (value) {\n        var result = '\"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;\n        if (isLarge) {\n          symbols = value.split(\"\");\n        }\n        for (; index < length; index++) {\n          var charCode = value.charCodeAt(index);\n          // If the character is a control character, append its Unicode or\n          // shorthand escape sequence; otherwise, append the character as-is.\n          switch (charCode) {\n            case 8: case 9: case 10: case 12: case 13: case 34: case 92:\n              result += Escapes[charCode];\n              break;\n            default:\n              if (charCode < 32) {\n                result += unicodePrefix + toPaddedString(2, charCode.toString(16));\n                break;\n              }\n              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];\n          }\n        }\n        return result + '\"';\n      };\n\n      // Internal: Recursively serializes an object. Implements the\n      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n        try {\n          // Necessary for host object support.\n          value = object[property];\n        } catch (exception) {}\n        if (typeof value == \"object\" && value) {\n          className = getClass.call(value);\n          if (className == dateClass && !isProperty.call(value, \"toJSON\")) {\n            if (value > -1 / 0 && value < 1 / 0) {\n              // Dates are serialized according to the `Date#toJSON` method\n              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n              // for the ISO 8601 date time string format.\n              if (getDay) {\n                // Manually compute the year, month, date, hours, minutes,\n                // seconds, and milliseconds if the `getUTC*` methods are\n                // buggy. Adapted from @Yaffle's `date-shim` project.\n                date = floor(value / 864e5);\n                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n                date = 1 + date - getDay(year, month);\n                // The `time` value specifies the time within the day (see ES\n                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                // to compute `A modulo B`, as the `%` operator does not\n                // correspond to the `modulo` operation for negative numbers.\n                time = (value % 864e5 + 864e5) % 864e5;\n                // The hours, minutes, seconds, and milliseconds are obtained by\n                // decomposing the time within the day. See section 15.9.1.10.\n                hours = floor(time / 36e5) % 24;\n                minutes = floor(time / 6e4) % 60;\n                seconds = floor(time / 1e3) % 60;\n                milliseconds = time % 1e3;\n              } else {\n                year = value.getUTCFullYear();\n                month = value.getUTCMonth();\n                date = value.getUTCDate();\n                hours = value.getUTCHours();\n                minutes = value.getUTCMinutes();\n                seconds = value.getUTCSeconds();\n                milliseconds = value.getUTCMilliseconds();\n              }\n              // Serialize extended years correctly.\n              value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\n                \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n                // Months, dates, hours, minutes, and seconds should have two\n                // digits; milliseconds should have three.\n                \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n                // Milliseconds are optional in ES 5.0, but required in 5.1.\n                \".\" + toPaddedString(3, milliseconds) + \"Z\";\n            } else {\n              value = null;\n            }\n          } else if (typeof value.toJSON == \"function\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \"toJSON\"))) {\n            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n            // ignores all `toJSON` methods on these objects unless they are\n            // defined directly on an instance.\n            value = value.toJSON(property);\n          }\n        }\n        if (callback) {\n          // If a replacement function was provided, call it to obtain the value\n          // for serialization.\n          value = callback.call(object, property, value);\n        }\n        if (value === null) {\n          return \"null\";\n        }\n        className = getClass.call(value);\n        if (className == booleanClass) {\n          // Booleans are represented literally.\n          return \"\" + value;\n        } else if (className == numberClass) {\n          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n          // `\"null\"`.\n          return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n        } else if (className == stringClass) {\n          // Strings are double-quoted and escaped.\n          return quote(\"\" + value);\n        }\n        // Recursively serialize objects and arrays.\n        if (typeof value == \"object\") {\n          // Check for cyclic structures. This is a linear search; performance\n          // is inversely proportional to the number of unique nested objects.\n          for (length = stack.length; length--;) {\n            if (stack[length] === value) {\n              // Cyclic structures cannot be serialized by `JSON.stringify`.\n              throw TypeError();\n            }\n          }\n          // Add the object to the stack of traversed objects.\n          stack.push(value);\n          results = [];\n          // Save the current indentation level and indent one additional level.\n          prefix = indentation;\n          indentation += whitespace;\n          if (className == arrayClass) {\n            // Recursively serialize array elements.\n            for (index = 0, length = value.length; index < length; index++) {\n              element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n              results.push(element === undef ? \"null\" : element);\n            }\n            result = results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n          } else {\n            // Recursively serialize object members. Members are selected from\n            // either a user-specified list of property names, or the object\n            // itself.\n            forEach(properties || value, function (property) {\n              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n              if (element !== undef) {\n                // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                // is not the empty string, let `member` {quote(property) + \":\"}\n                // be the concatenation of `member` and the `space` character.\"\n                // The \"`space` character\" refers to the literal space\n                // character, not the `space` {width} argument provided to\n                // `JSON.stringify`.\n                results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n              }\n            });\n            result = results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n          }\n          // Remove the object from the traversed object stack.\n          stack.pop();\n          return result;\n        }\n      };\n\n      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n      JSON3.stringify = function (source, filter, width) {\n        var whitespace, callback, properties, className;\n        if (typeof filter == \"function\" || typeof filter == \"object\" && filter) {\n          if ((className = getClass.call(filter)) == functionClass) {\n            callback = filter;\n          } else if (className == arrayClass) {\n            // Convert the property names array into a makeshift set.\n            properties = {};\n            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\n          }\n        }\n        if (width) {\n          if ((className = getClass.call(width)) == numberClass) {\n            // Convert the `width` to an integer and create a string containing\n            // `width` number of space characters.\n            if ((width -= width % 1) > 0) {\n              for (whitespace = \"\", width > 10 && (width = 10); whitespace.length < width; whitespace += \" \");\n            }\n          } else if (className == stringClass) {\n            whitespace = width.length <= 10 ? width : width.slice(0, 10);\n          }\n        }\n        // Opera <= 7.54u2 discards the values associated with empty string keys\n        // (`\"\"`) only if they are used directly within an object member list\n        // (e.g., `!(\"\" in { \"\": 1})`).\n        return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n      };\n    }\n\n    // Public: Parses a JSON source string.\n    if (!has(\"json-parse\")) {\n      var fromCharCode = String.fromCharCode;\n\n      // Internal: A map of escaped control characters and their unescaped\n      // equivalents.\n      var Unescapes = {\n        92: \"\\\\\",\n        34: '\"',\n        47: \"/\",\n        98: \"\\b\",\n        116: \"\\t\",\n        110: \"\\n\",\n        102: \"\\f\",\n        114: \"\\r\"\n      };\n\n      // Internal: Stores the parser state.\n      var Index, Source;\n\n      // Internal: Resets the parser state and throws a `SyntaxError`.\n      var abort = function() {\n        Index = Source = null;\n        throw SyntaxError();\n      };\n\n      // Internal: Returns the next token, or `\"$\"` if the parser has reached\n      // the end of the source string. A token may be a string, number, `null`\n      // literal, or Boolean literal.\n      var lex = function () {\n        var source = Source, length = source.length, value, begin, position, isSigned, charCode;\n        while (Index < length) {\n          charCode = source.charCodeAt(Index);\n          switch (charCode) {\n            case 9: case 10: case 13: case 32:\n              // Skip whitespace tokens, including tabs, carriage returns, line\n              // feeds, and space characters.\n              Index++;\n              break;\n            case 123: case 125: case 91: case 93: case 58: case 44:\n              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n              // the current position.\n              value = charIndexBuggy ? source.charAt(Index) : source[Index];\n              Index++;\n              return value;\n            case 34:\n              // `\"` delimits a JSON string; advance to the next character and\n              // begin parsing the string. String tokens are prefixed with the\n              // sentinel `@` character to distinguish them from punctuators and\n              // end-of-string tokens.\n              for (value = \"@\", Index++; Index < length;) {\n                charCode = source.charCodeAt(Index);\n                if (charCode < 32) {\n                  // Unescaped ASCII control characters (those with a code unit\n                  // less than the space character) are not permitted.\n                  abort();\n                } else if (charCode == 92) {\n                  // A reverse solidus (`\\`) marks the beginning of an escaped\n                  // control character (including `\"`, `\\`, and `/`) or Unicode\n                  // escape sequence.\n                  charCode = source.charCodeAt(++Index);\n                  switch (charCode) {\n                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                      // Revive escaped control characters.\n                      value += Unescapes[charCode];\n                      Index++;\n                      break;\n                    case 117:\n                      // `\\u` marks the beginning of a Unicode escape sequence.\n                      // Advance to the first character and validate the\n                      // four-digit code point.\n                      begin = ++Index;\n                      for (position = Index + 4; Index < position; Index++) {\n                        charCode = source.charCodeAt(Index);\n                        // A valid sequence comprises four hexdigits (case-\n                        // insensitive) that form a single hexadecimal value.\n                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                          // Invalid Unicode escape sequence.\n                          abort();\n                        }\n                      }\n                      // Revive the escaped character.\n                      value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                      break;\n                    default:\n                      // Invalid escape sequence.\n                      abort();\n                  }\n                } else {\n                  if (charCode == 34) {\n                    // An unescaped double-quote character marks the end of the\n                    // string.\n                    break;\n                  }\n                  charCode = source.charCodeAt(Index);\n                  begin = Index;\n                  // Optimize for the common case where a string is valid.\n                  while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                    charCode = source.charCodeAt(++Index);\n                  }\n                  // Append the string as-is.\n                  value += source.slice(begin, Index);\n                }\n              }\n              if (source.charCodeAt(Index) == 34) {\n                // Advance to the next character and return the revived string.\n                Index++;\n                return value;\n              }\n              // Unterminated string.\n              abort();\n            default:\n              // Parse numbers and literals.\n              begin = Index;\n              // Advance past the negative sign, if one is specified.\n              if (charCode == 45) {\n                isSigned = true;\n                charCode = source.charCodeAt(++Index);\n              }\n              // Parse an integer or floating-point value.\n              if (charCode >= 48 && charCode <= 57) {\n                // Leading zeroes are interpreted as octal literals.\n                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\n                  // Illegal octal literal.\n                  abort();\n                }\n                isSigned = false;\n                // Parse the integer component.\n                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\n                // Floats cannot contain a leading decimal point; however, this\n                // case is already accounted for by the parser.\n                if (source.charCodeAt(Index) == 46) {\n                  position = ++Index;\n                  // Parse the decimal component.\n                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                  if (position == Index) {\n                    // Illegal trailing decimal.\n                    abort();\n                  }\n                  Index = position;\n                }\n                // Parse exponents. The `e` denoting the exponent is\n                // case-insensitive.\n                charCode = source.charCodeAt(Index);\n                if (charCode == 101 || charCode == 69) {\n                  charCode = source.charCodeAt(++Index);\n                  // Skip past the sign following the exponent, if one is\n                  // specified.\n                  if (charCode == 43 || charCode == 45) {\n                    Index++;\n                  }\n                  // Parse the exponential component.\n                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                  if (position == Index) {\n                    // Illegal empty exponent.\n                    abort();\n                  }\n                  Index = position;\n                }\n                // Coerce the parsed value to a JavaScript number.\n                return +source.slice(begin, Index);\n              }\n              // A negative sign may only precede numbers.\n              if (isSigned) {\n                abort();\n              }\n              // `true`, `false`, and `null` literals.\n              if (source.slice(Index, Index + 4) == \"true\") {\n                Index += 4;\n                return true;\n              } else if (source.slice(Index, Index + 5) == \"false\") {\n                Index += 5;\n                return false;\n              } else if (source.slice(Index, Index + 4) == \"null\") {\n                Index += 4;\n                return null;\n              }\n              // Unrecognized token.\n              abort();\n          }\n        }\n        // Return the sentinel `$` character if the parser has reached the end\n        // of the source string.\n        return \"$\";\n      };\n\n      // Internal: Parses a JSON `value` token.\n      var get = function (value) {\n        var results, hasMembers;\n        if (value == \"$\") {\n          // Unexpected end of input.\n          abort();\n        }\n        if (typeof value == \"string\") {\n          if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n            // Remove the sentinel `@` character.\n            return value.slice(1);\n          }\n          // Parse object and array literals.\n          if (value == \"[\") {\n            // Parses a JSON array, returning a new JavaScript array.\n            results = [];\n            for (;; hasMembers || (hasMembers = true)) {\n              value = lex();\n              // A closing square bracket marks the end of the array literal.\n              if (value == \"]\") {\n                break;\n              }\n              // If the array literal contains elements, the current token\n              // should be a comma separating the previous element from the\n              // next.\n              if (hasMembers) {\n                if (value == \",\") {\n                  value = lex();\n                  if (value == \"]\") {\n                    // Unexpected trailing `,` in array literal.\n                    abort();\n                  }\n                } else {\n                  // A `,` must separate each array element.\n                  abort();\n                }\n              }\n              // Elisions and leading commas are not permitted.\n              if (value == \",\") {\n                abort();\n              }\n              results.push(get(value));\n            }\n            return results;\n          } else if (value == \"{\") {\n            // Parses a JSON object, returning a new JavaScript object.\n            results = {};\n            for (;; hasMembers || (hasMembers = true)) {\n              value = lex();\n              // A closing curly brace marks the end of the object literal.\n              if (value == \"}\") {\n                break;\n              }\n              // If the object literal contains members, the current token\n              // should be a comma separator.\n              if (hasMembers) {\n                if (value == \",\") {\n                  value = lex();\n                  if (value == \"}\") {\n                    // Unexpected trailing `,` in object literal.\n                    abort();\n                  }\n                } else {\n                  // A `,` must separate each object member.\n                  abort();\n                }\n              }\n              // Leading commas are not permitted, object property names must be\n              // double-quoted strings, and a `:` must separate each property\n              // name and value.\n              if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                abort();\n              }\n              results[value.slice(1)] = get(lex());\n            }\n            return results;\n          }\n          // Unexpected token encountered.\n          abort();\n        }\n        return value;\n      };\n\n      // Internal: Updates a traversed object member.\n      var update = function(source, property, callback) {\n        var element = walk(source, property, callback);\n        if (element === undef) {\n          delete source[property];\n        } else {\n          source[property] = element;\n        }\n      };\n\n      // Internal: Recursively traverses a parsed JSON object, invoking the\n      // `callback` function for each value. This is an implementation of the\n      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n      var walk = function (source, property, callback) {\n        var value = source[property], length;\n        if (typeof value == \"object\" && value) {\n          // `forEach` can't be used to traverse an array in Opera <= 8.54\n          // because its `Object#hasOwnProperty` implementation returns `false`\n          // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n          if (getClass.call(value) == arrayClass) {\n            for (length = value.length; length--;) {\n              update(value, length, callback);\n            }\n          } else {\n            forEach(value, function (property) {\n              update(value, property, callback);\n            });\n          }\n        }\n        return callback.call(source, property, value);\n      };\n\n      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n      JSON3.parse = function (source, callback) {\n        var result, value;\n        Index = 0;\n        Source = \"\" + source;\n        result = get(lex());\n        // If a JSON string contains multiple tokens, it is invalid.\n        if (lex() != \"$\") {\n          abort();\n        }\n        // Reset the parser state.\n        Index = Source = null;\n        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n      };\n    }\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    define(function () {\n      return JSON3;\n    });\n  }\n}(this));\n\n},{}],48:[function(_dereq_,module,exports){\nmodule.exports = toArray\n\nfunction toArray(list, index) {\n    var array = []\n\n    index = index || 0\n\n    for (var i = index || 0; i < list.length; i++) {\n        array[i - index] = list[i]\n    }\n\n    return array\n}\n\n},{}]},{},[1])\n(1)\n});\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/client/repl.js":"var internalClient = require('../internal-client')\n\t, _open = require('../util/open');\n\nvar server;\n\nmodule.exports = function (dpd) {\n\tconsole.log('type help for a list of commands');\n\tvar repl = require(\"repl\")\n\t,\tcontext = repl.start(\"dpd > \", null, replEval, true, true).context;\n\tserver = dpd;\n\n\tcontext.dpd = buildReplClient(dpd);\n\n\treturn commands;\n};\n\nfunction replEval(src, ctx, name, fn) {\n\t/*jshint evil:true*/\n\tvar result;\n\n\t// first try to match a command\n\t// trim '(',')', and '\\n'\n\tif(tryCommand(src.replace(/\\(|\\)|\\n/g, ''))) {\n\t\tfn();\n\t} else {\n\t\ttry {\n\t\t\tresult = eval(src);\n\t\t} catch(e) {}\n\t\tfn(null, result);\n\t}\n}\n\n\nvar commands = {\n\thelp: function () {\n\t\tfunction pad(key) {\n\t\t\tvar len = 0, padding = '';\n\t\t\tObject.keys(help).forEach(function (key) {\n\t\t\t\tif(key.length > len) len = key.length;\n\t\t\t});\n\t\t\tlen -= key.length;\n\t\t\tlen += 10;\n\t\t\twhile(padding.length < len) {padding += ' '}\n\t\t\treturn padding;\n\t\t}\n\n\t\tObject.keys(help).forEach(function (key) {\n\t\t\tconsole.log('\\t' + key + pad(key) + help[key]);\n\t\t});\n\t},\n\n\tresources: function () {\n\t\tserver.resources && server.resources.forEach(function (r) {\n\t\t\tif(r.config.type) console.log('\\t' + r.path, '(' + r.config.type + ')');\n\t\t});\n\t},\n\n\tdashboard: function () {\n\t\topen('/dashboard/');\n\t},\n\n\topen: function () {\n\t\topen();\n\t}\n};\n\nfunction open(url) {\n\turl = url || '';\n\t_open('http://localhost:' + server.options.port + url);\n}\n\nvar help = {\n\tdashboard: 'open the resource editor in a browser',\n\tdpd:       'the server object',\n\tresources: 'list your resources'\n};\n\nfunction tryCommand(cmd) {\n\tconsole.info(cmd);\n\tif(commands[cmd]) {\n\t\treturn commands[cmd]() || true;\n\t}\n}\n\nfunction buildReplClient(dpd) {\n\tvar client = internalClient.build(dpd, {isRoot: true});\n\n\tObject.keys(client).forEach(function (key) {\n\t\tObject.keys(client[key]).forEach(function(k) {\n\t\t\tvar orig = client[key][k];\n\t\t\tclient[key][k] = function () {\n\t\t\t\tvar args = Array.protoype.slice.call(arguments);\n\t\t\t\tif(typeof args[args.length - 1] !== 'function') {\n\t\t\t\t\t\targs[args.length] = function(res, err) {\n\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\tconsole.log('Error', err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\targs.length++;\n\t\t\t\t}\n\t\t\t\torig.apply(client[key], args);\n\t\t\t};\n\t\t});\n\t});\n\n\treturn client;\n}\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/util/open.js":"module.exports = require('opener');","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resources/user-collection.js":"var util = require('util')\n  , Collection = require('./collection')\n  , uuid = require('../util/uuid')\n  , crypto = require('crypto')\n  , _ = require('underscore')\n  , debug = require('debug')('user-collection');\n\n/**\n * A `UserCollection` adds user authentication to the Collection resource.\n *\n * Options:\n *\n *   - `path`                the base path a resource should handle\n *   - `config.properties`   the properties of objects the collection should store\n *   - `db`                  the database a collection will use for persistence\n *\n * @param {string} name      The name of the resource\n * @param {Object} options   The options\n */\n\nfunction UserCollection(name, options) {\n  Collection.apply(this, arguments);\n\n  if(!this.properties) {\n    this.properties = {};\n  }\n\n  // username and password are required\n  this.properties.username = this.properties.username || {type: 'string'};\n  this.properties.username.required = true;\n  this.properties.password = this.properties.password || {type: 'string'};\n  this.properties.password.required = true;\n}\nutil.inherits(UserCollection, Collection);\n\nUserCollection.dashboard = Collection.dashboard;\nUserCollection.events    = _.clone(Collection.events);\nUserCollection.events.push('Login');\n\nUserCollection.SALT_LEN = 256;\n\n/**\n * Handle an incoming http request and execute.\n * the correct `Store` proxy function based on `ctx.req.method`.\n *\n * @param {Context} ctx The Context of the request.\n */\n\nUserCollection.prototype.handle = function (ctx) {\n  var uc = this;\n\n  if (ctx.req.method == \"GET\" && (ctx.url === '/count' || ctx.url.indexOf('/index-of') === 0)) {\n    return Collection.prototype.handle.apply(uc, arguments);\n  }\n\n  if(ctx.url === '/logout') {\n    var logoutDomain = { event: \"LOGOUT\" };\n    uc.addDomainAdditions(logoutDomain);\n    uc.doBeforeRequestEvent(ctx, logoutDomain, function(err) {\n      if (err) return ctx.done(err);\n      if (ctx.res.cookies) ctx.res.cookies.set('sid', null, {overwrite: true});\n      ctx.session.remove(ctx.done);\n    });\n    return;\n  }\n\n  // set id if one wasnt provided in the query\n  ctx.query.id = ctx.query.id || this.parseId(ctx) || (ctx.body && ctx.body.id);\n\n  // make sure password will never be included\n  if(ctx.query.$fields) {\n    var omit = true;\n    for (var field in ctx.query.$fields) {\n      if (ctx.query.$fields.hasOwnProperty(field) && ctx.query.$fields[field] > 0) {\n        omit = false;\n        if ('password' in ctx.query.$fields) delete ctx.query.$fields.password;\n      }\n      break;\n    }\n    if (omit || Object.keys(ctx.query.$fields).length === 0) ctx.query.$fields.password = 0;\n  } else ctx.query.$fields = {password: 0};\n\n  switch(ctx.req.method) {\n    case 'GET':\n      if(ctx.url === '/me') {\n        debug('session %j', ctx.session.data);\n        var noSuchUser = function () {\n          // set no-cache headers\n          ctx.res.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n          ctx.res.setHeader(\"Pragma\", \"no-cache\");\n          ctx.res.setHeader(\"Expires\", \"0\");\n          ctx.res.statusCode = 204;\n          return ctx.done();\n        };\n\n        if(!(ctx.session && ctx.session.data && ctx.session.data.uid)) {\n          return noSuchUser();\n        }\n\n        ctx.query = ctx.query || {};\n        ctx.query.id = ctx.session.data.uid;\n\n        // raw store query, need unmodified username and password\n        return uc.store.find({id: ctx.session.data.uid, $fields: {username: 1, password: 1}}, function(err, user) {\n          if (err) {\n            console.error(\"Internal Error: \" + JSON.stringify(err));\n            return ctx.done({statusCode: 500, message: \"Error retrieving user for verification\"});\n          }\n\n          var userHash = user ? uc.getUserAndPasswordHash(user) : null;\n\n          // verify that the username and password haven't changed since this session was created\n          if (ctx.session.data.userhash === userHash) {\n            // hash verified, call find() now to ensure all event scripts are executed\n            return uc.find(ctx, function(err, user){\n              if (!user) return noSuchUser(); // if the request was cancelled by the event script\n              delete user.password;\n              ctx.done.apply(null, arguments);\n            });\n          } else {\n            noSuchUser();\n          }\n        });\n      }\n\n      this.find(ctx, ctx.done);\n    break;\n    case 'POST':\n      if(ctx.url === '/login') {\n        var loginDomain = { event: \"LOGIN\" };\n        uc.addDomainAdditions(loginDomain);\n        uc.doBeforeRequestEvent(ctx, loginDomain, function(err) {\n          if (err) return ctx.done(err);\n          uc.handleLogin(ctx);\n        });\n        break;\n      }\n      /* falls through */\n    case 'PUT':\n      if (!ctx.body && typeof ctx.body !== \"object\") {\n        return ctx.done(\"Missing request body\");\n      }\n      this.setPassword(ctx.body);\n      var isSelf = ctx.session.user && ctx.session.user.id === ctx.query.id || (ctx.body && ctx.body.id);\n      if ((ctx.query.id || ctx.body.id) && ctx.body && !isSelf && !ctx.session.isRoot && !ctx.req.internal) {\n        delete ctx.body.username;\n        delete ctx.body.password;\n      }\n\n      function done(err, res) {\n        if (res) delete res.password;\n        ctx.done(err, res);\n      }\n\n      if(ctx.query.id || ctx.body.id) {\n        this.save(ctx, done);\n      } else {\n        this.store.first({username: ctx.body.username}, function (err, u) {\n          if(u) return ctx.done({errors: {username: 'is already in use'}});\n          uc.save(ctx, done);\n        });\n      }\n    break;\n    case 'DELETE':\n      debug('removing', ctx.query, ctx.done);\n      this.remove(ctx, ctx.done);\n    break;\n  }\n};\n\n/**\n * Retrieves the user for the current request.\n * @param {Context}  ctx The Context of the request.\n * @param {Function} fn  Callback that will receive the returned user.\n */\nUserCollection.prototype.loginFindUser = function (ctx, fn) {\n  var credentials = ctx.req.body || { };\n  return this.store.first({ username: credentials.username }, fn);\n};\n\n/**\n * Sets the session token on the client.\n * @param {Context} ctx       The Context of the request.\n * @param {string} sessionId  The Session identifier.\n */\nUserCollection.prototype.setSessionId = function (ctx, sessionId) {\n  // dpd internal client does not have res.cookies\n  if (ctx.res.cookies) ctx.res.cookies.set('sid', sessionId, { overwrite: true });\n  if (ctx.res.setHeader) ctx.res.setHeader('X-Session-Token', sessionId);\n};\n\n/**\n * Process the login for the current `ctx`.\n * @param {Context} ctx The Context of the request.\n */\nUserCollection.prototype.handleLogin = function (ctx) {\n  var uc = this\n    , path = uc.path\n    , credentials = ctx.req.body || {};\n\n  debug('trying to login as %s', credentials.username);\n  /* jshint eqnull:true */\n  // disable the jshint warning about needing === below\n  // this checks whether the values are either null or undefined\n  if (credentials.username == null || typeof credentials.username !== 'string' || credentials.password == null || typeof credentials.password !== 'string') {\n    ctx.res.statusCode = 400;\n    ctx.done('username or password not specified');\n    return;\n  }\n\n  this.loginFindUser(ctx, function (err, user) {\n    if (err) return ctx.done(err);\n    // keep a clone of the user so we can compare it later to see if any changes were made in the login event\n    var userClone = user ? _.clone(user) : null\n      , domain = { 'me': userClone, 'data': userClone, 'success': false };\n    var usernameAndPasswordHash = user ? uc.getUserAndPasswordHash(user) : null;\n\n    // checks if the user was changed in the login event and saves it if it was\n    function checkAndSaveUser(fn) {\n      if (user && !_.isEqual(userClone, user)) {\n        // something was changed, need to update the user\n        debug('detected that user %s was updated from login event, saving...', credentials.username);\n        // create a new context and set the body to our user so that we can call save on the collection\n        var newCtx = _.clone(ctx);\n        newCtx.body = userClone;\n        // skip events when calling uc.save, so that validate and put is not called from this\n        // internal call\n        newCtx._internalSkipEvents = true;\n        newCtx.query = { id: user.id };\n        // disable changing the username from this event\n        if (newCtx.body.username) delete newCtx.body.username;\n        if (newCtx.body.id) delete newCtx.body.id; // remove id from body\n\n        uc.save(newCtx, fn);\n      } else {\n        fn();\n      }\n    }\n\n    function loginDone(err) {\n      if (err) return ctx.done(err);\n      checkAndSaveUser(function (err) {\n        if (err) return ctx.done(err);\n        debug('logged in as %s', credentials.username);\n        ctx.session.set({ path: path, uid: user.id, userhash: usernameAndPasswordHash }).save(function (err, session) {\n          if (err) return ctx.done(\"Internal error\");\n          uc.setSessionId(ctx, session.id);\n          ctx.done(err, { path: session.path, id: session.id, uid: session.uid });\n        });\n      });\n    }\n\n    function loginFail(err) {\n      checkAndSaveUser(function () {\n        if (err) return ctx.done(err); // allow overriding of error message from event\n        ctx.res.statusCode = 401;\n        ctx.done('bad credentials');\n      });\n    }\n\n    if (user) {\n      // a user with this username exists\n      delete userClone.password;\n      if (uc.checkHash(uc, user, credentials) === true) {\n        domain.success = true;\n        delete user.password; // make sure the password is not included in any sort of response\n\n        if (uc.events.Login) {\n          uc.events.Login.run(ctx, domain, loginDone);\n        } else {\n          loginDone();\n        }\n        return;\n      }\n    }\n\n    if (uc.events.Login) {\n      uc.events.Login.run(ctx, domain, loginFail);\n    } else {\n      loginFail();\n    }\n  });\n};\n\n/**\n * Returns a hash created by concatenating the username and password.\n * @param  {Object} user An object containing `username` and `password` properties.\n * @return {string}      The hash.\n */\nUserCollection.prototype.getUserAndPasswordHash = function(user) {\n  return crypto.createHash('md5').update(user.username + user.password).digest('hex');\n};\n\n/**\n * Used to verify that a session is still valid. Sets `ctx.session` if successful.\n * @param {Context}  ctx The Context of the request.\n * @param {Function} fn  The callback that handles the response.\n */\nUserCollection.prototype.handleSession = function (ctx, fn) {\n  // called when any session has been created\n  var session = ctx.session\n    , path = this.path\n    , uc = this;\n\n  if(session && session.data && session.data.path == path && session.data.uid) {\n    this.store.find({ id: session.data.uid }, function (err, user) {\n      if (user) {\n        var userHash = uc.getUserAndPasswordHash(user);\n        delete user.password;\n        // verify that the username and password haven't changed since this session was created\n        if (session.data.userhash === userHash) {\n          session.user = user;\n        } else {\n          ctx.res.setHeader('X-Session-Invalidated', 'true');\n        }\n      }\n      fn(err);\n    });\n  } else {\n    fn();\n  }\n};\n\n/**\n * Takes a plain-text password and hashes it. Mutates `body.password`.\n * @param {Object} body The body of the request. Must contain `body.password`.\n */\nUserCollection.prototype.setPassword = function (body) {\n  // do not add salt to empty string\n  if(!body || !body.password || typeof body.password !== 'string' || body.password.length < 1) {\n      return;\n  }\n  var salt = uuid.create(UserCollection.SALT_LEN);\n  body.password = salt + this.hash(body.password, salt);\n};\n\n/**\n * Hashes a password with the specified salt.\n * @param  {string} password The password.\n * @param  {string} salt     The salt.\n * @return {string}          The hash, as a hex digest.\n */\nUserCollection.prototype.hash = function (password, salt) {\n  if (password && !isNaN(password)){\n    password = password.toString();\n  }\n  return crypto.createHmac('sha256', salt).update(password).digest('hex');\n};\n\n/**\n * Checks whether the given password matches the one persisted for the user.\n * @param  {UserCollection} uc  The UserCollection.\n * @param  {Object} user        The user object. Must have a property named `password`.\n * @param  {Object} credentials The credentials to be checked. Must have a property named `password`.\n * @return {boolean}            `true` if the credentials are valid.\n */\nUserCollection.prototype.checkHash = function (uc, user, credentials) {\n  // NOTE: there is no need for this to take uc as the first parameter\n  var salt = user.password.substr(0, UserCollection.SALT_LEN)\n    , hash = user.password.substr(UserCollection.SALT_LEN);\n\n  return hash === uc.hash(credentials.password, salt);\n};\n\nUserCollection.label = 'Users Collection';\nUserCollection.defaultPath = '/users';\n\nUserCollection.prototype.clientGenerationGet = ['me'];\nUserCollection.prototype.clientGenerationExec = ['login', 'logout'];\n\nmodule.exports = UserCollection;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/resources/collection/index.js":"var validation = require('validation')\n  , util = require('util')\n  , path = require('path')\n  , Resource = require('../../resource')\n  , debug = require('debug')('collection')\n  , _ = require('underscore');\n\n/**\n * A `Collection` validates incoming requests then proxies them into a `Store`.\n *\n * Options:\n *\n *   - `path`                the base path a resource should handle\n *   - `config.properties`   the properties of objects the collection should store\n *   - `db`                  the database a collection will use for persistence\n *\n * @param {Object} options\n */\n\nfunction Collection(name, options) {\n  Resource.apply(this, arguments);\n  var config = this.config;\n  if(config) {\n    this.properties = config.properties;\n  }\n  if (options) {\n    this.store = options.db && options.db.createStore(this.name);\n  }\n}\nutil.inherits(Collection, Resource);\nCollection.external = {};\nCollection.prototype.clientGeneration = true;\nCollection.domainAdditions = {};\n\nCollection.events  = ['Get', 'Validate', 'Post', 'Put', 'Delete', 'AfterCommit', 'BeforeRequest'];\nCollection.dashboard = {\n    path: path.join(__dirname, 'dashboard')\n  , pages: ['Properties', 'Data', 'Events', 'API']\n  , scripts: [\n      '/js/lib/jquery-ui-1.8.22.custom.min.js'\n    , '/js/lib/knockout-2.1.0.js'\n    , '/js/lib/knockout.mapping.js'\n    , '/js/util/knockout-util.js'\n    , '/js/util/key-constants.js'\n    , '/js/util.js'\n  ]\n};\n\n/**\n * Validate the request `body` against the `Collection` `properties`\n * and return an object containing any `errors`.\n *\n * @param {Object} body\n * @return {Object} errors\n */\n\nCollection.prototype.validate = function (body, create) {\n  if(!this.properties) this.properties = {};\n\n  var keys = Object.keys(this.properties)\n    , props = this.properties\n    , errors = {};\n\n  keys.forEach(function (key) {\n    var prop = props[key]\n      , val = body[key]\n      , type = prop.type || 'string';\n\n    debug('validating %s against %j', key, prop);\n\n    if(validation.exists(val)) {\n      // coercion\n      if(type === 'number') val = Number(val);\n\n      if(!validation.isType(val, type)) {\n        debug('failed to validate %s as %s', key, type);\n        errors[key] = 'must be a ' + type;\n      }\n    } else if(prop.required) {\n      debug('%s is required', key);\n      if(create || body.hasOwnProperty(key)) {\n        errors[key] = 'is required';\n      }\n    } else if(type === 'boolean') {\n      body[key] = false;\n    }\n  });\n\n  if(Object.keys(errors).length) return errors;\n};\n\n/**\n * Sanitize the request `body` against the `Collection` `properties`\n * and return an object containing only properties that exist in the\n * `Collection.config.properties` object.\n *\n * @param {Object} body\n * @return {Object} sanitized\n */\n\nCollection.prototype.sanitize = function (body) {\n  if(!this.properties) return {};\n\n  var sanitized = {}\n    , props = this.properties\n    , keys = Object.keys(props);\n\n  keys.forEach(function (key) {\n    var prop = props[key]\n    , expected = prop.type\n    , val = body[key]\n    , actual = typeof val;\n\n    // skip properties that do not exist\n    if(!prop) return;\n\n    if(expected == actual) {\n      sanitized[key] = val;\n    } else if (expected === 'array' && Array.isArray(val)) {\n      sanitized[key] = val;\n    } else if(expected == 'number' && actual == 'string') {\n      sanitized[key] = parseFloat(val);\n    } else if(expected == 'string' && actual == 'number') {\n      sanitized[key] = '' + val;\n    } else if(val === null && (expected == 'string' || expected == 'array')) // keep null\n      sanitized[key] = val;\n  });\n\n  return sanitized;\n};\n\nCollection.prototype.sanitizeQuery = function (query) {\n  var sanitized = {}\n    , props = this.properties || {}\n    , keys = query && Object.keys(query);\n\n  keys && keys.forEach(function (key) {\n    var prop = props[key] || props[key.split('.')[0]]\n    , expected = prop && prop.type\n    , val = query[key]\n    , actual = typeof val;\n\n    // skip properties that do not exist, but allow $ queries and id\n    if(!prop && key.indexOf('$') !== 0 && key !== 'id') return;\n\n    // hack - $limitRecursion and $skipEvents are not mongo properties so we'll get rid of them, too\n    if (key === '$limitRecursion') return;\n    if (key === '$skipEvents') return;\n\n    if(expected == 'string' && actual == 'number') {\n      sanitized[key] = '' + val;\n    } else if(expected == 'number' && actual == 'string') {\n      sanitized[key] = parseFloat(val);\n    } else if(expected == 'boolean' && actual == 'string') {\n      sanitized[key] = (val === 'true') ? true : false;\n    } else if(expected == 'object') {\n      sanitized[key] = val;\n    }  else if (typeof val !== 'undefined') {\n      sanitized[key] = val;\n    }\n  });\n\n  return sanitized;\n};\n\n/**\n * Handle an incoming http `req` and `res` and execute\n * the correct `Store` proxy function based on `req.method`.\n *\n *\n * @param {ServerRequest} req\n * @param {ServerResponse} res\n */\n\nCollection.prototype.handle = function (ctx) {\n  // set id one wasnt provided in the query\n  ctx.query.id = ctx.query.id || this.parseId(ctx) || (ctx.body && ctx.body.id);\n\n  if (ctx.req.method == \"GET\" && ctx.query.id === 'count') {\n    delete ctx.query.id;\n    this.count(ctx, ctx.done);\n    return;\n  }\n\n  if (ctx.req.method == \"GET\" && ctx.query.id === 'index-of') {\n    delete ctx.query.id;\n    var id = ctx.url.split('/').filter(function(p) { return p; })[1];\n    this.indexOf(id, ctx, ctx.done);\n    return;\n  }\n\n  switch(ctx.req.method) {\n    case 'GET':\n      this.find(ctx, ctx.done);\n    break;\n    case 'PUT':\n      if (typeof ctx.query.id != 'string' && !ctx.req.isRoot) {\n        ctx.done(\"must provide id to update an object\");\n        break;\n      }\n    /* falls through */\n    case 'POST':\n      this.save(ctx, ctx.done);\n    break;\n    case 'DELETE':\n      this.remove(ctx, ctx.done);\n    break;\n  }\n};\n\n\n/**\n * Parse the `ctx.url` for an id\n *\n * @param {Context} ctx\n * @return {String} id\n */\n\nCollection.prototype.parseId = function(ctx) {\n  if(ctx.url && ctx.url !== '/') return ctx.url.split('/')[1];\n};\n\nCollection.prototype.count = function(ctx, fn) {\n  if (ctx.session.isRoot) {\n    var store = this.store\n      , sanitizedQuery = this.sanitizeQuery(ctx.query || {});\n\n    store.count(sanitizedQuery, function (err, result) {\n      if (err) return fn(err);\n\n      fn(null, {count: result});\n    });\n  } else {\n    fn({\n      message: \"Must be root to count\",\n      statusCode: 403\n    });\n  }\n};\n\nCollection.prototype.indexOf = function(id, ctx, fn) {\n  if (ctx.session.isRoot) {\n    var store = this.store\n      , sanitizedQuery = this.sanitizeQuery(ctx.query || {});\n\n    sanitizedQuery.$fields = {id: 1};\n\n    store.find(sanitizedQuery, function (err, result) {\n      if (err) return fn(err);\n\n      var indexOf = result.map(function(r) { return r.id }).indexOf(id);\n\n      fn(null, {index: indexOf});\n    });\n  } else {\n    fn({\n      message: \"Must be root to get index\",\n      statusCode: 403\n    });\n  }\n};\n\n/**\n * Find all the objects in a collection that match the given\n * query. Then execute its get script using each object.\n *\n * @param {Context} ctx\n * @param {Function} fn(err, result)\n */\n\nCollection.prototype.find = function (ctx, fn) {\n  var collection = this\n    , store = this.store\n    , query = ctx.query || {}\n    , data\n    , sanitizedQuery = this.sanitizeQuery(query);\n\n  function done(err, result) {\n    debug(\"Get listener called back with\", err || result);\n    if(typeof query.id === 'string' && (result && result.length === 0) || !result) {\n      err = err || {\n        message: 'not found',\n        statusCode: 404\n      };\n      debug('could not find object by id %s', query.id);\n    }\n    if(err) {\n      return fn(err);\n    }\n    if(typeof query.id === 'string' && Array.isArray(result)) {\n      return fn(null, result[0]);\n    }\n\n    fn(null, result);\n  }\n\n  function doFind() {\n    // resanitize query in case it was modified from BeforeRequest event\n    sanitizedQuery = collection.sanitizeQuery(query);\n\n    debug('finding %j; sanitized %j', query, sanitizedQuery);\n    store.find(sanitizedQuery, function (err, result) {\n      debug(\"Find Callback\");\n      if(err) return done(err);\n      debug('found %j', err || result || 'none');\n      if(!collection.shouldRunEvent(collection.events.Get, ctx)) {\n        return done(err, result);\n      }\n\n      var errors = {};\n\n      if(Array.isArray(result)) {\n\n        var remaining = result && result.length;\n        if(!remaining) return done(err, result);\n        result.forEach(function (data) {\n          // domain for onGet event scripts\n          var domain = collection.createDomain(data, errors);\n\n          collection.events.Get.run(ctx, domain, function (err) {\n            if (err) {\n              if (err instanceof Error) {\n                return done(err);\n              } else {\n                errors[data.id] = err;\n              }\n            }\n\n            remaining--;\n            if(!remaining) {\n              done(null, result.filter(function(r) {\n                return !errors[r.id];\n              }));\n            }\n          });\n        });\n      } else {\n        // domain for onGet event scripts\n        data = result;\n        var domain = collection.createDomain(data, errors);\n\n        collection.events.Get.run(ctx, domain, function (err) {\n          if(err) return done(err);\n\n          done(null, data);\n        });\n      }\n    });\n  }\n\n  var beforeRequestDomain = { event: \"GET\" };\n  collection.addDomainAdditions(beforeRequestDomain);\n  collection.doBeforeRequestEvent(ctx, beforeRequestDomain, function(err) {\n    if (err) return fn(err);\n    doFind();\n  });\n};\n\n/**\n * Execute a `delete` event script, if one exists, using each object found.\n * Then remove a single object that matches the `ctx.query.id`. Finally call\n * `fn(err)` passing an `error` if one occurred.\n *\n * @param {Context} ctx\n * @param {Function} fn(err)\n */\n\nCollection.prototype.remove = function (ctx, fn) {\n  var collection = this\n    , store = this.store\n    , query = ctx.query\n    , sanitizedQuery = this.sanitizeQuery(query)\n    , errors;\n\n  if(!(query && query.id)) return fn('You must include a query with an id when deleting an object from a collection.');\n\n  function doRemove() {\n    store.find(sanitizedQuery, function (err, result) {\n      if(err) {\n        return fn(err);\n      }\n\n      // if a single id was passed and it wasn't found, we'll get undefined\n      // convert it to an empty array which will be handled below\n      if (typeof result === 'undefined') {\n        result = [];\n      }\n      // convert result to an array if it is not\n      if (!Array.isArray(result)) {\n        result = [result];\n      }\n\n      // nothing to delete\n      if (result.length === 0) {\n        return fn(null, { count: 0 });\n      }\n\n      var remaining = result.length\n        , idsToDelete = [];\n\n      function done(data, err) {\n        var id = data.id;\n        remaining--;\n        if (result.length === 1 && err) {\n          // we only have one row to delete but an error has occured, pass it through\n          return fn(err);\n        }\n\n        if (err && err instanceof Error) {\n          // only halt execution if an actual error was thrown from the script\n          // cancel() from within the script is not an instance of Error, so it will be ignored by this\n          return fn(err);\n        } else if (!err) {\n          // script executed without an error, this id will be deleted\n          idsToDelete.push(id);\n        }\n\n        if(!remaining) {\n          store.remove({ id: { $in: idsToDelete } }, function(){\n            collection.doAfterCommitEvent('DELETE', ctx, data);\n            fn.apply(null, arguments);\n          });\n        }\n      }\n\n      result.forEach(function(data) {\n        if (collection.shouldRunEvent(collection.events.Delete, ctx)) {\n          var domain = collection.createDomain(data, errors);\n          collection.events.Delete.run(ctx, domain, function (err) { done(data, err);  });\n        } else {\n          done(data);\n        }\n      });\n    });\n  }\n\n  var beforeRequestDomain = { event: \"DELETE\" };\n  collection.addDomainAdditions(beforeRequestDomain);\n  collection.doBeforeRequestEvent(ctx, beforeRequestDomain, function(err) {\n    if (err) return fn(err);\n    doRemove();\n  });\n};\n\n/**\n * Execute the onPost or onPut listener. If it succeeds,\n * save the given item in the collection.\n *\n * @param {Context} ctx\n * @param {Function} fn(err, result)\n */\n\nCollection.prototype.save = function (ctx, fn) {\n  var collection = this\n    , store = this.store\n    , item = ctx.body\n\n    , query = ctx.query || {}\n    , errors = {};\n\n  if(!item) return done('You must include an object when saving or updating.');\n\n  // build command object\n  var commands = {};\n  Object.keys(item).forEach(function (key) {\n    if(item[key] && typeof item[key] === 'object' && !Array.isArray(item[key])) {\n      Object.keys(item[key]).forEach(function (k) {\n        if(k[0] == '$') {\n          commands[key] = item[key];\n        }\n      });\n    }\n  });\n\n  item = this.sanitize(item);\n\n  // handle id on either body or query\n  if(item.id) {\n    query.id = item.id;\n  }\n\n  debug('saving %j with id %s', item, query.id);\n\n  function done(err, item) {\n    errors = domain && domain.hasErrors() && {errors: errors};\n    debug('errors: %j', err);\n    fn(errors || err, item);\n  }\n\n  var domain = collection.createDomain(item, errors);\n\n  domain.protectedKeys = [];\n\n  domain.protect = function(property) {\n    if (domain.data.hasOwnProperty(property)) {\n      domain.protectedKeys.push(property);\n      delete domain.data[property];\n    }\n  };\n\n  domain.changed =  function (property) {\n    if(domain.data.hasOwnProperty(property)) {\n      if(domain.previous && _.isEqual(domain.previous[property], domain.data[property])) {\n        return false;\n      }\n\n      return true;\n    }\n    return false;\n  };\n\n  domain.previous = {};\n\n  function put() {\n    var id = query.id\n      , sanitizedQuery = collection.sanitizeQuery(query)\n      , prev = {};\n\n    store.first(sanitizedQuery, function(err, obj) {\n      if(!obj) {\n        if (Object.keys(sanitizedQuery) === 1) {\n          return done(new Error(\"No object exists with that id\"));\n        } else {\n          return done(new Error(\"No object exists that matches that query\"));\n        }\n      }\n      if(err) return done(err);\n\n      // copy previous obj\n      Object.keys(obj).forEach(function (key) {\n        prev[key] = _.clone(obj[key]);\n      });\n\n      // merge changes\n      Object.keys(item).forEach(function (key) {\n        obj[key] = item[key];\n      });\n\n      prev.id = id;\n      item = obj;\n      domain['this'] = item;\n      domain.data = item;\n      domain.previous = prev;\n\n      collection.execCommands('update', item, commands);\n\n      var errs = collection.validate(item);\n\n      if(errs) return done({errors: errs});\n\n      function runPutEvent(err) {\n        if(err) {\n          return done(err);\n        }\n\n        if(collection.shouldRunEvent(collection.events.Put, ctx)) {\n          collection.events.Put.run(ctx, domain, commit);\n        } else {\n          commit();\n        }\n      }\n\n      function commit(err) {\n        if(err || domain.hasErrors()) {\n          return done(err || errors);\n        }\n\n        delete item.id;\n        store.update({id: query.id}, item, function (err) {\n          if(err) return done(err);\n          item.id = id;\n          collection.doAfterCommitEvent('PUT', ctx, item, prev, domain.protectedKeys);\n          done(null, item);\n        });\n      }\n\n      if (collection.shouldRunEvent(collection.events.Validate, ctx)) {\n        collection.events.Validate.run(ctx, domain, function (err) {\n          if(err || domain.hasErrors()) return done(err || errors);\n          runPutEvent(err);\n        });\n      } else {\n        runPutEvent();\n      }\n    });\n  }\n\n  function post() {\n    collection.execCommands('update', item, commands);\n    var errs = collection.validate(item, true);\n\n    if(errs) return done({errors: errs});\n\n    // generate id before event listener\n    item.id = store.createUniqueIdentifier();\n\n    function commit(){\n      store.insert(item, function(err, data) {\n        if (err) return done(err);\n        collection.doAfterCommitEvent('POST', ctx, item);\n        done(null, data);\n      });\n    }\n\n    if(collection.shouldRunEvent(collection.events.Post, ctx)) {\n      collection.events.Post.run(ctx, domain, function (err) {\n        if(err) {\n          debug('onPost script error %j', err);\n          return done(err);\n        }\n        if(err || domain.hasErrors()) return done(err || errors);\n        debug('inserting item', item);\n\n        commit();\n      });\n    } else {\n      commit();\n    }\n  }\n\n  var beforeRequestDomain = { event: \"POST\", data: item };\n  collection.addDomainAdditions(beforeRequestDomain);\n\n  if (query.id) {\n    beforeRequestDomain.event = \"PUT\";\n    collection.doBeforeRequestEvent(ctx, beforeRequestDomain, function(err) {\n      if (err) return fn(err);\n      put();\n    });\n  } else if (collection.shouldRunEvent(collection.events.Validate, ctx)) {\n    collection.doBeforeRequestEvent(ctx, beforeRequestDomain, function(err) {\n      if (err) return fn(err);\n      collection.events.Validate.run(ctx, domain, function (err) {\n        if(err || domain.hasErrors()) return done(err || errors);\n        post();\n      });\n    });\n  } else {\n    collection.doBeforeRequestEvent(ctx, beforeRequestDomain, function(err) {\n      if (err) return fn(err);\n      post();\n    });\n  }\n};\n\nCollection.prototype.createDomain = function(data, errors) {\n  var collection = this;\n\n  var hasErrors = false;\n  var domain = {\n    error: function(key, val) {\n      debug('error %s %s', key, val);\n      errors[key] = val || true;\n      hasErrors = true;\n    },\n    errorIf: function(condition, key, value) {\n      if (condition) {\n        domain.error(key, value);\n      }\n    },\n    errorUnless: function(condition, key, value) {\n      domain.errorIf(!condition, key, value);\n    },\n    hasErrors: function() {\n      return hasErrors;\n    },\n    hide: function(property) {\n      delete domain.data[property];\n    },\n    'this': data,\n    data: data\n  };\n  collection.addDomainAdditions(domain);\n  return domain;\n};\n\nCollection.prototype.addDomainAdditions = function(domain) {\n  var collection = this;\n  _.each(Collection.domainAdditions, function(value, name) {\n    if (typeof value === \"function\") {\n      // bind `this` to collection on any added functions\n      domain[name] = value.bind({collection: collection, domain: domain});\n    } else {\n      domain[name] = value;\n    }\n  });\n};\n\nCollection.prototype.doAfterCommitEvent = function(method, ctx, data, previous, protectedKeys) {\n  var collection = this;\n  if (collection.shouldRunEvent(collection.events.AfterCommit, ctx)) {\n    data = _.clone(data);\n    if (protectedKeys && protectedKeys.length > 0 && previous) {\n      // add back whatever fields were protected, because they are removed from data\n      protectedKeys.forEach(function (key) {\n        data[key] = previous[key];\n      });\n    }\n    var domain = {data: data, 'this': data, method: method, previous: previous};\n    collection.addDomainAdditions(domain);\n    collection.events.AfterCommit.run(ctx, domain, function (err) {\n      if (err) debug('AfterCommit errors in script: %j', err);\n    });\n  }\n};\n\nCollection.prototype.doBeforeRequestEvent = function(ctx, domain, fn) {\n  var collection = this;\n  if (collection.shouldRunEvent(collection.events.BeforeRequest, ctx)) {\n    collection.events.BeforeRequest.run(ctx, domain, fn);\n  } else {\n    fn();\n  }\n};\n\nCollection.defaultPath = '/my-objects';\n\nCollection.prototype.configDeleted = function(config, fn) {\n  debug('resource deleted');\n  return this.store.remove(fn);\n};\n\nCollection.prototype.configChanged = function(config, fn) {\n  var store = this.store;\n\n  debug('resource changed');\n\n  if(config.id && config.id !== this.name) {\n    store.rename(config.id.replace('/', ''), function (err) {\n        if(err && err.message === \"source namespace does not exist\") {\n          fn();\n        } else {\n          fn(err);\n        }\n    });\n    return;\n  }\n\n  fn(null);\n};\n\nCollection.external.rename = function (options, ctx, fn) {\n  if(!ctx.req && !ctx.req.isRoot) return fn(new Error('cannot rename multiple'));\n\n  if(options.properties) {\n    this.store.update({}, {$rename: options.properties}, fn);\n  }\n};\n\nCollection.prototype.execCommands = function (type, obj, commands) {\n  try {\n    if(type === 'update') {\n      Object.keys(commands).forEach(function (key) {\n        if(typeof commands[key] == 'object') {\n          Object.keys(commands[key]).forEach(function (k) {\n            if(k[0] !== '$') return;\n\n            var val = commands[key][k];\n\n            if(k === '$inc') {\n              if(!obj[key]) obj[key] = 0;\n              obj[key] = parseFloat(obj[key]);\n              obj[key] += parseFloat(val);\n            }\n            if(k === '$push') {\n              if(Array.isArray(obj[key])) {\n                obj[key].push(val);\n              } else {\n                obj[key] = [val];\n              }\n            }\n            if(k === '$pushAll') {\n              if(Array.isArray(obj[key])) {\n                if(Array.isArray(val)) {\n                  for(var i = 0; i < val.length; i++) {\n                    obj[key].push(val[i]);\n                  }\n                }\n              } else {\n                obj[key] = val;\n              }\n            }\n            if (k === '$pull') {\n              if(Array.isArray(obj[key])) {\n                obj[key] = obj[key].filter(function(item) {\n                  return item !== val;\n                });\n              }\n            }\n            if (k === '$pullAll') {\n              if(Array.isArray(obj[key])) {\n                if(Array.isArray(val)) {\n                  obj[key] = obj[key].filter(function(item) {\n                    return val.indexOf(item) === -1;\n                  });\n                }\n              }\n            }\n            if (k === '$addUnique') {\n              val = Array.isArray(val) ? val : [val];\n              if(Array.isArray(obj[key])) {\n                obj[key] = _.union(obj[key], val);\n              } else {\n                obj[key] = val;\n              }\n            }\n          });\n        }\n      });\n    }\n  } catch(e) {\n    debug('error while executing commands', type, obj, commands);\n  }\n  return this;\n};\n\nCollection.prototype.shouldRunEvent = function (ev, ctx) {\n  // check if a property is set on the context to ignore cascading to other events\n  // used internally\n  if (ctx && ctx._internalSkipEvents) return false;\n\n  var skipEvents = ctx && ((ctx.body && ctx.body.$skipEvents) || (ctx.query && ctx.query.$skipEvents))\n    , rootPrevent = ctx && ctx.session && ctx.session.isRoot && skipEvents;\n  return !rootPrevent && ev;\n};\n\nCollection.extendDomain = function(name, val) {\n    Collection.domainAdditions[name] = val;\n};\n\nmodule.exports = Collection;\n","/home/travis/build/npmtest/node-npmtest-deployd/node_modules/deployd/lib/util/mongod.js":"var fs = require('fs')\n  , spawn = require('child_process').spawn\n  , debug = require('debug')('mongod');\n\n/*!\n * Utility for restarting the current apps mongod instance.\n */\n\nexports.restart = function (mongod, env, port, fn) {\n  var pid;\n\n  debug('starting %s', mongod);\n\n  try {\n    fs.unlinkSync('./data/mongod.lock');\n    pid = JSON.parse(fs.readFileSync('./.dpd/pids/mongod'));\n\n    if(pid) {\n      debug('pid %s', pid);\n      process.kill(pid);\n    } else {\n      debug('no pid found');\n    }\n  } catch(e) {}\n\n  /*! \n  * The mongodb config file is set to the platform-specific null device in order to override the default options of mongodb in \n  * Homebrew and similar distributions.\n  */\n  var options =  ['--dbpath', './data', '--pidfilepath', './.dpd/pids/mongod', '--port', port, '-f', fs.existsSync('/dev/null') ? '/dev/null' : 'NUL' ];\n  if(env === 'development') {\n    options.push('--nojournal');\n    options.push('--smallfiles');\n    options.push('--nssize');\n    options.push('4');\n  } \n  \n  var proc = spawn(mongod, options, {title: 'FOOBAR', stdio: 'pipe'})\n    , buf = '';\n  proc.stdout.on('data', function(data) {\n    buf += data;\n    if(~buf.indexOf('waiting for connections on port')) {\n      proc.emit('listening');\n    }\n    debug(data);\n  });\n\n  function kill(e) {\n    console.log('bye');\n    if(e) debug('error: %s', e);\n    debug('killing mongod');\n    fs.writeFileSync('./.dpd/pids/mongod', '');\n    proc.kill();\n    process.exit(0);\n  }\n\n  // callback\n  proc.once('listening', fn);\n  proc.on('error', function(err) {\n    debug('proc error %s %s', mongod, err);\n    // report error to startup function in bin/dpd\n    fn(err);\n  });\n  proc.on('exit', function(code) {\n    debug('exit code %s', code);\n    if (code) fn(code);\n  });\n  \n  process.stdin.on('end', kill);\n  \n  process.on('exit', kill);\n  // on non win32 platforms SIGTERM is emitted instead of exit when\n  // a process is killed by another process, so use it to end our mongo\n  // process\n  process.on('SIGTERM', kill);\n};\n"}